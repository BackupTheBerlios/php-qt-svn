--- kalyptus	2005-12-11 15:22:25.227758112 +0100
+++ svntest/kalyptus/kalyptus	2005-12-10 12:58:47.000000000 +0100
@@ -109,7 +109,7 @@
 # Supported formats
 %formats = ( "java" => "kalyptusCxxToJava", "jni" => "kalyptusCxxToJNI", 
 	"dcopidl" => "kalyptusCxxToDcopIDL",
-	"smoke" => "kalyptusCxxToSmoke", "csharp" => "kalyptusCxxToCSharp", "php" => "kalyptusCxxToPHP", "kimono" => "kalyptusCxxToKimono",
+	"smoke" => "kalyptusCxxToSmoke", "csharp" => "kalyptusCxxToCSharp", "kimono" => "kalyptusCxxToKimono",
         "ECMA" => "kalyptusCxxToECMA", "swig" => "kalyptusCxxToSwig",
 		"KDOMECMA" => "kalyptusKDOMEcma");
 
@@ -535,7 +535,7 @@
 		next if ( $p =~ /^\s*Q_ENUMS/           # ignore Q_ENUMS
                         || $p =~ /^\s*Q_FLAGS/       # and Q_FLAGS
                         || $p =~ /^\s*Q_DECLARE_FLAGS/       # and Q_DECLARE_FLAGS
-#                        || $p =~ /^\s*Q_PROPERTY/       # and Q_PROPERTY
+                        || $p =~ /^\s*Q_PROPERTY/       # and Q_PROPERTY
                         || $p =~ /^\s*QDOC_PROPERTY/
                         || $p =~ /^\s*Q_GADGET/
                         || $p =~ /^\s*Q_OVERRIDE/       # and Q_OVERRIDE
@@ -722,9 +722,6 @@
 		$declNodeType = "c";
 		return $l;
 	}
-	elsif ( $l =~ /Q_PROPERTY/ ) {	# property
-		return $l;
-	}
 
 	do {
 		$decl .= $l;
@@ -804,12 +801,7 @@
         elsif ( $declNodeType eq "k" ) {
 	        $cNode->AddProp( "DcopExported", 1 );
         }
-    # properties
-    elsif ( $decl =~ s/Q_PROPERTY// ) {
-		print "Property: <$1>\n" if $debug;
 
-		$newNode = newProperty( $decl );
-	}
 	# Typedef struct/class
 	elsif ( $decl =~ /^\s*typedef
 			\s+(struct|union|class|enum)
@@ -1761,40 +1753,6 @@
 	return $node;
 }
 
-=head2 newProperty
-
-	Parameters: property
-
-	Handles a property
-
-=cut
-
-sub newProperty
-{
-	my ( $property ) = @_;
-
-    $property =~ s/^\s+|\s+$//g;  
-    
-    $property =~ s/\(//;
-    $property =~ s/\)//;
-
-    my @items = split(/ /,$property);
-
-    do {
-	    my ( $node ) = Ast::New( $items[1] );
-
-	    $node->AddProp( "NodeType", "property" );
-        $node->AddProp( "type", $items[0] );
-        $node->AddProp( "READ", $items[3] );
-        $node->AddProp( "WRITE", $items[5] );
-        $node->AddProp( "NOTIFY", $items[7] );
-
-        $cNode->{KidAccess} = "public";
-	    kdocAstUtil::attachChild( $cNode, $node );
-        return $node;
-
-    } if defined $items[1];
-}
 
 
 =head2 show_usage
