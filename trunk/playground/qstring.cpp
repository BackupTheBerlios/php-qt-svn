/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QString.cpp - QString PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*		public enumSectionFlag:long {
			SectionDefault = 0x00,
			SectionSkipEmpty = 0x01,
			SectionIncludeLeadingSep = 0x02,
			SectionIncludeTrailingSep = 0x04,
			SectionCaseInsensitiveSeps = 0x08
		}
*/

/*		public enumSplitBehavior:long {
			SplitBehavior = 0,
			SplitBehavior = 1
		}
*/

/*		public enumNormalizationForm:long {
			NormalizationForm = 0,
			NormalizationForm = 1,
			NormalizationForm = 2,
			NormalizationForm = 3
		}
*/

/*********************************
 *    class     QString
 *    function  QString
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QString, QString){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_~(o->QString());
	}
}


/*********************************
 *    class     QString
 *    function  size
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, size){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->size());
	}
}


/*********************************
 *    class     QString
 *    function  count
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, count){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->count());
	}
}


/*********************************
 *    class     QString
 *    function  length
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, length){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->length());
	}
}


/*********************************
 *    class     QString
 *    function  isEmpty
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, isEmpty){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEmpty());
	}
}


/*********************************
 *    class     QString
 *    function  resize
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, resize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		o->resize((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  fill
 *    flags:    
 *
 *    @param   QChar
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, fill){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->fill( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  truncate
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, truncate){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		o->truncate((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  chop
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, chop){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		o->chop((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  capacity
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, capacity){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->capacity());
	}
}


/*********************************
 *    class     QString
 *    function  reserve
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, reserve){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		o->reserve((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  squeeze
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, squeeze){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		o->squeeze();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  unicode
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QChar *
*********************************/
ZEND_METHOD(QString, unicode){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		const QChar * obj = (const QChar *) o->unicode();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  data
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   QChar *
*********************************/
ZEND_METHOD(QString, data){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		QChar * obj = (QChar *) o->data();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  constData
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QChar *
*********************************/
ZEND_METHOD(QString, constData){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		const QChar * obj = (const QChar *) o->constData();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  detach
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, detach){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		o->detach();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  isDetached
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, isDetached){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->isDetached());
	}
}


/*********************************
 *    class     QString
 *    function  clear
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, clear){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		o->clear();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  at
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   const QChar
*********************************/
ZEND_METHOD(QString, at){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QString
 *    function  arg
 *    flags:    c
 *
 *    @param   qlonglong
 *    @param   int
 *    @param   int
 *    @param   const QChar&
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, arg){
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg((int) var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 10
		long var_2;
	// QLatin1Char(' ')
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 5){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 'g'
		char* var_2;
		int* len_2;

	// -1
		long var_3;
	// QLatin1Char(' ')
		zval* var_4;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olslo", &var_0, &var_1, &var_2, &len_2, &var_3, &var_4) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1,  var_2, (int) var_3,  tmp_var_4);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		char* var_0;
		int* len_0;

	// 0
		long var_1;
	// QLatin1Char(' ')
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"slo", &var_0, &len_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( var_0, (int) var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 0
		long var_1;
	// QLatin1Char(' ')
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 0
		long var_1;
	// QLatin1Char(' ')
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0, (int) var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0,  tmp_var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: arg
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// 
		zval* var_2;

	// 
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->arg( tmp_var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  vsprintf
 *    flags:    
 *
 *    @param   const char*
 *    @param   va_list
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, vsprintf){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_0, &len_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->vsprintf( var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  indexOf
 *    flags:    c
 *
 *    @param   QChar
 *    @param   int
 *    @param   Qt::CaseSensitivity
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, indexOf){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 0
		long var_1;
	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->indexOf( tmp_var_0, (int) var_1,  tmp_var_2));
// marked for overloading: indexOf
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 0
		long var_1;
	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->indexOf( tmp_var_0, (int) var_1,  tmp_var_2));
	}
}


/*********************************
 *    class     QString
 *    function  lastIndexOf
 *    flags:    c
 *
 *    @param   QChar
 *    @param   int
 *    @param   Qt::CaseSensitivity
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, lastIndexOf){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// -1
		long var_1;
	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->lastIndexOf( tmp_var_0, (int) var_1,  tmp_var_2));
// marked for overloading: lastIndexOf
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// -1
		long var_1;
	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->lastIndexOf( tmp_var_0, (int) var_1,  tmp_var_2));
	}
}


/*********************************
 *    class     QString
 *    function  contains
 *    flags:    c
 *
 *    @param   QChar
 *    @param   Qt::CaseSensitivity
 *    @param   -

 *    @access   public
 *    @return   QBool
*********************************/
ZEND_METHOD(QString, contains){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
// marked for overloading: contains
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
// marked for overloading: count
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->count( tmp_var_0,  tmp_var_1));
// marked for overloading: count
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->count( tmp_var_0,  tmp_var_1));
// marked for overloading: indexOf
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 0
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->indexOf( tmp_var_0, (int) var_1));
// marked for overloading: lastIndexOf
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->lastIndexOf( tmp_var_0, (int) var_1));
// marked for overloading: contains
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
// marked for overloading: count
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->count( tmp_var_0));
	}
}


/*********************************
 *    class     QString
 *    function  section
 *    flags:    c
 *
 *    @param   QChar
 *    @param   int
 *    @param   int
 *    @param   SectionFlags
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, section){
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		long var_1;
	// -1
		long var_2;
	// SectionDefault
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->section( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: section
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		long var_1;
	// -1
		long var_2;
	// SectionDefault
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->section( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: section
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		long var_1;
	// -1
		long var_2;
	// SectionDefault
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->section( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  left
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, left){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->left((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  right
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, right){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->right((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  mid
 *    flags:    c
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, mid){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->mid((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  startsWith
 *    flags:    c
 *
 *    @param   const QString&
 *    @param   Qt::CaseSensitivity
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, startsWith){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->startsWith( tmp_var_0,  tmp_var_1));
// marked for overloading: startsWith
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->startsWith( tmp_var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QString
 *    function  endsWith
 *    flags:    c
 *
 *    @param   const QString&
 *    @param   Qt::CaseSensitivity
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, endsWith){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->endsWith( tmp_var_0,  tmp_var_1));
// marked for overloading: endsWith
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->endsWith( tmp_var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QString
 *    function  leftJustified
 *    flags:    c
 *
 *    @param   int
 *    @param   QChar
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, leftJustified){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// QLatin1Char(' ')
		zval* var_1;

	// false
		bool* var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lob", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->leftJustified((int) var_0,  tmp_var_1, (bool) var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  rightJustified
 *    flags:    c
 *
 *    @param   int
 *    @param   QChar
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, rightJustified){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// QLatin1Char(' ')
		zval* var_1;

	// false
		bool* var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lob", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->rightJustified((int) var_0,  tmp_var_1, (bool) var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  toLower
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, toLower){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->toLower();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  toUpper
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, toUpper){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->toUpper();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  trimmed
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, trimmed){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->trimmed();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  simplified
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, simplified){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->simplified();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  insert
 *    flags:    
 *
 *    @param   int
 *    @param   QChar
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, insert){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->insert((int) var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: insert
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		zval* var_1;

	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->insert((int) var_0,  tmp_var_1, (int) var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: insert
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->insert((int) var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  append
 *    flags:    
 *
 *    @param   QChar
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, append){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->append( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: append
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->append( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  prepend
 *    flags:    
 *
 *    @param   QChar
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, prepend){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->prepend( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: prepend
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->prepend( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  remove
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, remove){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->remove((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: remove
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->remove( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: remove
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::CaseSensitive
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->remove( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  replace
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   QChar
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, replace){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace((int) var_0, (int) var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: replace
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace((int) var_0, (int) var_1,  tmp_var_2, (int) var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: replace
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace((int) var_0, (int) var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: replace
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: replace
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: replace
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: replace
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->replace( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: remove
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->remove( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  split
 *    flags:    c
 *
 *    @param   const QString&
 *    @param   SplitBehavior
 *    @param   Qt::CaseSensitivity
 *    @param   -

 *    @access   public
 *    @return   QStringList
*********************************/
ZEND_METHOD(QString, split){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// KeepEmptyParts
		zval* var_1;

	// Qt::CaseSensitive
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QString *o = (QString*) PHP_QT_FETCH();
		QStringList obj = (QStringList) o->split( tmp_var_0,  tmp_var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: split
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// KeepEmptyParts
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QStringList obj = (QStringList) o->split( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  normalized
 *    flags:    c
 *
 *    @param   NormalizationForm
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, normalized){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->normalized( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: normalized
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->normalized( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  utf16
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const ushort *
*********************************/
ZEND_METHOD(QString, utf16){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		const ushort * obj = (const ushort *) o->utf16();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  toAscii
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QByteArray
*********************************/
ZEND_METHOD(QString, toAscii){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BYTE[](o->toAscii());
	}
}


/*********************************
 *    class     QString
 *    function  toLatin1
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QByteArray
*********************************/
ZEND_METHOD(QString, toLatin1){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BYTE[](o->toLatin1());
	}
}


/*********************************
 *    class     QString
 *    function  toUtf8
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QByteArray
*********************************/
ZEND_METHOD(QString, toUtf8){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BYTE[](o->toUtf8());
	}
}


/*********************************
 *    class     QString
 *    function  toLocal8Bit
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QByteArray
*********************************/
ZEND_METHOD(QString, toLocal8Bit){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BYTE[](o->toLocal8Bit());
	}
}


/*********************************
 *    class     QString
 *    function  setUnicode
 *    flags:    
 *
 *    @param   const QChar*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, setUnicode){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setUnicode( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  setUtf16
 *    flags:    
 *
 *    @param   const ushort*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, setUtf16){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setUtf16( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  compare
 *    flags:    c
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, compare){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->compare( tmp_var_0));
	}
}


/*********************************
 *    class     QString
 *    function  localeAwareCompare
 *    flags:    c
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, localeAwareCompare){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->localeAwareCompare( tmp_var_0));
	}
}


/*********************************
 *    class     QString
 *    function  toShort
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   short
*********************************/
ZEND_METHOD(QString, toShort){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_SHORT(o->toShort((bool*) var_0, (int) var_1));
	}
}


/*********************************
 *    class     QString
 *    function  toUShort
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   ushort
*********************************/
ZEND_METHOD(QString, toUShort){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_USHORT(o->toUShort((bool*) var_0, (int) var_1));
	}
}


/*********************************
 *    class     QString
 *    function  toInt
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QString, toInt){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->toInt((bool*) var_0, (int) var_1));
	}
}


/*********************************
 *    class     QString
 *    function  toUInt
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   uint
*********************************/
ZEND_METHOD(QString, toUInt){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->toUInt((bool*) var_0, (int) var_1));
	}
}


/*********************************
 *    class     QString
 *    function  toLong
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   long
*********************************/
ZEND_METHOD(QString, toLong){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->toLong((bool*) var_0, (int) var_1));
	}
}


/*********************************
 *    class     QString
 *    function  toULong
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   ulong
*********************************/
ZEND_METHOD(QString, toULong){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_ULONG(o->toULong((bool*) var_0, (int) var_1));
	}
}


/*********************************
 *    class     QString
 *    function  toLongLong
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   qlonglong
*********************************/
ZEND_METHOD(QString, toLongLong){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QString
 *    function  toULongLong
 *    flags:    c
 *
 *    @param   bool*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   qulonglong
*********************************/
ZEND_METHOD(QString, toULongLong){
	if (ZEND_NUM_ARGS() == 2){
	// 0
		bool* var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QString
 *    function  toFloat
 *    flags:    c
 *
 *    @param   bool*
 *    @param   -

 *    @access   public
 *    @return   float
*********************************/
ZEND_METHOD(QString, toFloat){
	if (ZEND_NUM_ARGS() == 1){
	// 0
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_FLOAT(o->toFloat((bool*) var_0));
	}
}


/*********************************
 *    class     QString
 *    function  toDouble
 *    flags:    c
 *
 *    @param   bool*
 *    @param   -

 *    @access   public
 *    @return   double
*********************************/
ZEND_METHOD(QString, toDouble){
	if (ZEND_NUM_ARGS() == 1){
	// 0
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_DOUBLE(o->toDouble((bool*) var_0));
	}
}


/*********************************
 *    class     QString
 *    function  setNum
 *    flags:    
 *
 *    @param   short
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString &
*********************************/
ZEND_METHOD(QString, setNum){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 'g'
		char* var_1;
		int* len_1;

	// 6
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osl", &var_0, &var_1, &len_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0,  var_1, (int) var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: setNum
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 'g'
		char* var_1;
		int* len_1;

	// 6
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osl", &var_0, &var_1, &len_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->setNum( tmp_var_0,  var_1, (int) var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: prepend
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		char* var_0;
		int* len_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->prepend( var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: prepend
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->prepend( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: append
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		char* var_0;
		int* len_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->append( var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: append
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString & obj = (QString &) o->append( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  begin
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   iterator
*********************************/
ZEND_METHOD(QString, begin){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_INTPTR(o->begin());
	}
}


/*********************************
 *    class     QString
 *    function  constBegin
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const_iterator
*********************************/
ZEND_METHOD(QString, constBegin){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QString
 *    function  end
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   iterator
*********************************/
ZEND_METHOD(QString, end){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_INTPTR(o->end());
	}
}


/*********************************
 *    class     QString
 *    function  constEnd
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const_iterator
*********************************/
ZEND_METHOD(QString, constEnd){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QString
 *    function  push_back
 *    flags:    
 *
 *    @param   QChar
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, push_back){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		o->push_back( tmp_var_0);
		RETURN_NULL();
// marked for overloading: push_back
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		o->push_back( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  push_front
 *    flags:    
 *
 *    @param   QChar
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QString, push_front){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		o->push_front( tmp_var_0);
		RETURN_NULL();
// marked for overloading: push_front
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		o->push_front( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QString
 *    function  isNull
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, isNull){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->isNull());
	}
}


/*********************************
 *    class     QString
 *    function  isSimpleText
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, isSimpleText){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->isSimpleText());
	}
}


/*********************************
 *    class     QString
 *    function  isRightToLeft
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QString, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_BOOL(o->isRightToLeft());
	}
}


/*********************************
 *    class     QString
 *    function  fromAscii
 *    flags:    s
 *
 *    @param   const char*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, fromAscii){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->fromAscii( var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  fromLatin1
 *    flags:    s
 *
 *    @param   const char*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, fromLatin1){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->fromLatin1( var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  fromUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, fromUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->fromUtf8( var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  fromLocal8Bit
 *    flags:    s
 *
 *    @param   const char*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, fromLocal8Bit){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl", &var_0, &len_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->fromLocal8Bit( var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  fromUtf16
 *    flags:    s
 *
 *    @param   const ushort*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, fromUtf16){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// -1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->fromUtf16( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QString
 *    function  fromRawData
 *    flags:    s
 *
 *    @param   const QChar*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, fromRawData){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->fromRawData( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: compare
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->compare( tmp_var_0,  tmp_var_1));
// marked for overloading: localeAwareCompare
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QString *o = (QString*) PHP_QT_FETCH();
		RETURN_LONG(o->localeAwareCompare( tmp_var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QString
 *    function  number
 *    flags:    s
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QString, number){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->number((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: number
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->number( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: number
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->number( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: number
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 10
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->number( tmp_var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: number
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 'g'
		char* var_1;
		int* len_1;

	// 6
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osl", &var_0, &var_1, &len_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QString *o = (QString*) PHP_QT_FETCH();
		QString obj = (QString) o->number( tmp_var_0,  var_1, (int) var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QString_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QString,__construct){

	QString *QString_ptr = new QString();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* unicode QChar**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QChar* tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
		 /*long size int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*QChar c QChar*/
		if(Z_TYPE_P(param_0) == IS_) {
			QChar tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long size int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
		 /*QChar c QChar*/
		if(Z_TYPE_P(param_1) == IS_) {
			QChar tmp(Z_STRVAL_P(param_1));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* latin1 QLatin1String&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QLatin1String& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* arg1 QString&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*char*  ch char**/
		if(Z_TYPE_P(param_0) == IS_STRING) {
			char* tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*byte[] a QByteArray&*/
		if(Z_TYPE_P(param_0) == IS_ARRAY) {
			QByteArray& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* arg1 Null&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			Null& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	PHP_QT_REGISTER(QString_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QString);

