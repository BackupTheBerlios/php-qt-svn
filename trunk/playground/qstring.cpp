/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QString.cpp - QString PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*		public enumSectionFlag:long {
			SectionDefault = 0x00,
			SectionSkipEmpty = 0x01,
			SectionIncludeLeadingSep = 0x02,
			SectionIncludeTrailingSep = 0x04,
			SectionCaseInsensitiveSeps = 0x08
		}
*/

/*		public enumSplitBehavior:long {
			SplitBehavior = 0,
			SplitBehavior = 1
		}
*/

/*		public enumNormalizationForm:long {
			NormalizationForm = 0,
			NormalizationForm = 1,
			NormalizationForm = 2,
			NormalizationForm = 3
		}
*/
/*********************************
 *    class     QString */
/*
 *    function  compare
 *    flags:    c
 */
ZEND_METHOD(QString, compare){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->compare((const QString&) var_o_0));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->compare((const QString&) var_o_0, (const QString&) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  utf16
 *    flags:    c
 */
ZEND_METHOD(QString, utf16){
			QString *obj = (QString) PHP_QT_FETCH();
			const ushort * return_object = (const ushort *) obj->utf16();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  constData
 *    flags:    c
 */
ZEND_METHOD(QString, constData){
			QString *obj = (QString) PHP_QT_FETCH();
			const QChar * return_object = (const QChar *) obj->constData();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  insert
 *    flags:    
 */
ZEND_METHOD(QString, insert){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->insert((int) var_lo_0, (QChar) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->insert((int) var_lo_0, (const QString&) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* lol */
		long var_lol_0;    // default: 
		zval* var_lol_1;   // default: 
		long var_lol_2;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_lol_0, &var_lol_1, &var_lol_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QChar*") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->insert((int) var_lol_0, (const QChar*) var_o_1, (int) var_lol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  clear
 *    flags:    
 */
ZEND_METHOD(QString, clear){
			QString *obj = (QString) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
}

/*********************************
 *    class     QString */
/*
 *    function  setUtf16
 *    flags:    
 */
ZEND_METHOD(QString, setUtf16){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const ushort*") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setUtf16((const ushort*) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  prepend
 *    flags:    
 */
ZEND_METHOD(QString, prepend){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int* len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->prepend( var_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->prepend((QChar) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->prepend((const QString&) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QByteArray&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->prepend((const QByteArray&) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  trimmed
 *    flags:    c
 */
ZEND_METHOD(QString, trimmed){
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->trimmed();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  chop
 *    flags:    
 */
ZEND_METHOD(QString, chop){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			obj->chop((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  leftJustified
 *    flags:    c
 */
ZEND_METHOD(QString, leftJustified){

	if (ZEND_NUM_ARGS() == 3){
		/* lob */
		long var_lob_0;    // default: 
		zval* var_lob_1;   // default: QLatin1Char(' ')
		bool* var_lob_2;   // _default: false

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &var_lob_1, &var_lob_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->leftJustified((int) var_lob_0, (QChar) var_o_1, (bool) var_lob_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  squeeze
 *    flags:    
 */
ZEND_METHOD(QString, squeeze){
			QString *obj = (QString) PHP_QT_FETCH();
			obj->squeeze();
			RETURN_NULL();
}

/*********************************
 *    class     QString */
/*
 *    function  count
 *    flags:    c
 */
ZEND_METHOD(QString, count){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->count());

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->count((const QRegExp&) var_o_0));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->count((QChar) var_o_0, (Qt::CaseSensitivity) var_o_1));
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->count((const QString&) var_o_0, (Qt::CaseSensitivity) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromAscii
 *    flags:    s
 */
ZEND_METHOD(QString, fromAscii){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int* len_sl_0;

		long var_sl_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_0, &len_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->fromAscii( var_0 ,(int) var_sl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLongLong
 *    flags:    c
 */
ZEND_METHOD(QString, toLongLong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUpper
 *    flags:    c
 */
ZEND_METHOD(QString, toUpper){
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->toUpper();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  QString
 *    flags:    
 */
ZEND_METHOD(QString, QString){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_~(obj->QString());
}

/*********************************
 *    class     QString */
/*
 *    function  normalized
 *    flags:    c
 */
ZEND_METHOD(QString, normalized){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "NormalizationForm") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->normalized((NormalizationForm) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "NormalizationForm" && tmp_1 == "QChar::UnicodeVersion") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->normalized((NormalizationForm) var_o_0, (QChar::UnicodeVersion) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromUtf16
 *    flags:    s
 */
ZEND_METHOD(QString, fromUtf16){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const ushort*") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->fromUtf16((const ushort*) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isRightToLeft
 *    flags:    c
 */
ZEND_METHOD(QString, isRightToLeft){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRightToLeft());
}

/*********************************
 *    class     QString */
/*
 *    function  setNum
 *    flags:    
 */
ZEND_METHOD(QString, setNum){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "short") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((short) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "ushort") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((ushort) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "ulong") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((ulong) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "qlonglong") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((qlonglong) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "qulonglong") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((qulonglong) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* ll */
		long var_ll_1;    // default: 
		long var_ll_2;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_1, &var_ll_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((int) var_ll_1 ,(int) var_ll_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* osl */
		zval* var_osl_0;   // default: 
		char* var_osl_1;   // default: 'g'
		int* len_osl_1;

		long var_osl_2;    // default: 6

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|l|", &var_osl_0, &var_1, &len_1, &var_osl_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "float") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((float) var_o_0, (char) var_osl_1, (int) var_osl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "double") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setNum((double) var_o_0, (char) var_osl_1, (int) var_osl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  endsWith
 *    flags:    c
 */
ZEND_METHOD(QString, endsWith){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->endsWith((const QString&) var_o_0, (Qt::CaseSensitivity) var_o_1));
			}			
			if(tmp_0 == "const QChar&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->endsWith((const QChar&) var_o_0, (Qt::CaseSensitivity) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  number
 *    flags:    s
 */
ZEND_METHOD(QString, number){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "ulong") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->number((ulong) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "qlonglong") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->number((qlonglong) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "qulonglong") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->number((qulonglong) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* ll */
		long var_ll_1;    // default: 
		long var_ll_2;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_1, &var_ll_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->number((int) var_ll_1 ,(int) var_ll_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* osl */
		zval* var_osl_0;   // default: 
		char* var_osl_1;   // default: 'g'
		int* len_osl_1;

		long var_osl_2;    // default: 6

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os|l|", &var_osl_0, &var_1, &len_1, &var_osl_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "double") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->number((double) var_o_0, (char) var_osl_1, (int) var_osl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  localeAwareCompare
 *    flags:    c
 */
ZEND_METHOD(QString, localeAwareCompare){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->localeAwareCompare((const QString&) var_o_0));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->localeAwareCompare((const QString&) var_o_0, (const QString&) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  section
 *    flags:    c
 */
ZEND_METHOD(QString, section){

	if (ZEND_NUM_ARGS() == 4){
		/* ollo */
		zval* var_ollo_0;   // default: 
		long var_ollo_1;    // default: 
		long var_ollo_2;    // default: -1
		zval* var_ollo_3;   // default: SectionDefault

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll|o|", &var_ollo_0, &var_ollo_1, &var_ollo_2, &var_ollo_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_3->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "SectionFlags") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->section((QChar) var_o_0, (int) var_ollo_1, (int) var_ollo_1, (SectionFlags) var_o_3);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "SectionFlags") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->section((const QString&) var_o_0, (int) var_ollo_1, (int) var_ollo_1, (SectionFlags) var_o_3);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QRegExp&" && tmp_1 == "SectionFlags") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->section((const QRegExp&) var_o_0, (int) var_ollo_1, (int) var_ollo_1, (SectionFlags) var_o_3);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isSimpleText
 *    flags:    c
 */
ZEND_METHOD(QString, isSimpleText){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSimpleText());
}

/*********************************
 *    class     QString */
/*
 *    function  size
 *    flags:    c
 */
ZEND_METHOD(QString, size){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->size());
}

/*********************************
 *    class     QString */
/*
 *    function  simplified
 *    flags:    c
 */
ZEND_METHOD(QString, simplified){
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->simplified();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  toUInt
 *    flags:    c
 */
ZEND_METHOD(QString, toUInt){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->toUInt((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUShort
 *    flags:    c
 */
ZEND_METHOD(QString, toUShort){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_USHORT(obj->toUShort((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  truncate
 *    flags:    
 */
ZEND_METHOD(QString, truncate){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			obj->truncate((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toAscii
 *    flags:    c
 */
ZEND_METHOD(QString, toAscii){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toAscii());
}

/*********************************
 *    class     QString */
/*
 *    function  length
 *    flags:    c
 */
ZEND_METHOD(QString, length){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->length());
}

/*********************************
 *    class     QString */
/*
 *    function  right
 *    flags:    c
 */
ZEND_METHOD(QString, right){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->right((int) var_l_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  push_front
 *    flags:    
 */
ZEND_METHOD(QString, push_front){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			obj->push_front((QChar) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			obj->push_front((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUtf8
 *    flags:    c
 */
ZEND_METHOD(QString, toUtf8){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toUtf8());
}

/*********************************
 *    class     QString */
/*
 *    function  toULongLong
 *    flags:    c
 */
ZEND_METHOD(QString, toULongLong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  indexOf
 *    flags:    c
 */
ZEND_METHOD(QString, indexOf){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->indexOf((const QRegExp&) var_o_0, (int) var_ol_1));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* olo */
		zval* var_olo_0;   // default: 
		long var_olo_1;    // default: 0
		zval* var_olo_2;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &var_olo_0, &var_olo_1, &var_olo_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_2->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->indexOf((QChar) var_o_0, (int) var_olo_1, (Qt::CaseSensitivity) var_o_2));
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->indexOf((const QString&) var_o_0, (int) var_olo_1, (Qt::CaseSensitivity) var_o_2));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromRawData
 *    flags:    s
 */
ZEND_METHOD(QString, fromRawData){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QChar*") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->fromRawData((const QChar*) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constEnd
 *    flags:    c
 */
ZEND_METHOD(QString, constEnd){
			QString *obj = (QString) PHP_QT_FETCH();
}

/*********************************
 *    class     QString */
/*
 *    function  left
 *    flags:    c
 */
ZEND_METHOD(QString, left){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->left((int) var_l_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromLocal8Bit
 *    flags:    s
 */
ZEND_METHOD(QString, fromLocal8Bit){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int* len_sl_0;

		long var_sl_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_0, &len_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->fromLocal8Bit( var_0 ,(int) var_sl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  startsWith
 *    flags:    c
 */
ZEND_METHOD(QString, startsWith){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->startsWith((const QString&) var_o_0, (Qt::CaseSensitivity) var_o_1));
			}			
			if(tmp_0 == "const QChar&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->startsWith((const QChar&) var_o_0, (Qt::CaseSensitivity) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  remove
 *    flags:    
 */
ZEND_METHOD(QString, remove){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->remove((const QRegExp&) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->remove((QChar) var_o_0, (Qt::CaseSensitivity) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->remove((const QString&) var_o_0, (Qt::CaseSensitivity) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* ll */
		long var_ll_2;    // default: 
		long var_ll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_2, &var_ll_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->remove((int) var_ll_2 ,(int) var_ll_3);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isEmpty
 *    flags:    c
 */
ZEND_METHOD(QString, isEmpty){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEmpty());
}

/*********************************
 *    class     QString */
/*
 *    function  arg
 *    flags:    c
 */
ZEND_METHOD(QString, arg){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((const QString&) var_o_0, (const QString&) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* slo */
		char* var_slo_0;   // default: 
		int* len_slo_0;

		long var_slo_1;    // default: 0
		zval* var_slo_2;   // default: QLatin1Char(' ')

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|o|", &var_0, &len_0, &var_slo_1, &var_slo_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((char) var_slo_0, (int) var_slo_0, (const QChar&) var_o_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* ooo */
		zval* var_ooo_1;   // default: 
		zval* var_ooo_2;   // default: 
		zval* var_ooo_3;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_ooo_1, &var_ooo_2, &var_ooo_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_1->metaObject()->className());
			QString tmp_1(var_o_2->metaObject()->className());
			QString tmp_2(var_o_3->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "const QString&" && tmp_2 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((const QString&) var_o_1, (const QString&) var_o_2, (const QString&) var_o_3);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* olo */
		zval* var_olo_3;   // default: 
		long var_olo_4;    // default: 0
		zval* var_olo_5;   // default: QLatin1Char(' ')

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &var_olo_3, &var_olo_4, &var_olo_5) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);

			QString tmp_0(var_o_3->metaObject()->className());
			QString tmp_1(var_o_5->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((QChar) var_o_3, (int) var_olo_1, (const QChar&) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((const QString&) var_o_3, (int) var_olo_1, (const QChar&) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* lllo */
		long var_lllo_0;    // default: 
		long var_lllo_1;    // default: 0
		long var_lllo_2;    // default: 10
		zval* var_lllo_3;   // default: QLatin1Char(' ')

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &var_lllo_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_3->metaObject()->className());
			
			if(tmp_0 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((int) var_lllo_0, (int) var_lllo_0, (int) var_lllo_0, (const QChar&) var_o_3);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* ollo */
		zval* var_ollo_1;   // default: 
		long var_ollo_2;    // default: 0
		long var_ollo_3;    // default: 10
		zval* var_ollo_4;   // default: QLatin1Char(' ')

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|o|", &var_ollo_1, &var_ollo_2, &var_ollo_3, &var_ollo_4) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);

			QString tmp_0(var_o_1->metaObject()->className());
			QString tmp_1(var_o_4->metaObject()->className());
			
			if(tmp_0 == "qlonglong" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((qlonglong) var_o_1, (int) var_ollo_1, (int) var_ollo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "qulonglong" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((qulonglong) var_o_1, (int) var_ollo_1, (int) var_ollo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "long" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((long) var_o_1, (int) var_ollo_1, (int) var_ollo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "ulong" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((ulong) var_o_1, (int) var_ollo_1, (int) var_ollo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "short" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((short) var_o_1, (int) var_ollo_1, (int) var_ollo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "ushort" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((ushort) var_o_1, (int) var_ollo_1, (int) var_ollo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* oooo */
		zval* var_oooo_2;   // default: 
		zval* var_oooo_3;   // default: 
		zval* var_oooo_4;   // default: 
		zval* var_oooo_5;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &var_oooo_2, &var_oooo_3, &var_oooo_4, &var_oooo_5) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);

			QString tmp_0(var_o_2->metaObject()->className());
			QString tmp_1(var_o_3->metaObject()->className());
			QString tmp_2(var_o_4->metaObject()->className());
			QString tmp_3(var_o_5->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "const QString&" && tmp_2 == "const QString&" && tmp_3 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((const QString&) var_o_2, (const QString&) var_o_3, (const QString&) var_o_4, (const QString&) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* olslo */
		zval* var_olslo_0;   // default: 
		long var_olslo_1;    // default: 0
		char* var_olslo_2;   // default: 'g'
		int* len_olslo_2;

		long var_olslo_3;    // default: -1
		zval* var_olslo_4;   // default: QLatin1Char(' ')

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|s|l|o|", &var_olslo_0, &var_olslo_1, &var_2, &len_2, &var_olslo_3, &var_olslo_4) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_4->metaObject()->className());
			
			if(tmp_0 == "double" && tmp_1 == "const QChar&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->arg((double) var_o_0, (int) var_olslo_1, (char) var_olslo_1, (int) var_olslo_1, (const QChar&) var_o_4);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  vsprintf
 *    flags:    
 */
ZEND_METHOD(QString, vsprintf){

	if (ZEND_NUM_ARGS() == 2){
		/* so */
		char* var_so_0;   // default: 
		int* len_so_0;

		zval* var_so_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_0, &len_0, &var_so_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "va_list") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->vsprintf((const char*) var_so_0, (va_list) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toFloat
 *    flags:    c
 */
ZEND_METHOD(QString, toFloat){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_FLOAT(obj->toFloat((bool*) var_b_0));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isDetached
 *    flags:    c
 */
ZEND_METHOD(QString, isDetached){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->isDetached());
}

/*********************************
 *    class     QString */
/*
 *    function  reserve
 *    flags:    
 */
ZEND_METHOD(QString, reserve){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			obj->reserve((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toULong
 *    flags:    c
 */
ZEND_METHOD(QString, toULong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_ULONG(obj->toULong((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toShort
 *    flags:    c
 */
ZEND_METHOD(QString, toShort){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_SHORT(obj->toShort((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  split
 *    flags:    c
 */
ZEND_METHOD(QString, split){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: KeepEmptyParts

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&" && tmp_1 == "SplitBehavior") {
				QString *obj = (QString) PHP_QT_FETCH();
			QStringList return_object = (QStringList) obj->split((const QRegExp&) var_o_0, (SplitBehavior) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* var_ooo_0;   // default: 
		zval* var_ooo_1;   // default: KeepEmptyParts
		zval* var_ooo_2;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|o|", &var_ooo_0, &var_ooo_1, &var_ooo_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			QString tmp_2(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QString&" && tmp_1 == "SplitBehavior" && tmp_2 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			QStringList return_object = (QStringList) obj->split((const QString&) var_o_0, (SplitBehavior) var_o_1, (Qt::CaseSensitivity) var_o_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setUnicode
 *    flags:    
 */
ZEND_METHOD(QString, setUnicode){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QChar*") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->setUnicode((const QChar*) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromLatin1
 *    flags:    s
 */
ZEND_METHOD(QString, fromLatin1){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int* len_sl_0;

		long var_sl_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_0, &len_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->fromLatin1( var_0 ,(int) var_sl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  data
 *    flags:    
 */
ZEND_METHOD(QString, data){
			QString *obj = (QString) PHP_QT_FETCH();
			QChar * return_object = (QChar *) obj->data();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  toLatin1
 *    flags:    c
 */
ZEND_METHOD(QString, toLatin1){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toLatin1());
}

/*********************************
 *    class     QString */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QString, end){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_INTPTR(obj->end());
}

/*********************************
 *    class     QString */
/*
 *    function  contains
 *    flags:    c
 */
ZEND_METHOD(QString, contains){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&") {
				QString *obj = (QString) PHP_QT_FETCH();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  resize
 *    flags:    
 */
ZEND_METHOD(QString, resize){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			obj->resize((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  replace
 *    flags:    
 */
ZEND_METHOD(QString, replace){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&" && tmp_1 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((const QRegExp&) var_o_0, (const QString&) var_o_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* var_ooo_0;   // default: 
		zval* var_ooo_1;   // default: 
		zval* var_ooo_2;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &var_ooo_0, &var_ooo_1, &var_ooo_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			QString tmp_2(var_o_2->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "QChar" && tmp_2 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((QChar) var_o_0, (QChar) var_o_1, (Qt::CaseSensitivity) var_o_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "QChar" && tmp_1 == "const QString&" && tmp_2 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((QChar) var_o_0, (const QString&) var_o_1, (Qt::CaseSensitivity) var_o_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "const QString&" && tmp_2 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((const QString&) var_o_0, (const QString&) var_o_1, (Qt::CaseSensitivity) var_o_2);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
		/* llo */
		long var_llo_3;    // default: 
		long var_llo_4;    // default: 
		zval* var_llo_5;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &var_llo_5) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);

			QString tmp_0(var_o_5->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((int) var_llo_0, (int) var_llo_0, (QChar) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((int) var_llo_0, (int) var_llo_0, (const QString&) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llol */
		long var_llol_0;    // default: 
		long var_llol_1;    // default: 
		zval* var_llol_2;   // default: 
		long var_llol_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_llol_0, &var_llol_1, &var_llol_2, &var_llol_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QChar*") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->replace((int) var_llol_0, (int) var_llol_0, (const QChar*) var_o_2, (int) var_llol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromUtf8
 *    flags:    s
 */
ZEND_METHOD(QString, fromUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int* len_sl_0;

		long var_sl_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_0, &len_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->fromUtf8( var_0 ,(int) var_sl_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLong
 *    flags:    c
 */
ZEND_METHOD(QString, toLong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->toLong((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  detach
 *    flags:    
 */
ZEND_METHOD(QString, detach){
			QString *obj = (QString) PHP_QT_FETCH();
			obj->detach();
			RETURN_NULL();
}

/*********************************
 *    class     QString */
/*
 *    function  append
 *    flags:    
 */
ZEND_METHOD(QString, append){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int* len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->append( var_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->append((QChar) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->append((const QString&) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QByteArray&") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->append((const QByteArray&) var_o_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  mid
 *    flags:    c
 */
ZEND_METHOD(QString, mid){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->mid((int) var_ll_0 ,(int) var_ll_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toDouble
 *    flags:    c
 */
ZEND_METHOD(QString, toDouble){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_DOUBLE(obj->toDouble((bool*) var_b_0));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fill
 *    flags:    
 */
ZEND_METHOD(QString, fill){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString & return_object = (QString &) obj->fill((QChar) var_o_0, (int) var_ol_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  rightJustified
 *    flags:    c
 */
ZEND_METHOD(QString, rightJustified){

	if (ZEND_NUM_ARGS() == 3){
		/* lob */
		long var_lob_0;    // default: 
		zval* var_lob_1;   // default: QLatin1Char(' ')
		bool* var_lob_2;   // _default: false

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &var_lob_1, &var_lob_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->rightJustified((int) var_lob_0, (QChar) var_o_1, (bool) var_lob_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLower
 *    flags:    c
 */
ZEND_METHOD(QString, toLower){
			QString *obj = (QString) PHP_QT_FETCH();
			QString return_object = (QString) obj->toLower();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  lastIndexOf
 *    flags:    c
 */
ZEND_METHOD(QString, lastIndexOf){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: -1

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRegExp&") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->lastIndexOf((const QRegExp&) var_o_0, (int) var_ol_1));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* olo */
		zval* var_olo_0;   // default: 
		long var_olo_1;    // default: -1
		zval* var_olo_2;   // default: Qt::CaseSensitive

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &var_olo_0, &var_olo_1, &var_olo_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_2->metaObject()->className());
			
			if(tmp_0 == "QChar" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->lastIndexOf((QChar) var_o_0, (int) var_olo_1, (Qt::CaseSensitivity) var_o_2));
			}			
			if(tmp_0 == "const QString&" && tmp_1 == "Qt::CaseSensitivity") {
				QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->lastIndexOf((const QString&) var_o_0, (int) var_olo_1, (Qt::CaseSensitivity) var_o_2));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  unicode
 *    flags:    c
 */
ZEND_METHOD(QString, unicode){
			QString *obj = (QString) PHP_QT_FETCH();
			const QChar * return_object = (const QChar *) obj->unicode();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QString_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QString */
/*
 *    function  at
 *    flags:    c
 */
ZEND_METHOD(QString, at){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  begin
 *    flags:    
 */
ZEND_METHOD(QString, begin){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_INTPTR(obj->begin());
}

/*********************************
 *    class     QString */
/*
 *    function  push_back
 *    flags:    
 */
ZEND_METHOD(QString, push_back){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QChar") {
				QString *obj = (QString) PHP_QT_FETCH();
			obj->push_back((QChar) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QString&") {
				QString *obj = (QString) PHP_QT_FETCH();
			obj->push_back((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  capacity
 *    flags:    c
 */
ZEND_METHOD(QString, capacity){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->capacity());
}

/*********************************
 *    class     QString */
/*
 *    function  constBegin
 *    flags:    c
 */
ZEND_METHOD(QString, constBegin){
			QString *obj = (QString) PHP_QT_FETCH();
}

/*********************************
 *    class     QString */
/*
 *    function  toLocal8Bit
 *    flags:    c
 */
ZEND_METHOD(QString, toLocal8Bit){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toLocal8Bit());
}

/*********************************
 *    class     QString */
/*
 *    function  toInt
 *    flags:    c
 */
ZEND_METHOD(QString, toInt){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool* var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_LONG(obj->toInt((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QString, isNull){
			QString *obj = (QString) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
}



ZEND_METHOD(QString,__construct){

	QString *QString_ptr = new QString();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* unicode QChar**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QChar* tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
		 /*long size int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*QChar c QChar*/
		if(Z_TYPE_P(param_0) == IS_) {
			QChar tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long size int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
		 /*QChar c QChar*/
		if(Z_TYPE_P(param_1) == IS_) {
			QChar tmp(Z_STRVAL_P(param_1));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* latin1 QLatin1String&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QLatin1String& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* arg1 QString&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*char*  ch char**/
		if(Z_TYPE_P(param_0) == IS_STRING) {
			char* tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*byte[] a QByteArray&*/
		if(Z_TYPE_P(param_0) == IS_ARRAY) {
			QByteArray& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* arg1 Null&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			Null& tmp(Z_STRVAL_P(param_0));
			QString_ptr = new QString(tmp);
		}
	}

	PHP_QT_REGISTER(QString_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QString);

