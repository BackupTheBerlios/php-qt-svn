/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDate.cpp - QDate PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*********************************
 *    class     QDate
 *    function  isNull
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QDate, isNull){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_BOOL(o->isNull());
	}
}


/*********************************
 *    class     QDate
 *    function  isValid
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QDate, isValid){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_BOOL(o->isValid());
	}
}


/*********************************
 *    class     QDate
 *    function  year
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, year){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->year());
	}
}


/*********************************
 *    class     QDate
 *    function  month
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, month){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->month());
	}
}


/*********************************
 *    class     QDate
 *    function  day
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, day){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->day());
	}
}


/*********************************
 *    class     QDate
 *    function  dayOfWeek
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, dayOfWeek){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->dayOfWeek());
	}
}


/*********************************
 *    class     QDate
 *    function  dayOfYear
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, dayOfYear){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->dayOfYear());
	}
}


/*********************************
 *    class     QDate
 *    function  daysInMonth
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, daysInMonth){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->daysInMonth());
	}
}


/*********************************
 *    class     QDate
 *    function  daysInYear
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, daysInYear){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->daysInYear());
	}
}


/*********************************
 *    class     QDate
 *    function  weekNumber
 *    flags:    c
 *
 *    @param   int*
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, weekNumber){
	if (ZEND_NUM_ARGS() == 1){
	// 0
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->weekNumber((int*) var_0));
	}
}


/*********************************
 *    class     QDate
 *    function  toString
 *    flags:    c
 *
 *    @param   Qt::DateFormat
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QDate, toString){
	if (ZEND_NUM_ARGS() == 1){
	// Qt::TextDate
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDate *o = (QDate*) PHP_QT_FETCH();
		QString obj = (QString) o->toString( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: toString
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDate *o = (QDate*) PHP_QT_FETCH();
		QString obj = (QString) o->toString( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  setYMD
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QDate, setYMD){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_BOOL(o->setYMD((int) var_0, (int) var_1, (int) var_2));
	}
}


/*********************************
 *    class     QDate
 *    function  addDays
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDate, addDays){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->addDays((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  addMonths
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDate, addMonths){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->addMonths((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  addYears
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDate, addYears){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->addYears((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  daysTo
 *    flags:    c
 *
 *    @param   const QDate&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, daysTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->daysTo( tmp_var_0));
	}
}


/*********************************
 *    class     QDate
 *    function  toJulianDay
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDate, toJulianDay){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->toJulianDay());
	}
}


/*********************************
 *    class     QDate
 *    function  shortMonthName
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QDate, shortMonthName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QString obj = (QString) o->shortMonthName((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  shortDayName
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QDate, shortDayName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QString obj = (QString) o->shortDayName((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  longMonthName
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QDate, longMonthName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QString obj = (QString) o->longMonthName((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  longDayName
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QDate, longDayName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QString obj = (QString) o->longDayName((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  currentDate
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDate, currentDate){
	if (ZEND_NUM_ARGS() == 0){
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->currentDate();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDate
 *    function  fromString
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   Qt::DateFormat
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDate, fromString){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::TextDate
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->fromString( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: fromString
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->fromString( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: isValid
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_BOOL(o->isValid((int) var_0, (int) var_1, (int) var_2));
	}
}


/*********************************
 *    class     QDate
 *    function  isLeapYear
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QDate, isLeapYear){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_BOOL(o->isLeapYear((int) var_0));
	}
}


/*********************************
 *    class     QDate
 *    function  gregorianToJulian
 *    flags:    s
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   uint
*********************************/
ZEND_METHOD(QDate, gregorianToJulian){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		RETURN_LONG(o->gregorianToJulian((int) var_0, (int) var_1, (int) var_2));
	}
}


/*********************************
 *    class     QDate
 *    function  julianToGregorian
 *    flags:    s
 *
 *    @param   uint
 *    @param   int&
 *    @param   int&
 *    @param   int&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDate, julianToGregorian){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		o->julianToGregorian((uint) var_0, (int&) var_1, (int&) var_2, (int&) var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QDate
 *    function  fromJulianDay
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDate, fromJulianDay){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDate *o = (QDate*) PHP_QT_FETCH();
		QDate obj = (QDate) o->fromJulianDay((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDate_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QDate,__construct){

	QDate *QDate_ptr = new QDate();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*long y int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QDate_ptr = new QDate(tmp);
		}
		 /*long m int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QDate_ptr = new QDate(tmp);
		}
		 /*long d int*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_2));
			QDate_ptr = new QDate(tmp);
		}
	}

	PHP_QT_REGISTER(QDate_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QDate);

