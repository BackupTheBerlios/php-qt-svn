/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QGridLayout.cpp - QGridLayout PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QGridLayout>


/*********************************
 *    class     QGridLayout */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QGridLayout, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int* len_ss_0;

		char* var_ss_1;   // default: 0
		int* len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_0, &len_0, &var_1, &len_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QString return_object = (QString) obj->tr( var_0 , var_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  addLayout
 *    flags:    
 */
ZEND_METHOD(QGridLayout, addLayout){

	if (ZEND_NUM_ARGS() == 4){
		/* ollo */
		zval* var_ollo_0;   // default: 
		long var_ollo_1;    // default: 
		long var_ollo_2;    // default: 
		zval* var_ollo_3;   // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo|", &var_ollo_0, &var_ollo_1, &var_ollo_2, &var_ollo_3) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_3->metaObject()->className());
			
			if(tmp_0 == "QLayout*" && tmp_1 == "Qt::Alignment") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->addLayout((QLayout*) var_o_0, (int) var_ollo_1, (int) var_ollo_1, (Qt::Alignment) var_o_3);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  QGridLayout
 *    flags:    
 */
ZEND_METHOD(QGridLayout, QGridLayout){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_~(obj->QGridLayout());
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QUObject*") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  addItem
 *    flags:    
 */
ZEND_METHOD(QGridLayout, addItem){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QLayoutItem*") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->addItem((QLayoutItem*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  rowMinimumHeight
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, rowMinimumHeight){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->rowMinimumHeight((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setOriginCorner
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setOriginCorner){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "Qt::Corner") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setOriginCorner((Qt::Corner) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int* len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->qt_cast( var_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QGridLayout, metaObject){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  count
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, count){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  originCorner
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, originCorner){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			Qt::Corner return_object = (Qt::Corner) obj->originCorner();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  invalidate
 *    flags:    
 */
ZEND_METHOD(QGridLayout, invalidate){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->invalidate();
			RETURN_NULL();
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setGeometry
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setGeometry){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRect&") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setGeometry((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QUObject*") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setRowStretch
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setRowStretch){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setRowStretch((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  getItemPosition
 *    flags:    
 */
ZEND_METHOD(QGridLayout, getItemPosition){

	if (ZEND_NUM_ARGS() == 5){
		/* lllll */
		long var_lllll_0;    // default: 
		long var_lllll_1;    // default: 
		long var_lllll_2;    // default: 
		long var_lllll_3;    // default: 
		long var_lllll_4;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll", &var_lllll_0, &var_lllll_1, &var_lllll_2, &var_lllll_3, &var_lllll_4) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->getItemPosition((int) var_lllll_0 ,(int*) var_lllll_1 ,(int*) var_lllll_2 ,(int*) var_lllll_3 ,(int*) var_lllll_4);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setDefaultPositioning
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setDefaultPositioning){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "Qt::Orientation") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setDefaultPositioning((int) var_lo_0, (Qt::Orientation) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QGridLayout, className){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  columnStretch
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, columnStretch){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->columnStretch((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  addWidget
 *    flags:    
 */
ZEND_METHOD(QGridLayout, addWidget){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QWidget*") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->addWidget((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* ollo */
		zval* var_ollo_0;   // default: 
		long var_ollo_1;    // default: 
		long var_ollo_2;    // default: 
		zval* var_ollo_3;   // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo|", &var_ollo_0, &var_ollo_1, &var_ollo_2, &var_ollo_3) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_3->metaObject()->className());
			
			if(tmp_0 == "QWidget*" && tmp_1 == "Qt::Alignment") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->addWidget((QWidget*) var_o_0, (int) var_ollo_1, (int) var_ollo_1, (Qt::Alignment) var_o_3);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  takeAt
 *    flags:    
 */
ZEND_METHOD(QGridLayout, takeAt){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QLayoutItem * return_object = (QLayoutItem *) obj->takeAt((int) var_l_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QGridLayout, staticMetaObject){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  itemAt
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, itemAt){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QLayoutItem * return_object = (QLayoutItem *) obj->itemAt((int) var_l_0);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QGridLayout, qObject){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  minimumSize
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, minimumSize){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSize();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, sizeHint){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeHint();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setColumnMinimumWidth
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setColumnMinimumWidth){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setColumnMinimumWidth((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  heightForWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, heightForWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->heightForWidth((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  hasHeightForWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, hasHeightForWidth){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasHeightForWidth());
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setColumnStretch
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setColumnStretch){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setColumnStretch((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  rowCount
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, rowCount){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->rowCount());
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  columnMinimumWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, columnMinimumWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->columnMinimumWidth((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  cellRect
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, cellRect){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->cellRect((int) var_ll_0 ,(int) var_ll_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  columnCount
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, columnCount){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->columnCount());
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setRowMinimumHeight
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setRowMinimumHeight){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			obj->setRowMinimumHeight((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QGridLayout, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int* len_ss_0;

		char* var_ss_1;   // default: 0
		int* len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_0, &len_0, &var_1, &len_1) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QString return_object = (QString) obj->trUtf8( var_0 , var_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  maximumSize
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, maximumSize){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->maximumSize();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &var_llo_2) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "QVariant*") {
				QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_0, (QVariant*) var_o_2));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  minimumHeightForWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, minimumHeightForWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->minimumHeightForWidth((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  expandingDirections
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, expandingDirections){
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QGridLayout_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  rowStretch
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, rowStretch){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();

			
			QGridLayout *obj = (QGridLayout) PHP_QT_FETCH();
			RETURN_LONG(obj->rowStretch((int) var_l_0));
		}
	}
}



ZEND_METHOD(QGridLayout,__construct){

	QGridLayout *QGridLayout_ptr = new QGridLayout();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QGridLayout_ptr = new QGridLayout(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	PHP_QT_REGISTER(QGridLayout_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QGridLayout);

