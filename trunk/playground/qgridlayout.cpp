/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QGridLayout.cpp - QGridLayout PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QGridLayout>



/*********************************
 *    class     QGridLayout
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QGridLayout, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QGridLayout
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QGridLayout, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QGridLayout
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QGridLayout, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QGridLayout
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QGridLayout, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QGridLayout
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QGridLayout, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QGridLayout
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QGridLayout, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QGridLayout
 *    function  QGridLayout
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QGridLayout, QGridLayout){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_~(o->QGridLayout());
	}
}


/*********************************
 *    class     QGridLayout
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QGridLayout, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  minimumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QGridLayout, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  maximumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QGridLayout, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->maximumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setRowStretch
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setRowStretch){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setRowStretch((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setColumnStretch
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setColumnStretch){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setColumnStretch((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  rowStretch
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, rowStretch){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->rowStretch((int) var_0));
	}
}


/*********************************
 *    class     QGridLayout
 *    function  columnStretch
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, columnStretch){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->columnStretch((int) var_0));
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setRowMinimumHeight
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setRowMinimumHeight){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setRowMinimumHeight((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setColumnMinimumWidth
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setColumnMinimumWidth){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setColumnMinimumWidth((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  rowMinimumHeight
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, rowMinimumHeight){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->rowMinimumHeight((int) var_0));
	}
}


/*********************************
 *    class     QGridLayout
 *    function  columnMinimumWidth
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, columnMinimumWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->columnMinimumWidth((int) var_0));
	}
}


/*********************************
 *    class     QGridLayout
 *    function  columnCount
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, columnCount){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->columnCount());
	}
}


/*********************************
 *    class     QGridLayout
 *    function  rowCount
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, rowCount){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->rowCount());
	}
}


/*********************************
 *    class     QGridLayout
 *    function  cellRect
 *    flags:    c
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QGridLayout, cellRect){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QRect obj = (QRect) o->cellRect((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  hasHeightForWidth
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QGridLayout, hasHeightForWidth){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasHeightForWidth());
	}
}


/*********************************
 *    class     QGridLayout
 *    function  heightForWidth
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, heightForWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->heightForWidth((int) var_0));
	}
}


/*********************************
 *    class     QGridLayout
 *    function  minimumHeightForWidth
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, minimumHeightForWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->minimumHeightForWidth((int) var_0));
	}
}


/*********************************
 *    class     QGridLayout
 *    function  expandingDirections
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientations
*********************************/
ZEND_METHOD(QGridLayout, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  invalidate
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, invalidate){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->invalidate();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  addWidget
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, addWidget){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addWidget( tmp_var_0);
		RETURN_NULL();
// marked for overloading: addWidget
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
	// 0
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addWidget( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		RETURN_NULL();
// marked for overloading: addWidget
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 0
		zval* var_5;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addWidget( tmp_var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  addLayout
 *    flags:    
 *
 *    @param   QLayout*
 *    @param   int
 *    @param   int
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, addLayout){
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
	// 0
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addLayout( tmp_var_0, (int) var_1, (int) var_2,  tmp_var_3);
		RETURN_NULL();
// marked for overloading: addLayout
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 0
		zval* var_5;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addLayout( tmp_var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setOriginCorner
 *    flags:    
 *
 *    @param   Qt::Corner
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setOriginCorner){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setOriginCorner( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  originCorner
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Corner
*********************************/
ZEND_METHOD(QGridLayout, originCorner){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		Qt::Corner obj = (Qt::Corner) o->originCorner();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  itemAt
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QLayoutItem *
*********************************/
ZEND_METHOD(QGridLayout, itemAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QLayoutItem * obj = (QLayoutItem *) o->itemAt((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  takeAt
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QLayoutItem *
*********************************/
ZEND_METHOD(QGridLayout, takeAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QLayoutItem * obj = (QLayoutItem *) o->takeAt((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  count
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QGridLayout, count){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->count());
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setGeometry
 *    flags:    
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setGeometry){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setGeometry( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  addItem
 *    flags:    
 *
 *    @param   QLayoutItem*
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, addItem){
	if (ZEND_NUM_ARGS() == 6){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
	// 1
		long var_3;
	// 1
		long var_4;
	// 0
		zval* var_5;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addItem( tmp_var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  setDefaultPositioning
 *    flags:    
 *
 *    @param   int
 *    @param   Qt::Orientation
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, setDefaultPositioning){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->setDefaultPositioning((int) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  getItemPosition
 *    flags:    
 *
 *    @param   int
 *    @param   int*
 *    @param   int*
 *    @param   int*
 *    @param   int*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QGridLayout, getItemPosition){
	if (ZEND_NUM_ARGS() == 5){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->getItemPosition((int) var_0, (int*) var_1, (int*) var_2, (int*) var_3, (int*) var_4);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QGridLayout
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QGridLayout, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QGridLayout, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QGridLayout
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QGridLayout, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QGridLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: addItem
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QGridLayout *o = (QGridLayout*) PHP_QT_FETCH();
		o->addItem( tmp_var_0);
		RETURN_NULL();

	}
}


ZEND_METHOD(QGridLayout,__construct){

	QGridLayout *QGridLayout_ptr = new QGridLayout();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QGridLayout_ptr = new QGridLayout(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	PHP_QT_REGISTER(QGridLayout_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QGridLayout);

