/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPushButton.cpp - QPushButton PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QPushButton>



/*********************************
 *    class     QPushButton
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QPushButton, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QPushButton
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QPushButton, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QPushButton
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QPushButton, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QPushButton
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPushButton, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QPushButton
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPushButton, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QPushButton
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPushButton, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QPushButton
 *    function  QPushButton
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QPushButton, QPushButton){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		RETURN_~(o->QPushButton());
	}
}


/*********************************
 *    class     QPushButton
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QPushButton, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPushButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPushButton
 *    function  autoDefault
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPushButton, autoDefault){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->autoDefault());
	}
}


/*********************************
 *    class     QPushButton
 *    function  setAutoDefault
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPushButton, setAutoDefault){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"autoDefault",strlen("autoDefault"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QPushButton
 *    function  isDefault
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPushButton, isDefault){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->isDefault());
	}
}


/*********************************
 *    class     QPushButton
 *    function  setDefault
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPushButton, setDefault){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"default",strlen("default"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QPushButton
 *    function  setMenu
 *    flags:    
 *
 *    @param   QMenu*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPushButton, setMenu){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		o->setMenu( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPushButton
 *    function  menu
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QMenu*
*********************************/
ZEND_METHOD(QPushButton, menu){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		QMenu* obj = (QMenu*) o->menu();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPushButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPushButton
 *    function  setFlat
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPushButton, setFlat){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"flat",strlen("flat"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QPushButton
 *    function  isFlat
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPushButton, isFlat){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->isFlat());
	}
}


/*********************************
 *    class     QPushButton
 *    function  showMenu
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QPushButton, showMenu){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		o->showMenu();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPushButton
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QPushButton, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPushButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPushButton
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QPushButton, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPushButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPushButton
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QPushButton, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPushButton *o = (QPushButton*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPushButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QPushButton,__construct){

	QPushButton *QPushButton_ptr = new QPushButton();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QPushButton_ptr = new QPushButton(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* text QString&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_0));
			QPushButton_ptr = new QPushButton(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QPushButton_ptr = new QPushButton(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*zval* icon QIcon&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QIcon& tmp(Z_STRVAL_P(param_0));
			QPushButton_ptr = new QPushButton(tmp);
		}
		 /*zval* text QString&*/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_1));
			QPushButton_ptr = new QPushButton(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_2));
			QPushButton_ptr = new QPushButton(tmp);
		}
	}

	PHP_QT_REGISTER(QPushButton_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QPushButton);

