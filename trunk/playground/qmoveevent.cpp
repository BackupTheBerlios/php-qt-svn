/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QMoveEvent.cpp - QMoveEvent PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QMoveEvent>


/*********************************
 *    class     QMoveEvent */
/*
 *    function  oldPos
 *    flags:    c
 */
ZEND_METHOD(QMoveEvent, oldPos){
			QMoveEvent *obj = (QMoveEvent) PHP_QT_FETCH();
			const QPoint & return_object = (const QPoint &) obj->oldPos();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QMoveEvent_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QMoveEvent */
/*
 *    function  pos
 *    flags:    c
 */
ZEND_METHOD(QMoveEvent, pos){
			QMoveEvent *obj = (QMoveEvent) PHP_QT_FETCH();
			const QPoint & return_object = (const QPoint &) obj->pos();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QMoveEvent_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}



ZEND_METHOD(QMoveEvent,__construct){

	QMoveEvent *QMoveEvent_ptr = new QMoveEvent();

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long pos QPoint&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_0));
			QMoveEvent_ptr = new QMoveEvent(tmp);
		}
		 /*long oldPos QPoint&*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_1));
			QMoveEvent_ptr = new QMoveEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QMoveEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QMoveEvent);

