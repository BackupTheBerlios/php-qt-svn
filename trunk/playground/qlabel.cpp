/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLabel.cpp - QLabel PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QLabel>


/*********************************
 *    class     QLabel */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QLabel, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int* len_ss_0;

		char* var_ss_1;   // default: 0
		int* len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_0, &len_0, &var_1, &len_1) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QString return_object = (QString) obj->tr( var_0 , var_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setMargin
 *    flags:    
 */
ZEND_METHOD(QLabel, setMargin){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setMargin((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  clear
 *    flags:    l
 */
ZEND_METHOD(QLabel, clear){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QUObject*") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setBuddy
 *    flags:    
 */
ZEND_METHOD(QLabel, setBuddy){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QWidget*") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setBuddy((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  movie
 *    flags:    c
 */
ZEND_METHOD(QLabel, movie){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QMovie * return_object = (QMovie *) obj->movie();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  hasScaledContents
 *    flags:    c
 */
ZEND_METHOD(QLabel, hasScaledContents){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasScaledContents());
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int* len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->qt_cast( var_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QLabel, metaObject){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  setScaledContents
 *    flags:    
 */
ZEND_METHOD(QLabel, setScaledContents){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setScaledContents((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QLabel, event){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QEvent*") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_BOOL(obj->event((QEvent*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  indent
 *    flags:    c
 */
ZEND_METHOD(QLabel, indent){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_LONG(obj->indent());
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QUObject*") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  pixmap
 *    flags:    c
 */
ZEND_METHOD(QLabel, pixmap){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			const QPixmap * return_object = (const QPixmap *) obj->pixmap();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  setAlignment
 *    flags:    
 */
ZEND_METHOD(QLabel, setAlignment){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "Qt::Alignment") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setAlignment((Qt::Alignment) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QLabel, className){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  buddy
 *    flags:    c
 */
ZEND_METHOD(QLabel, buddy){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->buddy();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  textFormat
 *    flags:    c
 */
ZEND_METHOD(QLabel, textFormat){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			Qt::TextFormat return_object = (Qt::TextFormat) obj->textFormat();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  setMovie
 *    flags:    l
 */
ZEND_METHOD(QLabel, setMovie){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "QMovie*") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setMovie((QMovie*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setPicture
 *    flags:    l
 */
ZEND_METHOD(QLabel, setPicture){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QPicture&") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setPicture((const QPicture&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setNum
 *    flags:    l
 */
ZEND_METHOD(QLabel, setNum){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setNum((int) var_l_0);
			RETURN_NULL();
		}
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "double") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setNum((double) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  wordWrap
 *    flags:    c
 */
ZEND_METHOD(QLabel, wordWrap){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_BOOL(obj->wordWrap());
}

/*********************************
 *    class     QLabel */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QLabel, staticMetaObject){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  setTextFormat
 *    flags:    
 */
ZEND_METHOD(QLabel, setTextFormat){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "Qt::TextFormat") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setTextFormat((Qt::TextFormat) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QLabel, qObject){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  setText
 *    flags:    l
 */
ZEND_METHOD(QLabel, setText){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QString&") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setText((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  text
 *    flags:    c
 */
ZEND_METHOD(QLabel, text){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QString return_object = (QString) obj->text();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  alignment
 *    flags:    c
 */
ZEND_METHOD(QLabel, alignment){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			Qt::Alignment return_object = (Qt::Alignment) obj->alignment();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QLabel, sizeHint){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeHint();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  minimumSizeHint
 *    flags:    c
 */
ZEND_METHOD(QLabel, minimumSizeHint){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSizeHint();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  heightForWidth
 *    flags:    c
 */
ZEND_METHOD(QLabel, heightForWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_LONG(obj->heightForWidth((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setPixmap
 *    flags:    l
 */
ZEND_METHOD(QLabel, setPixmap){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QPixmap&") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setPixmap((const QPixmap&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  picture
 *    flags:    c
 */
ZEND_METHOD(QLabel, picture){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			const QPicture * return_object = (const QPicture *) obj->picture();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QLabel */
/*
 *    function  setWordWrap
 *    flags:    
 */
ZEND_METHOD(QLabel, setWordWrap){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setWordWrap((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QLabel, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int* len_ss_0;

		char* var_ss_1;   // default: 0
		int* len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_0, &len_0, &var_1, &len_1) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			QString return_object = (QString) obj->trUtf8( var_0 , var_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QLabel_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &var_llo_2) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "QVariant*") {
				QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_0, (QVariant*) var_o_2));
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  QLabel
 *    flags:    
 */
ZEND_METHOD(QLabel, QLabel){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_~(obj->QLabel());
}

/*********************************
 *    class     QLabel */
/*
 *    function  setIndent
 *    flags:    
 */
ZEND_METHOD(QLabel, setIndent){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLabel *obj = (QLabel*) PHP_QT_FETCH();

			
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			obj->setIndent((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  margin
 *    flags:    c
 */
ZEND_METHOD(QLabel, margin){
			QLabel *obj = (QLabel) PHP_QT_FETCH();
			RETURN_LONG(obj->margin());
}



ZEND_METHOD(QLabel,__construct){

	QLabel *QLabel_ptr = new QLabel();

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QLabel_ptr = new QLabel(tmp);
		}
		 /*long f Qt::WFlags*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			Qt::WFlags tmp(Z_STRVAL_P(param_1));
			QLabel_ptr = new QLabel(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*zval* text QString&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_0));
			QLabel_ptr = new QLabel(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QLabel_ptr = new QLabel(tmp);
		}
		 /*long f Qt::WFlags*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			Qt::WFlags tmp(Z_STRVAL_P(param_2));
			QLabel_ptr = new QLabel(tmp);
		}
	}

	PHP_QT_REGISTER(QLabel_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QLabel);

