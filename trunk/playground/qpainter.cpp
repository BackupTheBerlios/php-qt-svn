/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPainter.cpp - QPainter PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*		public enumRenderHint:long {
			Antialiasing = 0x01,
			TextAntialiasing = 0x02,
			SmoothPixmapTransform = 0x04
		}
*/

/*		public enumCompositionMode:long {
			CompositionMode = 0,
			CompositionMode = 1,
			CompositionMode = 2,
			CompositionMode = 3,
			CompositionMode = 4,
			CompositionMode = 5,
			CompositionMode = 6,
			CompositionMode = 7,
			CompositionMode = 8,
			CompositionMode = 9,
			CompositionMode = 10,
			CompositionMode = 11
		}
*/

/*********************************
 *    class     QPainter
 *    function  QPainter
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QPainter, QPainter){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_~(o->QPainter());
	}
}


/*********************************
 *    class     QPainter
 *    function  device
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPaintDevice *
*********************************/
ZEND_METHOD(QPainter, device){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QPaintDevice * obj = (QPaintDevice *) o->device();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  begin
 *    flags:    
 *
 *    @param   QPaintDevice*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPainter, begin){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_BOOL(o->begin((QPaintDevice*) var_0));
	}
}


/*********************************
 *    class     QPainter
 *    function  end
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPainter, end){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_BOOL(o->end());
	}
}


/*********************************
 *    class     QPainter
 *    function  isActive
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPainter, isActive){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_BOOL(o->isActive());
	}
}


/*********************************
 *    class     QPainter
 *    function  initFrom
 *    flags:    
 *
 *    @param   const QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, initFrom){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->initFrom( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setCompositionMode
 *    flags:    
 *
 *    @param   CompositionMode
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setCompositionMode){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setCompositionMode( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  compositionMode
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   CompositionMode
*********************************/
ZEND_METHOD(QPainter, compositionMode){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QPainter
 *    function  font
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QFont &
*********************************/
ZEND_METHOD(QPainter, font){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		const QFont & obj = (const QFont &) o->font();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setFont
 *    flags:    
 *
 *    @param   const QFont&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setFont){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setFont( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  fontMetrics
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QFontMetrics
*********************************/
ZEND_METHOD(QPainter, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QFontMetrics obj = (QFontMetrics) o->fontMetrics();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  fontInfo
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QFontInfo
*********************************/
ZEND_METHOD(QPainter, fontInfo){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QFontInfo obj = (QFontInfo) o->fontInfo();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setPen
 *    flags:    
 *
 *    @param   const QColor&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setPen){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setPen( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setPen
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setPen( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setPen
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setPen( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  pen
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPen &
*********************************/
ZEND_METHOD(QPainter, pen){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		const QPen & obj = (const QPen &) o->pen();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setBrush
 *    flags:    
 *
 *    @param   const QBrush&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setBrush){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBrush( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setBrush
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBrush( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  brush
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QBrush &
*********************************/
ZEND_METHOD(QPainter, brush){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		const QBrush & obj = (const QBrush &) o->brush();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setBackgroundMode
 *    flags:    
 *
 *    @param   Qt::BGMode
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setBackgroundMode){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBackgroundMode( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  backgroundMode
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::BGMode
*********************************/
ZEND_METHOD(QPainter, backgroundMode){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		Qt::BGMode obj = (Qt::BGMode) o->backgroundMode();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  brushOrigin
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QPainter, brushOrigin){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_LONG(o->brushOrigin());
	}
}


/*********************************
 *    class     QPainter
 *    function  setBrushOrigin
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setBrushOrigin){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBrushOrigin((int) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: setBrushOrigin
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBrushOrigin((const QPoint&) var_0);
		RETURN_NULL();
// marked for overloading: setBrushOrigin
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBrushOrigin((const QPointF&) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setBackground
 *    flags:    
 *
 *    @param   const QBrush&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setBackground){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setBackground( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  background
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QBrush &
*********************************/
ZEND_METHOD(QPainter, background){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		const QBrush & obj = (const QBrush &) o->background();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  clipRegion
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRegion
*********************************/
ZEND_METHOD(QPainter, clipRegion){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QRegion obj = (QRegion) o->clipRegion();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  clipPath
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPainterPath
*********************************/
ZEND_METHOD(QPainter, clipPath){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QPainter
 *    function  setClipRect
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   Qt::ClipOperation
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setClipRect){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::ReplaceClip
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setClipRect( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: setClipRect
	}
	if (ZEND_NUM_ARGS() == 5){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// Qt::ReplaceClip
		zval* var_4;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setClipRect((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setClipRegion
 *    flags:    
 *
 *    @param   const QRegion&
 *    @param   Qt::ClipOperation
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setClipRegion){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::ReplaceClip
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setClipRegion( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setClipPath
 *    flags:    
 *
 *    @param   const QPainterPath&
 *    @param   Qt::ClipOperation
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setClipPath){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// Qt::ReplaceClip
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setClipPath((const QPainterPath&) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setClipping
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setClipping){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setClipping((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  hasClipping
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPainter, hasClipping){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasClipping());
	}
}


/*********************************
 *    class     QPainter
 *    function  save
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, save){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->save();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  restore
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, restore){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->restore();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setMatrix
 *    flags:    
 *
 *    @param   const QMatrix&
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setMatrix){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// false
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setMatrix( tmp_var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  matrix
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QMatrix &
*********************************/
ZEND_METHOD(QPainter, matrix){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		const QMatrix & obj = (const QMatrix &) o->matrix();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  deviceMatrix
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QMatrix &
*********************************/
ZEND_METHOD(QPainter, deviceMatrix){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		const QMatrix & obj = (const QMatrix &) o->deviceMatrix();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  resetMatrix
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, resetMatrix){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->resetMatrix();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setMatrixEnabled
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setMatrixEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setMatrixEnabled((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  matrixEnabled
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPainter, matrixEnabled){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_BOOL(o->matrixEnabled());
	}
}


/*********************************
 *    class     QPainter
 *    function  scale
 *    flags:    
 *
 *    @param   qreal
 *    @param   qreal
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, scale){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->scale( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  shear
 *    flags:    
 *
 *    @param   qreal
 *    @param   qreal
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, shear){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->shear( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  rotate
 *    flags:    
 *
 *    @param   qreal
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, rotate){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->rotate( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  translate
 *    flags:    
 *
 *    @param   const QPointF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, translate){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->translate((const QPointF&) var_0);
		RETURN_NULL();
// marked for overloading: translate
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->translate((const QPoint&) var_0);
		RETURN_NULL();
// marked for overloading: translate
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->translate( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  window
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QPainter, window){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QRect obj = (QRect) o->window();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setWindow
 *    flags:    
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setWindow){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setWindow( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setWindow
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setWindow((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  viewport
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QPainter, viewport){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QRect obj = (QRect) o->viewport();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setViewport
 *    flags:    
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setViewport){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setViewport( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setViewport
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setViewport((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setViewTransformEnabled
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setViewTransformEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setViewTransformEnabled((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  viewTransformEnabled
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QPainter, viewTransformEnabled){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		RETURN_BOOL(o->viewTransformEnabled());
	}
}


/*********************************
 *    class     QPainter
 *    function  strokePath
 *    flags:    
 *
 *    @param   const QPainterPath&
 *    @param   const QPen&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, strokePath){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->strokePath((const QPainterPath&) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  fillPath
 *    flags:    
 *
 *    @param   const QPainterPath&
 *    @param   const QBrush&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, fillPath){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->fillPath((const QPainterPath&) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPath
 *    flags:    
 *
 *    @param   const QPainterPath&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPath){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPath((const QPainterPath&) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPoint
 *    flags:    
 *
 *    @param   const QPointF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPoint){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoint((const QPointF&) var_0);
		RETURN_NULL();
// marked for overloading: drawPoint
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoint((const QPoint&) var_0);
		RETURN_NULL();
// marked for overloading: drawPoint
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoint((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPoints
 *    flags:    
 *
 *    @param   const QPointF*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPoints){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoints((const QPointF*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawPoints
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoints( tmp_var_0);
		RETURN_NULL();
// marked for overloading: drawPoints
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoints((const QPoint*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawPoints
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPoints( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawLine
 *    flags:    
 *
 *    @param   const QLineF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawLine){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLine( tmp_var_0);
		RETURN_NULL();
// marked for overloading: drawLine
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLine((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
// marked for overloading: drawLine
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLine((const QPoint&) var_0, (const QPoint&) var_1);
		RETURN_NULL();
// marked for overloading: drawLine
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLine((const QPointF&) var_0, (const QPointF&) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawLines
 *    flags:    
 *
 *    @param   const QLineF*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawLines){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLines( tmp_var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawLines
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLines((const QPointF*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawLines
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLines( tmp_var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawLines
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawLines((const QPoint*) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawRect
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawRect){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRect( tmp_var_0);
		RETURN_NULL();
// marked for overloading: drawRect
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRect((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
// marked for overloading: drawRect
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRect( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawRects
 *    flags:    
 *
 *    @param   const QRectF*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawRects){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRects( tmp_var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawEllipse
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawEllipse){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawEllipse( tmp_var_0);
		RETURN_NULL();
// marked for overloading: drawEllipse
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawEllipse((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPolyline
 *    flags:    
 *
 *    @param   const QPointF*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPolyline){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolyline((const QPointF*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawPolyline
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolyline( tmp_var_0);
		RETURN_NULL();
// marked for overloading: drawPolyline
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolyline((const QPoint*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawPolyline
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolyline( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPolygon
 *    flags:    
 *
 *    @param   const QPointF*
 *    @param   int
 *    @param   Qt::FillRule
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPolygon){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// Qt::OddEvenFill
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolygon((const QPointF*) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPolygon
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::OddEvenFill
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolygon( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawPolygon
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// Qt::OddEvenFill
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolygon((const QPoint*) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPolygon
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::OddEvenFill
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPolygon( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawConvexPolygon
 *    flags:    
 *
 *    @param   const QPointF*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawConvexPolygon){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawConvexPolygon((const QPointF*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawConvexPolygon
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawConvexPolygon( tmp_var_0);
		RETURN_NULL();
// marked for overloading: drawConvexPolygon
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawConvexPolygon((const QPoint*) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: drawConvexPolygon
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawConvexPolygon( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawArc
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawArc){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawArc( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
// marked for overloading: drawArc
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawArc( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
// marked for overloading: drawArc
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 
		long var_5;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawArc((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPie
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPie){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPie( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
// marked for overloading: drawPie
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 
		long var_5;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPie((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
		RETURN_NULL();
// marked for overloading: drawPie
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPie( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawChord
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawChord){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawChord( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
// marked for overloading: drawChord
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 
		long var_5;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawChord((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
		RETURN_NULL();
// marked for overloading: drawChord
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawChord( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawRoundRect
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawRoundRect){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 25
		long var_1;
	// 25
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRoundRect( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
// marked for overloading: drawRoundRect
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 25
		long var_4;
	// 25
		long var_5;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRoundRect((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4, (int) var_5);
		RETURN_NULL();
// marked for overloading: drawRoundRect
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 25
		long var_1;
	// 25
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawRoundRect( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawTiledPixmap
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   const QPixmap&
 *    @param   const QPointF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawTiledPixmap){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// QPointF()
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawTiledPixmap( tmp_var_0,  tmp_var_1, (const QPointF&) var_2);
		RETURN_NULL();
// marked for overloading: drawTiledPixmap
	}
	if (ZEND_NUM_ARGS() == 7){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		zval* var_4;

	// 0
		long var_5;
	// 0
		long var_6;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllloll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawTiledPixmap((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4, (int) var_5, (int) var_6);
		RETURN_NULL();
// marked for overloading: drawTiledPixmap
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// QPoint()
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawTiledPixmap( tmp_var_0,  tmp_var_1, (const QPoint&) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPicture
 *    flags:    
 *
 *    @param   const QPointF&
 *    @param   const QPicture&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPicture){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPicture((const QPointF&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawPicture
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPicture((int) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPicture
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPicture((const QPoint&) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawPixmap
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   const QPixmap&
 *    @param   const QRectF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawPixmap){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap( tmp_var_0,  tmp_var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 9){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		zval* var_4;

	// 
		long var_5;
	// 
		long var_6;
	// 
		long var_7;
	// 
		long var_8;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllollll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6, &var_7, &var_8) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4, (int) var_5, (int) var_6, (int) var_7, (int) var_8);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 7){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

	// 
		long var_3;
	// 
		long var_4;
	// 
		long var_5;
	// 
		long var_6;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llollll", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((int) var_0, (int) var_1,  tmp_var_2, (int) var_3, (int) var_4, (int) var_5, (int) var_6);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		zval* var_1;

	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((const QPointF&) var_0,  tmp_var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		zval* var_1;

	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((const QPoint&) var_0,  tmp_var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((const QPointF&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((const QPoint&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((int) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawPixmap
	}
	if (ZEND_NUM_ARGS() == 5){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		zval* var_4;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawPixmap((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawImage
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   const QImage&
 *    @param   const QRectF&
 *    @param   Qt::ImageConversionFlags
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawImage){
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// 
		zval* var_2;

	// Qt::AutoColor
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage( tmp_var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
		RETURN_NULL();
// marked for overloading: drawImage
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		zval* var_1;

	// 
		zval* var_2;

	// Qt::AutoColor
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage((const QPointF&) var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
		RETURN_NULL();
// marked for overloading: drawImage
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		zval* var_1;

	// 
		zval* var_2;

	// Qt::AutoColor
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage((const QPoint&) var_0,  tmp_var_1,  tmp_var_2,  tmp_var_3);
		RETURN_NULL();
// marked for overloading: drawImage
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawImage
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage((const QPointF&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawImage
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage((const QPoint&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawImage
	}
	if (ZEND_NUM_ARGS() == 8){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

	// 0
		long var_3;
	// 0
		long var_4;
	// -1
		long var_5;
	// -1
		long var_6;
	// Qt::AutoColor
		zval* var_7;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llollllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6, &var_7) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_7 = (QObject*) php_qt_fetch(var_7);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawImage((int) var_0, (int) var_1,  tmp_var_2, (int) var_3, (int) var_4, (int) var_5, (int) var_6,  tmp_var_7);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setLayoutDirection
 *    flags:    
 *
 *    @param   Qt::LayoutDirection
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setLayoutDirection){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setLayoutDirection( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  layoutDirection
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::LayoutDirection
*********************************/
ZEND_METHOD(QPainter, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		Qt::LayoutDirection obj = (Qt::LayoutDirection) o->layoutDirection();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  drawText
 *    flags:    
 *
 *    @param   const QPointF&
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawText){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawText((const QPointF&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawText
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawText((const QPoint&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawText
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawText((int) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawText
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		zval* var_2;

	// 0
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oloo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawText( tmp_var_0, (int) var_1,  tmp_var_2,  tmp_var_3);
		RETURN_NULL();
// marked for overloading: drawText
	}
	if (ZEND_NUM_ARGS() == 7){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 
		zval* var_5;

	// 0
		zval* var_6;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllloo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5, &var_6) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
		QObject* tmp_var_6 = (QObject*) php_qt_fetch(var_6);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawText((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5,  tmp_var_6);
		RETURN_NULL();
// marked for overloading: drawText
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// QTextOption()
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawText( tmp_var_0,  tmp_var_1,  tmp_var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  boundingRect
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   int
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   QRectF
*********************************/
ZEND_METHOD(QPainter, boundingRect){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
// marked for overloading: boundingRect
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QRect obj = (QRect) o->boundingRect( tmp_var_0, (int) var_1,  tmp_var_2);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: boundingRect
	}
	if (ZEND_NUM_ARGS() == 6){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		long var_4;
	// 
		zval* var_5;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllllo", &var_0, &var_1, &var_2, &var_3, &var_4, &var_5) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_5 = (QObject*) php_qt_fetch(var_5);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QRect obj = (QRect) o->boundingRect((int) var_0, (int) var_1, (int) var_2, (int) var_3, (int) var_4,  tmp_var_5);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: boundingRect
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 
		zval* var_1;

	// QTextOption()
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QPainter
 *    function  drawTextItem
 *    flags:    
 *
 *    @param   const QPointF&
 *    @param   const QTextItem&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, drawTextItem){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawTextItem((const QPointF&) var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: drawTextItem
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawTextItem((int) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
// marked for overloading: drawTextItem
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->drawTextItem((const QPoint&) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  fillRect
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   const QBrush&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, fillRect){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->fillRect( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
// marked for overloading: fillRect
	}
	if (ZEND_NUM_ARGS() == 5){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
	// 
		zval* var_4;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_0, &var_1, &var_2, &var_3, &var_4) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->fillRect((int) var_0, (int) var_1, (int) var_2, (int) var_3,  tmp_var_4);
		RETURN_NULL();
// marked for overloading: fillRect
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->fillRect( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  eraseRect
 *    flags:    
 *
 *    @param   const QRectF&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, eraseRect){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->eraseRect( tmp_var_0);
		RETURN_NULL();
// marked for overloading: eraseRect
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->eraseRect((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
// marked for overloading: eraseRect
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->eraseRect( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  setRenderHint
 *    flags:    
 *
 *    @param   RenderHint
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setRenderHint){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// true
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setRenderHint((RenderHint) var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  renderHints
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   RenderHints
*********************************/
ZEND_METHOD(QPainter, renderHints){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QPainter
 *    function  paintEngine
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPaintEngine *
*********************************/
ZEND_METHOD(QPainter, paintEngine){
	if (ZEND_NUM_ARGS() == 0){
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QPaintEngine * obj = (QPaintEngine *) o->paintEngine();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  setRedirected
 *    flags:    s
 *
 *    @param   const QPaintDevice*
 *    @param   QPaintDevice*
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, setRedirected){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// QPoint()
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->setRedirected((const QPaintDevice*) var_0, (QPaintDevice*) var_1, (const QPoint&) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QPainter
 *    function  redirected
 *    flags:    s
 *
 *    @param   const QPaintDevice*
 *    @param   QPoint*
 *    @param   -

 *    @access   public
 *    @return   QPaintDevice *
*********************************/
ZEND_METHOD(QPainter, redirected){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 0
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		QPaintDevice * obj = (QPaintDevice *) o->redirected((const QPaintDevice*) var_0, (QPoint*) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QPainter_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QPainter
 *    function  restoreRedirected
 *    flags:    s
 *
 *    @param   const QPaintDevice*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QPainter, restoreRedirected){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QPainter *o = (QPainter*) PHP_QT_FETCH();
		o->restoreRedirected((const QPaintDevice*) var_0);
		RETURN_NULL();

	}
}


ZEND_METHOD(QPainter,__construct){

	QPainter *QPainter_ptr = new QPainter();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*long arg1 QPaintDevice**/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			QPaintDevice* tmp(Z_STRVAL_P(param_0));
			QPainter_ptr = new QPainter(tmp);
		}
	}

	PHP_QT_REGISTER(QPainter_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QPainter);

