/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPainter.cpp - QPainter PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*		public enumRenderHint:long {
			Antialiasing = 0x01,
			TextAntialiasing = 0x02,
			SmoothPixmapTransform = 0x04
		}
*/

/*		public enumCompositionMode:long {
			CompositionMode = 0,
			CompositionMode = 1,
			CompositionMode = 2,
			CompositionMode = 3,
			CompositionMode = 4,
			CompositionMode = 5,
			CompositionMode = 6,
			CompositionMode = 7,
			CompositionMode = 8,
			CompositionMode = 9,
			CompositionMode = 10,
			CompositionMode = 11
		}
*/
/*********************************
 *    class     QPainter */
/*
 *    function  eraseRect
 *    flags:    
 */
ZEND_METHOD(QPainter, eraseRect){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->eraseRect((const QRectF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->eraseRect((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->eraseRect((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipPath
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipPath){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: Qt::ReplaceClip

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|", &var_lo_0, &var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "Qt::ClipOperation") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setClipPath((const QPainterPath&) var_lo_0, (Qt::ClipOperation) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  matrixEnabled
 *    flags:    c
 */
ZEND_METHOD(QPainter, matrixEnabled){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_BOOL(obj->matrixEnabled());
}

/*********************************
 *    class     QPainter */
/*
 *    function  shear
 *    flags:    
 */
ZEND_METHOD(QPainter, shear){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "qreal" && tmp_1 == "qreal") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->shear((qreal) var_o_0, (qreal) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  save
 *    flags:    
 */
ZEND_METHOD(QPainter, save){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->save();
			RETURN_NULL();
}

/*********************************
 *    class     QPainter */
/*
 *    function  resetMatrix
 *    flags:    
 */
ZEND_METHOD(QPainter, resetMatrix){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->resetMatrix();
			RETURN_NULL();
}

/*********************************
 *    class     QPainter */
/*
 *    function  initFrom
 *    flags:    
 */
ZEND_METHOD(QPainter, initFrom){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QWidget*") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->initFrom((const QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fontInfo
 *    flags:    c
 */
ZEND_METHOD(QPainter, fontInfo){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QFontInfo return_object = (QFontInfo) obj->fontInfo();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  setLayoutDirection
 *    flags:    
 */
ZEND_METHOD(QPainter, setLayoutDirection){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "Qt::LayoutDirection") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setLayoutDirection((Qt::LayoutDirection) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBrushOrigin
 *    flags:    
 */
ZEND_METHOD(QPainter, setBrushOrigin){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setBrushOrigin((const QPoint&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setBrushOrigin((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  pen
 *    flags:    c
 */
ZEND_METHOD(QPainter, pen){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			const QPen & return_object = (const QPen &) obj->pen();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRects
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRects){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF*") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawRects((const QRectF*) var_o_0, (int) var_ol_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPath
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPath){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPath((const QPainterPath&) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fillPath
 *    flags:    
 */
ZEND_METHOD(QPainter, fillPath){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QBrush&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->fillPath((const QPainterPath&) var_lo_0, (const QBrush&) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  rotate
 *    flags:    
 */
ZEND_METHOD(QPainter, rotate){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "qreal") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->rotate((qreal) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPie
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPie){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* var_oll_0;   // default: 
		long var_oll_1;    // default: 
		long var_oll_2;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPie((const QRectF&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPie((const QRect&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  translate
 *    flags:    
 */
ZEND_METHOD(QPainter, translate){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->translate((const QPointF&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "qreal" && tmp_1 == "qreal") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->translate((qreal) var_o_0, (qreal) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setCompositionMode
 *    flags:    
 */
ZEND_METHOD(QPainter, setCompositionMode){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "CompositionMode") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setCompositionMode((CompositionMode) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setWindow
 *    flags:    
 */
ZEND_METHOD(QPainter, setWindow){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setWindow((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setWindow((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fontMetrics
 *    flags:    c
 */
ZEND_METHOD(QPainter, fontMetrics){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QFontMetrics return_object = (QFontMetrics) obj->fontMetrics();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPixmap
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPixmap){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRect&" && tmp_1 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((const QRect&) var_o_0, (const QPixmap&) var_o_1);
			RETURN_NULL();
			}
		}
		/* lo */
		long var_lo_2;    // default: 
		zval* var_lo_3;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &var_lo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_3->metaObject()->className());
			
			if(tmp_0 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((const QPointF&) var_lo_0, (const QPixmap&) var_o_3);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((const QPoint&) var_lo_0, (const QPixmap&) var_o_3);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* loo */
		long var_loo_0;    // default: 
		zval* var_loo_1;   // default: 
		zval* var_loo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_loo_0, &var_loo_1, &var_loo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_1->metaObject()->className());
			QString tmp_1(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QPixmap&" && tmp_1 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((const QPointF&) var_loo_0, (const QPixmap&) var_o_1, (const QRectF&) var_o_2);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPixmap&" && tmp_1 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((const QPoint&) var_loo_0, (const QPixmap&) var_o_1, (const QRect&) var_o_2);
			RETURN_NULL();
			}
		}
		/* ooo */
		zval* var_ooo_2;   // default: 
		zval* var_ooo_3;   // default: 
		zval* var_ooo_4;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &var_ooo_2, &var_ooo_3, &var_ooo_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);

			QString tmp_0(var_o_2->metaObject()->className());
			QString tmp_1(var_o_3->metaObject()->className());
			QString tmp_2(var_o_4->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QPixmap&" && tmp_2 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((const QRectF&) var_o_2, (const QPixmap&) var_o_3, (const QRectF&) var_o_4);
			RETURN_NULL();
			}
		}
		/* llo */
		long var_llo_3;    // default: 
		long var_llo_4;    // default: 
		zval* var_llo_5;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &var_llo_5) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);

			QString tmp_0(var_o_5->metaObject()->className());
			
			if(tmp_0 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((int) var_llo_0, (int) var_llo_0, (const QPixmap&) var_o_5);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* llllo */
		long var_llllo_0;    // default: 
		long var_llllo_1;    // default: 
		long var_llllo_2;    // default: 
		long var_llllo_3;    // default: 
		zval* var_llllo_4;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &var_llllo_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);

			QString tmp_0(var_o_4->metaObject()->className());
			
			if(tmp_0 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPixmap((int) var_llllo_0, (int) var_llllo_0, (int) var_llllo_0, (int) var_llllo_0, (const QPixmap&) var_o_4);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPolyline
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPolyline){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QPolygonF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolyline((const QPolygonF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPolygon&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolyline((const QPolygon&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolyline((const QPointF*) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  deviceMatrix
 *    flags:    c
 */
ZEND_METHOD(QPainter, deviceMatrix){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			const QMatrix & return_object = (const QMatrix &) obj->deviceMatrix();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawLine
 *    flags:    
 */
ZEND_METHOD(QPainter, drawLine){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QLineF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawLine((const QLineF&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawLine((const QPoint&) var_ll_0 ,(const QPoint&) var_ll_1);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawLine((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fillRect
 *    flags:    
 */
ZEND_METHOD(QPainter, fillRect){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QBrush&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->fillRect((const QRectF&) var_o_0, (const QBrush&) var_o_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&" && tmp_1 == "const QBrush&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->fillRect((const QRect&) var_o_0, (const QBrush&) var_o_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* llllo */
		long var_llllo_0;    // default: 
		long var_llllo_1;    // default: 
		long var_llllo_2;    // default: 
		long var_llllo_3;    // default: 
		zval* var_llllo_4;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &var_llllo_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);

			QString tmp_0(var_o_4->metaObject()->className());
			
			if(tmp_0 == "const QBrush&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->fillRect((int) var_llllo_0, (int) var_llllo_0, (int) var_llllo_0, (int) var_llllo_0, (const QBrush&) var_o_4);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  boundingRect
 *    flags:    
 */
ZEND_METHOD(QPainter, boundingRect){

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* var_ooo_0;   // default: 
		zval* var_ooo_1;   // default: 
		zval* var_ooo_2;   // default: QTextOption()

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &var_ooo_0, &var_ooo_1, &var_ooo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			QString tmp_2(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QString&" && tmp_2 == "const QTextOption&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			}
		}
		/* olo */
		zval* var_olo_3;   // default: 
		long var_olo_4;    // default: 
		zval* var_olo_5;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_olo_3, &var_olo_4, &var_olo_5) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);

			QString tmp_0(var_o_3->metaObject()->className());
			QString tmp_1(var_o_5->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QString&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->boundingRect((const QRectF&) var_o_3, (int) var_olo_1, (const QString&) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}			
			if(tmp_0 == "const QRect&" && tmp_1 == "const QString&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->boundingRect((const QRect&) var_o_3, (int) var_olo_1, (const QString&) var_o_5);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipRect
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipRect){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::ReplaceClip

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "Qt::ClipOperation") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setClipRect((const QRectF&) var_o_0, (Qt::ClipOperation) var_o_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* llllo */
		long var_llllo_0;    // default: 
		long var_llllo_1;    // default: 
		long var_llllo_2;    // default: 
		long var_llllo_3;    // default: 
		zval* var_llllo_4;   // default: Qt::ReplaceClip

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo|", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &var_llllo_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);

			QString tmp_0(var_o_4->metaObject()->className());
			
			if(tmp_0 == "Qt::ClipOperation") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setClipRect((int) var_llllo_0, (int) var_llllo_0, (int) var_llllo_0, (int) var_llllo_0, (Qt::ClipOperation) var_o_4);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawImage
 *    flags:    
 */
ZEND_METHOD(QPainter, drawImage){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QImage&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawImage((const QRectF&) var_o_0, (const QImage&) var_o_1);
			RETURN_NULL();
			}
		}
		/* lo */
		long var_lo_2;    // default: 
		zval* var_lo_3;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &var_lo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_3->metaObject()->className());
			
			if(tmp_0 == "const QImage&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawImage((const QPointF&) var_lo_0, (const QImage&) var_o_3);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QImage&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawImage((const QPoint&) var_lo_0, (const QImage&) var_o_3);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* looo */
		long var_looo_0;    // default: 
		zval* var_looo_1;   // default: 
		zval* var_looo_2;   // default: 
		zval* var_looo_3;   // default: Qt::AutoColor

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"looo|", &var_looo_0, &var_looo_1, &var_looo_2, &var_looo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_1->metaObject()->className());
			QString tmp_1(var_o_2->metaObject()->className());
			QString tmp_2(var_o_3->metaObject()->className());
			
			if(tmp_0 == "const QImage&" && tmp_1 == "const QRectF&" && tmp_2 == "Qt::ImageConversionFlags") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawImage((const QPointF&) var_looo_0, (const QImage&) var_o_1, (const QRectF&) var_o_2, (Qt::ImageConversionFlags) var_o_3);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QImage&" && tmp_1 == "const QRect&" && tmp_2 == "Qt::ImageConversionFlags") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawImage((const QPoint&) var_looo_0, (const QImage&) var_o_1, (const QRect&) var_o_2, (Qt::ImageConversionFlags) var_o_3);
			RETURN_NULL();
			}
		}
		/* oooo */
		zval* var_oooo_3;   // default: 
		zval* var_oooo_4;   // default: 
		zval* var_oooo_5;   // default: 
		zval* var_oooo_6;   // default: Qt::AutoColor

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo|", &var_oooo_3, &var_oooo_4, &var_oooo_5, &var_oooo_6) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);
			QObject* var_o_4 = (QObject*) php_qt_fetch(var_o_4);
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);
			QObject* var_o_6 = (QObject*) php_qt_fetch(var_o_6);

			QString tmp_0(var_o_3->metaObject()->className());
			QString tmp_1(var_o_4->metaObject()->className());
			QString tmp_2(var_o_5->metaObject()->className());
			QString tmp_3(var_o_6->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QImage&" && tmp_2 == "const QRectF&" && tmp_3 == "Qt::ImageConversionFlags") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawImage((const QRectF&) var_o_3, (const QImage&) var_o_4, (const QRectF&) var_o_5, (Qt::ImageConversionFlags) var_o_6);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawTiledPixmap
 *    flags:    
 */
ZEND_METHOD(QPainter, drawTiledPixmap){

	if (ZEND_NUM_ARGS() == 3){
		/* ool */
		zval* var_ool_0;   // default: 
		zval* var_ool_1;   // default: 
		long var_ool_2;    // default: QPointF()

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &var_ool_0, &var_ool_1, &var_ool_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawTiledPixmap((const QRectF&) var_o_0, (const QPixmap&) var_o_1, (const QPointF&) var_ool_2);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&" && tmp_1 == "const QPixmap&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawTiledPixmap((const QRect&) var_o_0, (const QPixmap&) var_o_1, (const QPoint&) var_ool_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  layoutDirection
 *    flags:    c
 */
ZEND_METHOD(QPainter, layoutDirection){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			Qt::LayoutDirection return_object = (Qt::LayoutDirection) obj->layoutDirection();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  background
 *    flags:    c
 */
ZEND_METHOD(QPainter, background){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			const QBrush & return_object = (const QBrush &) obj->background();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPolygon
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPolygon){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::OddEvenFill

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QPolygonF&" && tmp_1 == "Qt::FillRule") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolygon((const QPolygonF&) var_o_0, (Qt::FillRule) var_o_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPolygon&" && tmp_1 == "Qt::FillRule") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolygon((const QPolygon&) var_o_0, (Qt::FillRule) var_o_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* var_llo_2;   // default: Qt::OddEvenFill

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo|", &var_llo_0, &var_llo_1, &var_llo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "Qt::FillRule") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolygon((const QPointF*) var_llo_0, (int) var_llo_0, (Qt::FillRule) var_o_2);
			RETURN_NULL();
			}			
			if(tmp_0 == "Qt::FillRule") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPolygon((const QPoint*) var_llo_0, (int) var_llo_0, (Qt::FillRule) var_o_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  device
 *    flags:    c
 */
ZEND_METHOD(QPainter, device){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QPaintDevice * return_object = (QPaintDevice *) obj->device();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipRegion
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipRegion){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: Qt::ReplaceClip

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QRegion&" && tmp_1 == "Qt::ClipOperation") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setClipRegion((const QRegion&) var_o_0, (Qt::ClipOperation) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  restoreRedirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, restoreRedirected){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->restoreRedirected((const QPaintDevice*) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setMatrixEnabled
 *    flags:    
 */
ZEND_METHOD(QPainter, setMatrixEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setMatrixEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPoints
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPoints){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QPolygonF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPoints((const QPolygonF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPolygon&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPoints((const QPolygon&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPoints((const QPointF*) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRoundRect
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRoundRect){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* var_oll_0;   // default: 
		long var_oll_1;    // default: 25
		long var_oll_2;    // default: 25

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawRoundRect((const QRectF&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawRoundRect((const QRect&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawConvexPolygon
 *    flags:    
 */
ZEND_METHOD(QPainter, drawConvexPolygon){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QPolygonF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawConvexPolygon((const QPolygonF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPolygon&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawConvexPolygon((const QPolygon&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawConvexPolygon((const QPointF*) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setMatrix
 *    flags:    
 */
ZEND_METHOD(QPainter, setMatrix){

	if (ZEND_NUM_ARGS() == 2){
		/* ob */
		zval* var_ob_0;   // default: 
		bool* var_ob_1;   // _default: false

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob|", &var_ob_0, &var_ob_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QMatrix&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setMatrix((const QMatrix&) var_o_0, (bool) var_ob_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPicture
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPicture){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QPicture&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPicture((const QPointF&) var_lo_0, (const QPicture&) var_o_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPicture&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPicture((const QPoint&) var_lo_0, (const QPicture&) var_o_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &var_llo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QPicture&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPicture((int) var_llo_0, (int) var_llo_0, (const QPicture&) var_o_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  restore
 *    flags:    
 */
ZEND_METHOD(QPainter, restore){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->restore();
			RETURN_NULL();
}

/*********************************
 *    class     QPainter */
/*
 *    function  font
 *    flags:    c
 */
ZEND_METHOD(QPainter, font){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			const QFont & return_object = (const QFont &) obj->font();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  matrix
 *    flags:    c
 */
ZEND_METHOD(QPainter, matrix){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			const QMatrix & return_object = (const QMatrix &) obj->matrix();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  viewport
 *    flags:    c
 */
ZEND_METHOD(QPainter, viewport){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->viewport();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  viewTransformEnabled
 *    flags:    c
 */
ZEND_METHOD(QPainter, viewTransformEnabled){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_BOOL(obj->viewTransformEnabled());
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawText
 *    flags:    
 */
ZEND_METHOD(QPainter, drawText){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QString&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawText((const QPointF&) var_lo_0, (const QString&) var_o_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QString&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawText((const QPoint&) var_lo_0, (const QString&) var_o_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* var_ooo_0;   // default: 
		zval* var_ooo_1;   // default: 
		zval* var_ooo_2;   // default: QTextOption()

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &var_ooo_0, &var_ooo_1, &var_ooo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			QString tmp_2(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QString&" && tmp_2 == "const QTextOption&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawText((const QRectF&) var_o_0, (const QString&) var_o_1, (const QTextOption&) var_o_2);
			RETURN_NULL();
			}
		}
		/* llo */
		long var_llo_3;    // default: 
		long var_llo_4;    // default: 
		zval* var_llo_5;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &var_llo_5) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_5 = (QObject*) php_qt_fetch(var_o_5);

			QString tmp_0(var_o_5->metaObject()->className());
			
			if(tmp_0 == "const QString&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawText((int) var_llo_0, (int) var_llo_0, (const QString&) var_o_5);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* oloo */
		zval* var_oloo_0;   // default: 
		long var_oloo_1;    // default: 
		zval* var_oloo_2;   // default: 
		zval* var_oloo_3;   // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oloo|", &var_oloo_0, &var_oloo_1, &var_oloo_2, &var_oloo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_2->metaObject()->className());
			QString tmp_2(var_o_3->metaObject()->className());
			
			if(tmp_0 == "const QRectF&" && tmp_1 == "const QString&" && tmp_2 == "QRectF*") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawText((const QRectF&) var_o_0, (int) var_oloo_1, (const QString&) var_o_2, (QRectF*) var_o_3);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawChord
 *    flags:    
 */
ZEND_METHOD(QPainter, drawChord){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* var_oll_0;   // default: 
		long var_oll_1;    // default: 
		long var_oll_2;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawChord((const QRectF&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawChord((const QRect&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  clipRegion
 *    flags:    c
 */
ZEND_METHOD(QPainter, clipRegion){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QRegion return_object = (QRegion) obj->clipRegion();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QPainter, end){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_BOOL(obj->end());
}

/*********************************
 *    class     QPainter */
/*
 *    function  brushOrigin
 *    flags:    c
 */
ZEND_METHOD(QPainter, brushOrigin){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_LONG(obj->brushOrigin());
}

/*********************************
 *    class     QPainter */
/*
 *    function  setViewTransformEnabled
 *    flags:    
 */
ZEND_METHOD(QPainter, setViewTransformEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setViewTransformEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  scale
 *    flags:    
 */
ZEND_METHOD(QPainter, scale){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* var_oo_0;   // default: 
		zval* var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_oo_0, &var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_0->metaObject()->className());
			QString tmp_1(var_o_1->metaObject()->className());
			
			if(tmp_0 == "qreal" && tmp_1 == "qreal") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->scale((qreal) var_o_0, (qreal) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setPen
 *    flags:    
 */
ZEND_METHOD(QPainter, setPen){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QColor&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setPen((const QColor&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QPen&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setPen((const QPen&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "Qt::PenStyle") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setPen((Qt::PenStyle) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBackgroundMode
 *    flags:    
 */
ZEND_METHOD(QPainter, setBackgroundMode){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "Qt::BGMode") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setBackgroundMode((Qt::BGMode) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  window
 *    flags:    c
 */
ZEND_METHOD(QPainter, window){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->window();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  paintEngine
 *    flags:    c
 */
ZEND_METHOD(QPainter, paintEngine){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QPaintEngine * return_object = (QPaintEngine *) obj->paintEngine();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  setRenderHint
 *    flags:    
 */
ZEND_METHOD(QPainter, setRenderHint){

	if (ZEND_NUM_ARGS() == 2){
		/* lb */
		long var_lb_0;    // default: 
		bool* var_lb_1;   // _default: true

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setRenderHint((RenderHint) var_lb_0 ,(bool) var_lb_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  brush
 *    flags:    c
 */
ZEND_METHOD(QPainter, brush){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			const QBrush & return_object = (const QBrush &) obj->brush();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  strokePath
 *    flags:    
 */
ZEND_METHOD(QPainter, strokePath){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QPen&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->strokePath((const QPainterPath&) var_lo_0, (const QPen&) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBrush
 *    flags:    
 */
ZEND_METHOD(QPainter, setBrush){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QBrush&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setBrush((const QBrush&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "Qt::BrushStyle") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setBrush((Qt::BrushStyle) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPoint
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPoint){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPoint((const QPointF&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawPoint((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  QPainter
 *    flags:    
 */
ZEND_METHOD(QPainter, QPainter){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_~(obj->QPainter());
}

/*********************************
 *    class     QPainter */
/*
 *    function  setRedirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, setRedirected){

	if (ZEND_NUM_ARGS() == 3){
		/* lll */
		long var_lll_0;    // default: 
		long var_lll_1;    // default: 
		long var_lll_2;    // default: QPoint()

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setRedirected((const QPaintDevice*) var_lll_0 ,(QPaintDevice*) var_lll_1 ,(const QPoint&) var_lll_2);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  compositionMode
 *    flags:    c
 */
ZEND_METHOD(QPainter, compositionMode){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
}

/*********************************
 *    class     QPainter */
/*
 *    function  setFont
 *    flags:    
 */
ZEND_METHOD(QPainter, setFont){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QFont&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setFont((const QFont&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  begin
 *    flags:    
 */
ZEND_METHOD(QPainter, begin){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_BOOL(obj->begin((QPaintDevice*) var_l_0));
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setViewport
 *    flags:    
 */
ZEND_METHOD(QPainter, setViewport){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setViewport((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setViewport((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawEllipse
 *    flags:    
 */
ZEND_METHOD(QPainter, drawEllipse){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawEllipse((const QRectF&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawEllipse((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawArc
 *    flags:    
 */
ZEND_METHOD(QPainter, drawArc){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* var_oll_0;   // default: 
		long var_oll_1;    // default: 
		long var_oll_2;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawArc((const QRectF&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawArc((const QRect&) var_o_0, (int) var_oll_1, (int) var_oll_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBackground
 *    flags:    
 */
ZEND_METHOD(QPainter, setBackground){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QBrush&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setBackground((const QBrush&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  isActive
 *    flags:    c
 */
ZEND_METHOD(QPainter, isActive){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_BOOL(obj->isActive());
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRect
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRect){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRectF&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawRect((const QRectF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QRect&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawRect((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawRect((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawLines
 *    flags:    
 */
ZEND_METHOD(QPainter, drawLines){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QLineF*") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawLines((const QLineF*) var_o_0, (int) var_ol_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QLine*") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawLines((const QLine*) var_o_0, (int) var_ol_1);
			RETURN_NULL();
			}
		}
		/* ll */
		long var_ll_1;    // default: 
		long var_ll_2;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_1, &var_ll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawLines((const QPointF*) var_ll_1 ,(int) var_ll_2);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  renderHints
 *    flags:    c
 */
ZEND_METHOD(QPainter, renderHints){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
}

/*********************************
 *    class     QPainter */
/*
 *    function  backgroundMode
 *    flags:    c
 */
ZEND_METHOD(QPainter, backgroundMode){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			Qt::BGMode return_object = (Qt::BGMode) obj->backgroundMode();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QPainter */
/*
 *    function  redirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, redirected){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			QPaintDevice * return_object = (QPaintDevice *) obj->redirected((const QPaintDevice*) var_ll_0 ,(QPoint*) var_ll_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QPainter_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  hasClipping
 *    flags:    c
 */
ZEND_METHOD(QPainter, hasClipping){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasClipping());
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawTextItem
 *    flags:    
 */
ZEND_METHOD(QPainter, drawTextItem){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "const QTextItem&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawTextItem((const QPointF&) var_lo_0, (const QTextItem&) var_o_1);
			RETURN_NULL();
			}			
			if(tmp_0 == "const QTextItem&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawTextItem((const QPoint&) var_lo_0, (const QTextItem&) var_o_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &var_llo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "const QTextItem&") {
				QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->drawTextItem((int) var_llo_0, (int) var_llo_0, (const QTextItem&) var_o_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipping
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipping){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *obj = (QPainter) PHP_QT_FETCH();
			obj->setClipping((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  clipPath
 *    flags:    c
 */
ZEND_METHOD(QPainter, clipPath){
			QPainter *obj = (QPainter) PHP_QT_FETCH();
}



ZEND_METHOD(QPainter,__construct){

	QPainter *QPainter_ptr = new QPainter();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*long arg1 QPaintDevice**/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			QPaintDevice* tmp(Z_STRVAL_P(param_0));
			QPainter_ptr = new QPainter(tmp);
		}
	}

	PHP_QT_REGISTER(QPainter_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QPainter);

