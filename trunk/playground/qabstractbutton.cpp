/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QAbstractButton.cpp - QAbstractButton PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QAbstractButton>



/*********************************
 *    class     QAbstractButton
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QAbstractButton, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QAbstractButton, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QAbstractButton, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  QAbstractButton
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QAbstractButton, QAbstractButton){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		RETURN_~(o->QAbstractButton());
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setText
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setText){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"text",strlen("text"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  text
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QAbstractButton, text){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QString obj = (QString) o->text();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setIcon
 *    flags:    
 *
 *    @param   const QIcon&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setIcon){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"icon",strlen("icon"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  icon
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QIcon
*********************************/
ZEND_METHOD(QAbstractButton, icon){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  iconSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QAbstractButton, iconSize){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QSize obj = (QSize) o->iconSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setShortcut
 *    flags:    
 *
 *    @param   const QKeySequence&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setShortcut){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"shortcut",strlen("shortcut"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  shortcut
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QKeySequence
*********************************/
ZEND_METHOD(QAbstractButton, shortcut){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QKeySequence obj = (QKeySequence) o->shortcut();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setCheckable
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setCheckable){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"checkable",strlen("checkable"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  isCheckable
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, isCheckable){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->isCheckable());
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  isChecked
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, isChecked){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->isChecked());
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setDown
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setDown){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"down",strlen("down"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  isDown
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, isDown){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->isDown());
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setAutoRepeat
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setAutoRepeat){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"autoRepeat",strlen("autoRepeat"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  autoRepeat
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, autoRepeat){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->autoRepeat());
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setAutoExclusive
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setAutoExclusive){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"autoExclusive",strlen("autoExclusive"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  autoExclusive
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractButton, autoExclusive){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		RETURN_BOOL(o->autoExclusive());
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  group
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QButtonGroup *
*********************************/
ZEND_METHOD(QAbstractButton, group){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QButtonGroup * obj = (QButtonGroup *) o->group();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setIconSize
 *    flags:    l
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setIconSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"iconSize",strlen("iconSize"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  animateClick
 *    flags:    l
 *
 *    @param   int
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, animateClick){
	if (ZEND_NUM_ARGS() == 1){
	// 100
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		o->animateClick((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  click
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, click){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		o->click();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  toggle
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, toggle){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		o->toggle();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  setChecked
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractButton, setChecked){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"checked",strlen("checked"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QAbstractButton, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QAbstractButton, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractButton
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QAbstractButton, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QAbstractButton *o = (QAbstractButton*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractButton_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QAbstractButton,__construct){

	QAbstractButton *QAbstractButton_ptr = new QAbstractButton();

	PHP_QT_REGISTER(QAbstractButton_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QAbstractButton);

