/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QBoxLayout.cpp - QBoxLayout PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QBoxLayout>



/*		public enumDirection:long {
			Direction = 0,
			Direction = 1,
			Direction = 2,
			Direction = 3,
			Down = TopToBottom,
			Up = BottomToTop
		}
*/

/*********************************
 *    class     QBoxLayout
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QBoxLayout, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QBoxLayout, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QBoxLayout, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QBoxLayout, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QBoxLayout, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QBoxLayout, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  QBoxLayout
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QBoxLayout, QBoxLayout){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_~(o->QBoxLayout());
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  direction
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Direction
*********************************/
ZEND_METHOD(QBoxLayout, direction){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->direction());
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  setDirection
 *    flags:    
 *
 *    @param   Direction
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, setDirection){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->setDirection( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  addSpacing
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, addSpacing){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->addSpacing((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  addStretch
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, addStretch){
	if (ZEND_NUM_ARGS() == 1){
	// 0
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->addStretch((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  addWidget
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   int
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, addWidget){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 0
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->addWidget( tmp_var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  addLayout
 *    flags:    
 *
 *    @param   QLayout*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, addLayout){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 0
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->addLayout( tmp_var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  addStrut
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, addStrut){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->addStrut((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  addItem
 *    flags:    
 *
 *    @param   QLayoutItem*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, addItem){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->addItem( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  insertSpacing
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, insertSpacing){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->insertSpacing((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  insertStretch
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, insertStretch){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 0
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->insertStretch((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  insertWidget
 *    flags:    
 *
 *    @param   int
 *    @param   QWidget*
 *    @param   int
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, insertWidget){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		zval* var_1;

	// 0
		long var_2;
	// 0
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lolo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->insertWidget((int) var_0,  tmp_var_1, (int) var_2,  tmp_var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  insertLayout
 *    flags:    
 *
 *    @param   int
 *    @param   QLayout*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, insertLayout){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		zval* var_1;

	// 0
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->insertLayout((int) var_0,  tmp_var_1, (int) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  setStretchFactor
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QBoxLayout, setStretchFactor){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->setStretchFactor( tmp_var_0, (int) var_1));
// marked for overloading: setStretchFactor
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->setStretchFactor( tmp_var_0, (int) var_1));
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QBoxLayout, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  minimumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QBoxLayout, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  maximumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QBoxLayout, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->maximumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  hasHeightForWidth
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QBoxLayout, hasHeightForWidth){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasHeightForWidth());
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  heightForWidth
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QBoxLayout, heightForWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->heightForWidth((int) var_0));
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  minimumHeightForWidth
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QBoxLayout, minimumHeightForWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->minimumHeightForWidth((int) var_0));
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  expandingDirections
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientations
*********************************/
ZEND_METHOD(QBoxLayout, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  invalidate
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, invalidate){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->invalidate();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  itemAt
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QLayoutItem *
*********************************/
ZEND_METHOD(QBoxLayout, itemAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QLayoutItem * obj = (QLayoutItem *) o->itemAt((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  takeAt
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QLayoutItem *
*********************************/
ZEND_METHOD(QBoxLayout, takeAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QLayoutItem * obj = (QLayoutItem *) o->takeAt((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  count
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QBoxLayout, count){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->count());
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  setGeometry
 *    flags:    
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, setGeometry){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->setGeometry( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QBoxLayout, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QBoxLayout, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QBoxLayout, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QBoxLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QBoxLayout
 *    function  insertItem
 *    flags:    
 *
 *    @param   int
 *    @param   QLayoutItem*
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QBoxLayout, insertItem){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QBoxLayout *o = (QBoxLayout*) PHP_QT_FETCH();
		o->insertItem((int) var_0,  tmp_var_1);
		RETURN_NULL();

	}
}


ZEND_METHOD(QBoxLayout,__construct){

	QBoxLayout *QBoxLayout_ptr = new QBoxLayout();

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long arg1 Direction*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			Direction tmp(Z_STRVAL_P(param_0));
			QBoxLayout_ptr = new QBoxLayout(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QBoxLayout_ptr = new QBoxLayout(tmp);
		}
	}

	PHP_QT_REGISTER(QBoxLayout_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QBoxLayout);

