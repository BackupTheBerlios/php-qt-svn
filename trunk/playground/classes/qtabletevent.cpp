/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTabletEvent.cpp - QTabletEvent PHP implementation.
 * begin           : Mon Jan  9 00:39:35 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QTabletEvent>
#include "../php_qt.h"



/*		public enumTabletDevice:long {
			TabletDevice = 0,
			TabletDevice = 1,
			TabletDevice = 2,
			TabletDevice = 3,
			TabletDevice = 4,
			TabletDevice = 5
		}
*/

/*		public enumPointerType:long {
			PointerType = 0,
			PointerType = 1,
			PointerType = 2,
			PointerType = 3
		}
*/
/*********************************
 *    class     QTabletEvent */
/*
 *    function  hiResGlobalX
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, hiResGlobalX){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->hiResGlobalX();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  pressure
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, pressure){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->pressure();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  hiResGlobalPos
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, hiResGlobalPos){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			const QPointF & return_object = (const QPointF &) obj->hiResGlobalPos();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTabletEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  tangentialPressure
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, tangentialPressure){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->tangentialPressure();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  x
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, x){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->x());
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  globalX
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, globalX){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->globalX());
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  globalPos
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, globalPos){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			const QPoint & return_object = (const QPoint &) obj->globalPos();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTabletEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  y
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, y){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->y());
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  uniqueId
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, uniqueId){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->uniqueId();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  hiResGlobalY
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, hiResGlobalY){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->hiResGlobalY();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  pos
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, pos){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			const QPoint & return_object = (const QPoint &) obj->pos();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTabletEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  xTilt
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, xTilt){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->xTilt());
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  rotation
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, rotation){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->rotation();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  pointerType
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, pointerType){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->pointerType();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  yTilt
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, yTilt){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->yTilt());
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  device
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, device){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			obj->device();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  globalY
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, globalY){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->globalY());
	}
}

/*********************************
 *    class     QTabletEvent */
/*
 *    function  z
 *    flags:    c
 */
ZEND_METHOD(QTabletEvent, z){
	if (ZEND_NUM_ARGS() == 0){
			QTabletEvent *obj = (QTabletEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->z());
	}
}


PHP_QT_DESTRUCT(QTabletEvent);

