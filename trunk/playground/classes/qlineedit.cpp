/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLineEdit.cpp - QLineEdit PHP implementation.
 * begin           : Mon Jan  9 00:39:35 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QLineEdit>
#include "../php_qt.h"



/*		public enumEchoMode:long {
			EchoMode = 0,
			EchoMode = 1,
			EchoMode = 2
		}
*/
/*********************************
 *    class     QLineEdit */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QLineEdit, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		/* const char* , const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  inputMask
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, inputMask){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString return_object = (QString) obj->inputMask();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  insert
 *    flags:    
 */
ZEND_METHOD(QLineEdit, insert){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QString& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->insert((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorPosition
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, cursorPosition){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->cursorPosition());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  clear
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, clear){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  selectionStart
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, selectionStart){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->selectionStart());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setMaxLength
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setMaxLength){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setMaxLength((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int , QUObject* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setModified
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setModified){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setModified((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setFrame
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setFrame){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setFrame((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		/* const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->qt_cast( (const char*) var_s_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setReadOnly
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setReadOnly){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setReadOnly((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setEchoMode
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setEchoMode){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* EchoMode ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "EchoMode") {
				obj->setEchoMode((EchoMode) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QLineEdit, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorBackward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorBackward){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 
		long var_bl_1;    // default: 1

		/* bool mark, int steps,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->cursorBackward((bool) var_bl_0 ,(int) var_bl_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorWordBackward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorWordBackward){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool mark,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->cursorWordBackward((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int , QUObject* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setAlignment
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setAlignment){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int flag,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setAlignment((Qt::Alignment) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QLineEdit, className){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  QLineEdit
 *    flags:    t
 */
ZEND_METHOD(QLineEdit, __construct){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 0

		/* QWidget* parent,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				QLineEdit *QLineEdit_ptr = new QLineEdit((QWidget*) var_o_0);
			PHP_QT_REGISTER(QLineEdit_ptr);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 0

		/* const QString& , QWidget* parent,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "QWidget*") {
				QLineEdit *QLineEdit_ptr = new QLineEdit((const QString&) var_oo_0, (QWidget*) var_oo_1);
			PHP_QT_REGISTER(QLineEdit_ptr);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QLineEdit, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QLineEdit, qObject){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  inputMethodQuery
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, inputMethodQuery){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			QVariant return_object = (QVariant) obj->inputMethodQuery((Qt::InputMethodQuery) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  text
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, text){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString return_object = (QString) obj->text();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  minimumSizeHint
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  home
 *    flags:    
 */
ZEND_METHOD(QLineEdit, home){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool mark,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->home((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  del
 *    flags:    
 */
ZEND_METHOD(QLineEdit, del){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->del();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorForward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorForward){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 
		long var_bl_1;    // default: 1

		/* bool mark, int steps,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->cursorForward((bool) var_bl_0 ,(int) var_bl_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setDragEnabled
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setDragEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool b,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setDragEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		/* int , int , QVariant* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "QVariant*") {
				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  echoMode
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, echoMode){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->echoMode());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setValidator
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setValidator){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QValidator* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QValidator*") {
				obj->setValidator((const QValidator*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  hasSelectedText
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, hasSelectedText){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasSelectedText());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  hasAcceptableInput
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, hasAcceptableInput){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasAcceptableInput());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  paste
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, paste){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->paste();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  redo
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, redo){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->redo();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  copy
 *    flags:    cl
 */
ZEND_METHOD(QLineEdit, copy){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->copy();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  undo
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, undo){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->undo();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  displayText
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, displayText){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString return_object = (QString) obj->displayText();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorWordForward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorWordForward){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool mark,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->cursorWordForward((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QLineEdit, event){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QEvent* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QEvent*") {
				RETURN_BOOL(obj->event((QEvent*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  validator
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, validator){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			const QValidator * return_object = (const QValidator *) obj->validator();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QLineEdit, end){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool mark,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->end((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isRedoAvailable
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isRedoAvailable){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRedoAvailable());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorPositionAt
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorPositionAt){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* const QPoint& pos,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->cursorPositionAt((const QPoint&) var_l_0));
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  deselect
 *    flags:    
 */
ZEND_METHOD(QLineEdit, deselect){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->deselect();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setSelection
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setSelection){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* int , int ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setSelection((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  selectedText
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, selectedText){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString return_object = (QString) obj->selectedText();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isUndoAvailable
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isUndoAvailable){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isUndoAvailable());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  hasFrame
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, hasFrame){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasFrame());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setInputMask
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setInputMask){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QString& inputMask,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setInputMask((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  dragEnabled
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, dragEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->dragEnabled());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cut
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, cut){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->cut();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setText
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, setText){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QString& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setText((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  alignment
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, alignment){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			Qt::Alignment return_object = (Qt::Alignment) obj->alignment();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setCursorPosition
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setCursorPosition){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			obj->setCursorPosition((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  createStandardContextMenu
 *    flags:    
 */
ZEND_METHOD(QLineEdit, createStandardContextMenu){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QMenu * return_object = (QMenu *) obj->createStandardContextMenu();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  backspace
 *    flags:    
 */
ZEND_METHOD(QLineEdit, backspace){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->backspace();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  selectAll
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, selectAll){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->selectAll();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  maxLength
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, maxLength){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->maxLength());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isModified
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isModified){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isModified());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QLineEdit, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		/* const char* , const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isReadOnly
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isReadOnly){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isReadOnly());
	}
}


PHP_QT_DESTRUCT(QLineEdit);

