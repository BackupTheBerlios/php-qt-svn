/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QFrame.cpp - QFrame PHP implementation.
 * begin           : Sun Jan  8 23:20:48 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QFrame>
#include "../php_qt.h"



/*		public enumShape:long {
			NoFrame = 0,
			Box = 0x0001,
			Panel = 0x0002,
			WinPanel = 0x0003,
			HLine = 0x0004,
			VLine = 0x0005,
			StyledPanel = 0x0006
		}
*/

/*		public enumShadow:long {
			Plain = 0x0010,
			Raised = 0x0020,
			Sunken = 0x0030
		}
*/

/*		public enum:long {
			Shadow_Mask = 0x00f0,
			Shape_Mask = 0x000f
		}
*/
/*********************************
 *    class     QFrame */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QFrame, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  setLineWidth
 *    flags:    
 */
ZEND_METHOD(QFrame, setLineWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			obj->setLineWidth((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  frameWidth
 *    flags:    c
 */
ZEND_METHOD(QFrame, frameWidth){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			RETURN_LONG(obj->frameWidth());
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QFrame, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QFrame, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  QFrame
 *    flags:    t
 */
ZEND_METHOD(QFrame, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			RETURN_~(obj->QFrame());
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 0
		long var_ol_1;    // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QWidget*") {
				obj->QFrame((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ool */
		zval* z_var_ool_0;   // default: 
		zval* z_var_ool_1;   // default: 0
		long var_ool_2;    // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);

			QString tmp_ool_0(var_ool_0->metaObject()->className());
			QString tmp_ool_1(var_ool_1->metaObject()->className());
			
			if(tmp_ool_0 == "QFramePrivate&" && tmp_ool_1 == "QWidget*") {
				obj->QFrame((QFramePrivate&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  midLineWidth
 *    flags:    c
 */
ZEND_METHOD(QFrame, midLineWidth){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			RETURN_LONG(obj->midLineWidth());
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  frameShadow
 *    flags:    c
 */
ZEND_METHOD(QFrame, frameShadow){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			obj->frameShadow();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QFrame, qObject){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  frameShape
 *    flags:    c
 */
ZEND_METHOD(QFrame, frameShape){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			obj->frameShape();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  setFrameShape
 *    flags:    
 */
ZEND_METHOD(QFrame, setFrameShape){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "Shape") {
				obj->setFrameShape((Shape) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QFrame, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QFrame, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			obj->qt_cast( (const char*) var_s_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  setFrameRect
 *    flags:    
 */
ZEND_METHOD(QFrame, setFrameRect){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->setFrameRect((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QFrame, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  setFrameStyle
 *    flags:    
 */
ZEND_METHOD(QFrame, setFrameStyle){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			obj->setFrameStyle((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  lineWidth
 *    flags:    c
 */
ZEND_METHOD(QFrame, lineWidth){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			RETURN_LONG(obj->lineWidth());
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  drawFrame
 *    flags:    
 */
ZEND_METHOD(QFrame, drawFrame){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			obj->drawFrame((QPainter*) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QFrame, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QFrame, className){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  setMidLineWidth
 *    flags:    
 */
ZEND_METHOD(QFrame, setMidLineWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			obj->setMidLineWidth((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  setFrameShadow
 *    flags:    
 */
ZEND_METHOD(QFrame, setFrameShadow){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "Shadow") {
				obj->setFrameShadow((Shadow) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QFrame, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QFrame, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "QVariant*") {
				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
			}
		}
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  frameRect
 *    flags:    c
 */
ZEND_METHOD(QFrame, frameRect){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->frameRect();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFrame_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFrame */
/*
 *    function  frameStyle
 *    flags:    c
 */
ZEND_METHOD(QFrame, frameStyle){
	if (ZEND_NUM_ARGS() == 0){
			QFrame *obj = (QFrame*) PHP_QT_FETCH();
			RETURN_LONG(obj->frameStyle());
	}
}


PHP_QT_DESTRUCT(QFrame);

