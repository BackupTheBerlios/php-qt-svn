/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QCharRef.cpp - QCharRef PHP implementation.
 * begin           : Sun Jan  8 23:20:48 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QCharRef>
#include "../php_qt.h"


/*********************************
 *    class     QCharRef */
/*
 *    function  isDigit
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isDigit){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isDigit());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  combiningClass
 *    flags:    c
 */
ZEND_METHOD(QCharRef, combiningClass){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_CHAR* (obj->combiningClass());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  decompositionTag
 *    flags:    c
 */
ZEND_METHOD(QCharRef, decompositionTag){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_LONG(obj->decompositionTag());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  joining
 *    flags:    c
 */
ZEND_METHOD(QCharRef, joining){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_LONG(obj->joining());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  direction
 *    flags:    c
 */
ZEND_METHOD(QCharRef, direction){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_LONG(obj->direction());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  hasMirrored
 *    flags:    c
 */
ZEND_METHOD(QCharRef, hasMirrored){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasMirrored());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  toLower
 *    flags:    c
 */
ZEND_METHOD(QCharRef, toLower){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			obj->toLower();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  unicode
 *    flags:    c
 */
ZEND_METHOD(QCharRef, unicode){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			obj->unicode();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  row
 *    flags:    c
 */
ZEND_METHOD(QCharRef, row){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_CHAR* (obj->row());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  setRow
 *    flags:    
 */
ZEND_METHOD(QCharRef, setRow){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();

			
			obj->setRow( (uchar) var_s_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  category
 *    flags:    c
 */
ZEND_METHOD(QCharRef, category){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_LONG(obj->category());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isLetter
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isLetter){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isLetter());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  cell
 *    flags:    c
 */
ZEND_METHOD(QCharRef, cell){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_CHAR* (obj->cell());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  digitValue
 *    flags:    c
 */
ZEND_METHOD(QCharRef, digitValue){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_LONG(obj->digitValue());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isPrint
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isPrint){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isPrint());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isLetterOrNumber
 *    flags:    
 */
ZEND_METHOD(QCharRef, isLetterOrNumber){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isLetterOrNumber());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  mirroredChar
 *    flags:    c
 */
ZEND_METHOD(QCharRef, mirroredChar){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			obj->mirroredChar();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  setCell
 *    flags:    
 */
ZEND_METHOD(QCharRef, setCell){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();

			
			obj->setCell( (uchar) var_s_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isNumber
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isNumber){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNumber());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  unicodeVersion
 *    flags:    c
 */
ZEND_METHOD(QCharRef, unicodeVersion){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			QChar::UnicodeVersion return_object = (QChar::UnicodeVersion) obj->unicodeVersion();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QCharRef_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isSpace
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isSpace){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSpace());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  toLatin1
 *    flags:    c
 */
ZEND_METHOD(QCharRef, toLatin1){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			obj->toLatin1();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  toAscii
 *    flags:    c
 */
ZEND_METHOD(QCharRef, toAscii){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			obj->toAscii();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  decomposition
 *    flags:    c
 */
ZEND_METHOD(QCharRef, decomposition){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			QString return_object = (QString) obj->decomposition();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QCharRef_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  toUpper
 *    flags:    c
 */
ZEND_METHOD(QCharRef, toUpper){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			obj->toUpper();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isMark
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isMark){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isMark());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isPunct
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isPunct){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isPunct());
	}
}

/*********************************
 *    class     QCharRef */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QCharRef, isNull){
	if (ZEND_NUM_ARGS() == 0){
			QCharRef *obj = (QCharRef*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
	}
}


PHP_QT_DESTRUCT(QCharRef);

