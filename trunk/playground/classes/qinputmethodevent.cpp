/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
 * begin           : Sun Jan  8 12:02:25 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QInputMethodEvent>
#include "../php_qt.h"


#include <QInputMethodEvent>



/*		public enumAttributeType:long {
			AttributeType = 0,
			AttributeType = 1,
			AttributeType = 2,
			AttributeType = 3
		}
*/
/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  commitString
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, commitString){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			const QString & return_object = (const QString &) obj->commitString();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  replacementStart
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, replacementStart){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->replacementStart());
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  setCommitString
 *    flags:    
 */
ZEND_METHOD(QInputMethodEvent, setCommitString){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 0
		long var_oll_2;    // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "const QString&") {
				obj->setCommitString((const QString&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  replacementLength
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, replacementLength){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->replacementLength());
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  preeditString
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, preeditString){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			const QString & return_object = (const QString &) obj->preeditString();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}



ZEND_METHOD(QInputMethodEvent,__construct){

	QInputMethodEvent *QInputMethodEvent_ptr = new QInputMethodEvent();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* other QInputMethodEvent&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QInputMethodEvent& tmp(Z_STRVAL_P(param_0));
			QInputMethodEvent_ptr = new QInputMethodEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QInputMethodEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QInputMethodEvent);

