/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWidget.cpp - QWidget PHP implementation.
 * begin           : Sun Jan  8 23:20:48 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QWidget>
#include "../php_qt.h"


/*********************************
 *    class     QWidget */
/*
 *    function  nextInFocusChain
 *    flags:    c
 */
ZEND_METHOD(QWidget, nextInFocusChain){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->nextInFocusChain();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QWidget, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  focusPolicy
 *    flags:    c
 */
ZEND_METHOD(QWidget, focusPolicy){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::FocusPolicy return_object = (Qt::FocusPolicy) obj->focusPolicy();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowOpacity
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowOpacity){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->windowOpacity();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  y
 *    flags:    c
 */
ZEND_METHOD(QWidget, y){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->y());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  clearFocus
 *    flags:    
 */
ZEND_METHOD(QWidget, clearFocus){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->clearFocus();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  fontInfo
 *    flags:    c
 */
ZEND_METHOD(QWidget, fontInfo){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QFontInfo return_object = (QFontInfo) obj->fontInfo();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isHidden
 *    flags:    c
 */
ZEND_METHOD(QWidget, isHidden){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isHidden());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QWidget, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->qt_cast( (const char*) var_s_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  styleChange
 *    flags:    v
 */
ZEND_METHOD(QWidget, styleChange){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QStyle&") {
				obj->styleChange((QStyle&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMaximumWidth
 *    flags:    
 */
ZEND_METHOD(QWidget, setMaximumWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMaximumWidth((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QWidget, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  contentsRect
 *    flags:    c
 */
ZEND_METHOD(QWidget, contentsRect){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->contentsRect();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setContextMenuPolicy
 *    flags:    
 */
ZEND_METHOD(QWidget, setContextMenuPolicy){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setContextMenuPolicy((Qt::ContextMenuPolicy) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  focusProxy
 *    flags:    c
 */
ZEND_METHOD(QWidget, focusProxy){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->focusProxy();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  statusTip
 *    flags:    c
 */
ZEND_METHOD(QWidget, statusTip){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->statusTip();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  visibleRegion
 *    flags:    c
 */
ZEND_METHOD(QWidget, visibleRegion){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRegion return_object = (QRegion) obj->visibleRegion();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isVisibleTo
 *    flags:    c
 */
ZEND_METHOD(QWidget, isVisibleTo){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				RETURN_BOOL(obj->isVisibleTo((QWidget*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  releaseMouse
 *    flags:    
 */
ZEND_METHOD(QWidget, releaseMouse){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->releaseMouse();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setTabOrder
 *    flags:    s
 */
ZEND_METHOD(QWidget, setTabOrder){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "QWidget*" && tmp_oo_1 == "QWidget*") {
				obj->setTabOrder((QWidget*) var_oo_0, (QWidget*) var_oo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFocusProxy
 *    flags:    
 */
ZEND_METHOD(QWidget, setFocusProxy){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				obj->setFocusProxy((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QWidget, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  topLevelWidget
 *    flags:    c
 */
ZEND_METHOD(QWidget, topLevelWidget){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->topLevelWidget();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mapToParent
 *    flags:    c
 */
ZEND_METHOD(QWidget, mapToParent){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->mapToParent((const QPoint&) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QWidget, className){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  overrideWindowFlags
 *    flags:    
 */
ZEND_METHOD(QWidget, overrideWindowFlags){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->overrideWindowFlags((Qt::WindowFlags) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  hide
 *    flags:    l
 */
ZEND_METHOD(QWidget, hide){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->hide();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mapTo
 *    flags:    c
 */
ZEND_METHOD(QWidget, mapTo){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QWidget*") {
				RETURN_LONG(obj->mapTo((QWidget*) var_ol_0, (const QPoint&) var_ol_1));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  childrenRect
 *    flags:    c
 */
ZEND_METHOD(QWidget, childrenRect){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->childrenRect();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setStyle
 *    flags:    
 */
ZEND_METHOD(QWidget, setStyle){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QStyle*") {
				obj->setStyle((QStyle*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isRightToLeft
 *    flags:    c
 */
ZEND_METHOD(QWidget, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRightToLeft());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowModified
 *    flags:    l
 */
ZEND_METHOD(QWidget, setWindowModified){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setWindowModified((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setBackgroundRole
 *    flags:    
 */
ZEND_METHOD(QWidget, setBackgroundRole){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QPalette::ColorRole") {
				obj->setBackgroundRole((QPalette::ColorRole) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFixedSize
 *    flags:    
 */
ZEND_METHOD(QWidget, setFixedSize){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QSize&") {
				obj->setFixedSize((const QSize&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setFixedSize((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  focusPreviousChild
 *    flags:    
 */
ZEND_METHOD(QWidget, focusPreviousChild){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->focusPreviousChild());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  inputContext
 *    flags:    
 */
ZEND_METHOD(QWidget, inputContext){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QInputContext * return_object = (QInputContext *) obj->inputContext();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  palette
 *    flags:    c
 */
ZEND_METHOD(QWidget, palette){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			const QPalette & return_object = (const QPalette &) obj->palette();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFixedHeight
 *    flags:    
 */
ZEND_METHOD(QWidget, setFixedHeight){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setFixedHeight((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  repaint
 *    flags:    
 */
ZEND_METHOD(QWidget, repaint){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->repaint();
			RETURN_NULL();
	}

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->repaint((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->repaint((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  cursor
 *    flags:    c
 */
ZEND_METHOD(QWidget, cursor){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QCursor return_object = (QCursor) obj->cursor();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowIconText
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowIconText){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setWindowIconText((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  fontMetrics
 *    flags:    c
 */
ZEND_METHOD(QWidget, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QFontMetrics return_object = (QFontMetrics) obj->fontMetrics();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  grabShortcut
 *    flags:    
 */
ZEND_METHOD(QWidget, grabShortcut){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::WindowShortcut

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QKeySequence&") {
				RETURN_LONG(obj->grabShortcut((const QKeySequence&) var_ol_0, (Qt::ShortcutContext) var_ol_1));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  releaseKeyboard
 *    flags:    
 */
ZEND_METHOD(QWidget, releaseKeyboard){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->releaseKeyboard();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setAccessibleDescription
 *    flags:    
 */
ZEND_METHOD(QWidget, setAccessibleDescription){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setAccessibleDescription((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QWidget, qObject){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  maximumWidth
 *    flags:    c
 */
ZEND_METHOD(QWidget, maximumWidth){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->maximumWidth());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowOpacity
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowOpacity){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "qreal") {
				obj->setWindowOpacity((qreal) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isTopLevel
 *    flags:    c
 */
ZEND_METHOD(QWidget, isTopLevel){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isTopLevel());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mask
 *    flags:    c
 */
ZEND_METHOD(QWidget, mask){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRegion return_object = (QRegion) obj->mask();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  fontChange
 *    flags:    v
 */
ZEND_METHOD(QWidget, fontChange){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QFont&") {
				obj->fontChange((const QFont&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isActiveWindow
 *    flags:    c
 */
ZEND_METHOD(QWidget, isActiveWindow){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isActiveWindow());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isEnabledTo
 *    flags:    c
 */
ZEND_METHOD(QWidget, isEnabledTo){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				RETURN_BOOL(obj->isEnabledTo((QWidget*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  layoutDirection
 *    flags:    c
 */
ZEND_METHOD(QWidget, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::LayoutDirection return_object = (Qt::LayoutDirection) obj->layoutDirection();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isAncestorOf
 *    flags:    c
 */
ZEND_METHOD(QWidget, isAncestorOf){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QWidget*") {
				RETURN_BOOL(obj->isAncestorOf((const QWidget*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowIcon
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowIcon){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->windowIcon();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  updatesEnabled
 *    flags:    c
 */
ZEND_METHOD(QWidget, updatesEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->updatesEnabled());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isMinimized
 *    flags:    c
 */
ZEND_METHOD(QWidget, isMinimized){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isMinimized());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  height
 *    flags:    c
 */
ZEND_METHOD(QWidget, height){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->height());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  normalGeometry
 *    flags:    c
 */
ZEND_METHOD(QWidget, normalGeometry){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->normalGeometry();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMask
 *    flags:    
 */
ZEND_METHOD(QWidget, setMask){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QBitmap&") {
				obj->setMask((const QBitmap&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setForegroundRole
 *    flags:    
 */
ZEND_METHOD(QWidget, setForegroundRole){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QPalette::ColorRole") {
				obj->setForegroundRole((QPalette::ColorRole) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  update
 *    flags:    
 */
ZEND_METHOD(QWidget, update){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->update();
			RETURN_NULL();
	}

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->update((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->update((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  adjustSize
 *    flags:    
 */
ZEND_METHOD(QWidget, adjustSize){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->adjustSize();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  toolTip
 *    flags:    c
 */
ZEND_METHOD(QWidget, toolTip){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->toolTip();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setCursor
 *    flags:    
 */
ZEND_METHOD(QWidget, setCursor){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QCursor&") {
				obj->setCursor((const QCursor&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMinimumWidth
 *    flags:    
 */
ZEND_METHOD(QWidget, setMinimumWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMinimumWidth((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isEnabledToTLW
 *    flags:    c
 */
ZEND_METHOD(QWidget, isEnabledToTLW){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEnabledToTLW());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowRole
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowRole){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setWindowRole((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setPalette
 *    flags:    
 */
ZEND_METHOD(QWidget, setPalette){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QPalette&") {
				obj->setPalette((const QPalette&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  acceptDrops
 *    flags:    c
 */
ZEND_METHOD(QWidget, acceptDrops){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->acceptDrops());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  focusNextChild
 *    flags:    
 */
ZEND_METHOD(QWidget, focusNextChild){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->focusNextChild());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setShortcutEnabled
 *    flags:    
 */
ZEND_METHOD(QWidget, setShortcutEnabled){

	if (ZEND_NUM_ARGS() == 2){
		/* lb */
		long var_lb_0;    // default: 
		bool var_lb_1;   // _default: true

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setShortcutEnabled((int) var_lb_0 ,(bool) var_lb_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  geometry
 *    flags:    c
 */
ZEND_METHOD(QWidget, geometry){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			const QRect & return_object = (const QRect &) obj->geometry();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  focusNextPrevChild
 *    flags:    v
 */
ZEND_METHOD(QWidget, focusNextPrevChild){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_BOOL(obj->focusNextPrevChild((bool) var_b_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowActivationChange
 *    flags:    v
 */
ZEND_METHOD(QWidget, windowActivationChange){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->windowActivationChange((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setShown
 *    flags:    l
 */
ZEND_METHOD(QWidget, setShown){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setShown((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  accessibleDescription
 *    flags:    c
 */
ZEND_METHOD(QWidget, accessibleDescription){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->accessibleDescription();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMaximumSize
 *    flags:    
 */
ZEND_METHOD(QWidget, setMaximumSize){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QSize&") {
				obj->setMaximumSize((const QSize&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMaximumSize((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setContentsMargins
 *    flags:    
 */
ZEND_METHOD(QWidget, setContentsMargins){

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setContentsMargins((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  backgroundRole
 *    flags:    c
 */
ZEND_METHOD(QWidget, backgroundRole){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QPalette::ColorRole return_object = (QPalette::ColorRole) obj->backgroundRole();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mapFromParent
 *    flags:    c
 */
ZEND_METHOD(QWidget, mapFromParent){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->mapFromParent((const QPoint&) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  updateGeometry
 *    flags:    
 */
ZEND_METHOD(QWidget, updateGeometry){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->updateGeometry();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setAttribute
 *    flags:    
 */
ZEND_METHOD(QWidget, setAttribute){

	if (ZEND_NUM_ARGS() == 2){
		/* lb */
		long var_lb_0;    // default: 
		bool var_lb_1;   // _default: true

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setAttribute((Qt::WidgetAttribute) var_lb_0 ,(bool) var_lb_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowType
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowType){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::WindowType return_object = (Qt::WindowType) obj->windowType();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  focusWidget
 *    flags:    c
 */
ZEND_METHOD(QWidget, focusWidget){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->focusWidget();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  ensurePolished
 *    flags:    c
 */
ZEND_METHOD(QWidget, ensurePolished){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->ensurePolished();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  foregroundRole
 *    flags:    c
 */
ZEND_METHOD(QWidget, foregroundRole){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QPalette::ColorRole return_object = (QPalette::ColorRole) obj->foregroundRole();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setEnabled
 *    flags:    l
 */
ZEND_METHOD(QWidget, setEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowIconText
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowIconText){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->windowIconText();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  updateMicroFocus
 *    flags:    
 */
ZEND_METHOD(QWidget, updateMicroFocus){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->updateMicroFocus();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  metric
 *    flags:    c
 */
ZEND_METHOD(QWidget, metric){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->metric((PaintDeviceMetric) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  paletteChange
 *    flags:    v
 */
ZEND_METHOD(QWidget, paletteChange){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QPalette&") {
				obj->paletteChange((const QPalette&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  winId
 *    flags:    c
 */
ZEND_METHOD(QWidget, winId){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->winId());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  close
 *    flags:    l
 */
ZEND_METHOD(QWidget, close){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->close());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  childAt
 *    flags:    c
 */
ZEND_METHOD(QWidget, childAt){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			QWidget * return_object = (QWidget *) obj->childAt((const QPoint&) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			QWidget * return_object = (QWidget *) obj->childAt((int) var_ll_0 ,(int) var_ll_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFixedWidth
 *    flags:    
 */
ZEND_METHOD(QWidget, setFixedWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setFixedWidth((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowRole
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowRole){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->windowRole();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFont
 *    flags:    
 */
ZEND_METHOD(QWidget, setFont){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QFont&") {
				obj->setFont((const QFont&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  hasMouseTracking
 *    flags:    c
 */
ZEND_METHOD(QWidget, hasMouseTracking){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasMouseTracking());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  childrenRegion
 *    flags:    c
 */
ZEND_METHOD(QWidget, childrenRegion){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRegion return_object = (QRegion) obj->childrenRegion();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  QWidget
 *    flags:    t
 */
ZEND_METHOD(QWidget, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_~(obj->QWidget());
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 0
		long var_ol_1;    // default: 0

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|l|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QWidget*") {
				obj->QWidget((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ool */
		zval* z_var_ool_0;   // default: 
		zval* z_var_ool_1;   // default: 
		long var_ool_2;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);

			QString tmp_ool_0(var_ool_0->metaObject()->className());
			QString tmp_ool_1(var_ool_1->metaObject()->className());
			
			if(tmp_ool_0 == "QWidgetPrivate&" && tmp_ool_1 == "QWidget*") {
				obj->QWidget((QWidgetPrivate&) var_ool_0, (QWidget*) var_ool_1, (Qt::WFlags) var_ool_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setInputContext
 *    flags:    
 */
ZEND_METHOD(QWidget, setInputContext){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QInputContext*") {
				obj->setInputContext((QInputContext*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  unsetLayoutDirection
 *    flags:    
 */
ZEND_METHOD(QWidget, unsetLayoutDirection){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->unsetLayoutDirection();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  sizeIncrement
 *    flags:    c
 */
ZEND_METHOD(QWidget, sizeIncrement){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeIncrement();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setVisible
 *    flags:    vl
 */
ZEND_METHOD(QWidget, setVisible){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setVisible((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mouseGrabber
 *    flags:    s
 */
ZEND_METHOD(QWidget, mouseGrabber){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->mouseGrabber();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QWidget, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  resetInputContext
 *    flags:    
 */
ZEND_METHOD(QWidget, resetInputContext){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->resetInputContext();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isFullScreen
 *    flags:    c
 */
ZEND_METHOD(QWidget, isFullScreen){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isFullScreen());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mapToGlobal
 *    flags:    c
 */
ZEND_METHOD(QWidget, mapToGlobal){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->mapToGlobal((const QPoint&) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  move
 *    flags:    
 */
ZEND_METHOD(QWidget, move){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->move((const QPoint&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->move((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mapFromGlobal
 *    flags:    c
 */
ZEND_METHOD(QWidget, mapFromGlobal){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->mapFromGlobal((const QPoint&) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QWidget, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setUpdatesEnabled
 *    flags:    
 */
ZEND_METHOD(QWidget, setUpdatesEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setUpdatesEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setSizeIncrement
 *    flags:    
 */
ZEND_METHOD(QWidget, setSizeIncrement){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QSize&") {
				obj->setSizeIncrement((const QSize&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setSizeIncrement((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  grabMouse
 *    flags:    
 */
ZEND_METHOD(QWidget, grabMouse){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->grabMouse();
			RETURN_NULL();
	}

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QCursor&") {
				obj->grabMouse((const QCursor&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  layout
 *    flags:    c
 */
ZEND_METHOD(QWidget, layout){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QLayout * return_object = (QLayout *) obj->layout();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  mapFrom
 *    flags:    c
 */
ZEND_METHOD(QWidget, mapFrom){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QWidget*") {
				RETURN_LONG(obj->mapFrom((QWidget*) var_ol_0, (const QPoint&) var_ol_1));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowFlags
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowFlags){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::WindowFlags return_object = (Qt::WindowFlags) obj->windowFlags();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isModal
 *    flags:    c
 */
ZEND_METHOD(QWidget, isModal){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isModal());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  unsetCursor
 *    flags:    
 */
ZEND_METHOD(QWidget, unsetCursor){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->unsetCursor();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setLayoutDirection
 *    flags:    
 */
ZEND_METHOD(QWidget, setLayoutDirection){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setLayoutDirection((Qt::LayoutDirection) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  maximumHeight
 *    flags:    c
 */
ZEND_METHOD(QWidget, maximumHeight){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->maximumHeight());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  frameGeometry
 *    flags:    c
 */
ZEND_METHOD(QWidget, frameGeometry){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->frameGeometry();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  handle
 *    flags:    c
 */
ZEND_METHOD(QWidget, handle){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::HANDLE return_object = (Qt::HANDLE) obj->handle();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  lower
 *    flags:    l
 */
ZEND_METHOD(QWidget, lower){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->lower();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowTitle
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowTitle){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setWindowTitle((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowState
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowState){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setWindowState((Qt::WindowStates) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  scroll
 *    flags:    
 */
ZEND_METHOD(QWidget, scroll){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->scroll((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "const QRect&") {
				obj->scroll((int) var_llo_0, (int) var_llo_1, (const QRect&) var_llo_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  sizePolicy
 *    flags:    c
 */
ZEND_METHOD(QWidget, sizePolicy){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSizePolicy return_object = (QSizePolicy) obj->sizePolicy();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  width
 *    flags:    c
 */
ZEND_METHOD(QWidget, width){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->width());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setHidden
 *    flags:    l
 */
ZEND_METHOD(QWidget, setHidden){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setHidden((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  find
 *    flags:    s
 */
ZEND_METHOD(QWidget, find){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "WId") {
				QWidget * return_object = (QWidget *) obj->find((WId) var_o_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QWidget, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  size
 *    flags:    c
 */
ZEND_METHOD(QWidget, size){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->size();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  activateWindow
 *    flags:    
 */
ZEND_METHOD(QWidget, activateWindow){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->activateWindow();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setToolTip
 *    flags:    
 */
ZEND_METHOD(QWidget, setToolTip){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setToolTip((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  inputMethodQuery
 *    flags:    cv
 */
ZEND_METHOD(QWidget, inputMethodQuery){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			QVariant return_object = (QVariant) obj->inputMethodQuery((Qt::InputMethodQuery) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setParent
 *    flags:    
 */
ZEND_METHOD(QWidget, setParent){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				obj->setParent((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QWidget*") {
				obj->setParent((QWidget*) var_ol_0, (Qt::WFlags) var_ol_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isWindowModified
 *    flags:    c
 */
ZEND_METHOD(QWidget, isWindowModified){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isWindowModified());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  testAttribute
 *    flags:    c
 */
ZEND_METHOD(QWidget, testAttribute){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_BOOL(obj->testAttribute((Qt::WidgetAttribute) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  minimumSizeHint
 *    flags:    cv
 */
ZEND_METHOD(QWidget, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  heightForWidth
 *    flags:    cv
 */
ZEND_METHOD(QWidget, heightForWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->heightForWidth((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  pos
 *    flags:    c
 */
ZEND_METHOD(QWidget, pos){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->pos());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isWindow
 *    flags:    c
 */
ZEND_METHOD(QWidget, isWindow){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isWindow());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  create
 *    flags:    
 */
ZEND_METHOD(QWidget, create){

	if (ZEND_NUM_ARGS() == 3){
		/* obb */
		zval* z_var_obb_0;   // default: 0
		bool var_obb_1;   // _default: true
		bool var_obb_2;   // _default: true

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o|b|b|", &z_var_obb_0, &var_obb_1, &var_obb_2) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_obb_0 = (QObject*) php_qt_fetch(z_var_obb_0);

			QString tmp_obb_0(var_obb_0->metaObject()->className());
			
			if(tmp_obb_0 == "WId") {
				obj->create((WId) var_obb_0, (bool) var_obb_1, (bool) var_obb_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFocusPolicy
 *    flags:    
 */
ZEND_METHOD(QWidget, setFocusPolicy){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setFocusPolicy((Qt::FocusPolicy) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  getContentsMargins
 *    flags:    c
 */
ZEND_METHOD(QWidget, getContentsMargins){

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->getContentsMargins((int*) var_llll_0 ,(int*) var_llll_1 ,(int*) var_llll_2 ,(int*) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowTitle
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowTitle){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->windowTitle();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  style
 *    flags:    c
 */
ZEND_METHOD(QWidget, style){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QStyle * return_object = (QStyle *) obj->style();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  windowState
 *    flags:    c
 */
ZEND_METHOD(QWidget, windowState){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::WindowStates return_object = (Qt::WindowStates) obj->windowState();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  frameSize
 *    flags:    c
 */
ZEND_METHOD(QWidget, frameSize){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->frameSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setAccessibleName
 *    flags:    
 */
ZEND_METHOD(QWidget, setAccessibleName){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setAccessibleName((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setAcceptDrops
 *    flags:    
 */
ZEND_METHOD(QWidget, setAcceptDrops){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setAcceptDrops((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setSizePolicy
 *    flags:    
 */
ZEND_METHOD(QWidget, setSizePolicy){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QSizePolicy") {
				obj->setSizePolicy((QSizePolicy) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "QSizePolicy::Policy" && tmp_oo_1 == "QSizePolicy::Policy") {
				obj->setSizePolicy((QSizePolicy::Policy) var_oo_0, (QSizePolicy::Policy) var_oo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  languageChange
 *    flags:    v
 */
ZEND_METHOD(QWidget, languageChange){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->languageChange();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  removeAction
 *    flags:    
 */
ZEND_METHOD(QWidget, removeAction){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QAction*") {
				obj->removeAction((QAction*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  hasFocus
 *    flags:    c
 */
ZEND_METHOD(QWidget, hasFocus){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasFocus());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  showFullScreen
 *    flags:    l
 */
ZEND_METHOD(QWidget, showFullScreen){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->showFullScreen();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QWidget, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "QVariant*") {
				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMouseTracking
 *    flags:    
 */
ZEND_METHOD(QWidget, setMouseTracking){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMouseTracking((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  clearMask
 *    flags:    
 */
ZEND_METHOD(QWidget, clearMask){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->clearMask();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  showMaximized
 *    flags:    l
 */
ZEND_METHOD(QWidget, showMaximized){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->showMaximized();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  devType
 *    flags:    c
 */
ZEND_METHOD(QWidget, devType){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->devType());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  font
 *    flags:    c
 */
ZEND_METHOD(QWidget, font){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			const QFont & return_object = (const QFont &) obj->font();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  stackUnder
 *    flags:    
 */
ZEND_METHOD(QWidget, stackUnder){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				obj->stackUnder((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMinimumSize
 *    flags:    
 */
ZEND_METHOD(QWidget, setMinimumSize){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QSize&") {
				obj->setMinimumSize((const QSize&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMinimumSize((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setDisabled
 *    flags:    l
 */
ZEND_METHOD(QWidget, setDisabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setDisabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  enabledChange
 *    flags:    v
 */
ZEND_METHOD(QWidget, enabledChange){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->enabledChange((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  show
 *    flags:    l
 */
ZEND_METHOD(QWidget, show){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->show();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  underMouse
 *    flags:    c
 */
ZEND_METHOD(QWidget, underMouse){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->underMouse());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowIcon
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowIcon){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QIcon&") {
				obj->setWindowIcon((const QIcon&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  grabKeyboard
 *    flags:    
 */
ZEND_METHOD(QWidget, grabKeyboard){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->grabKeyboard();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  raise
 *    flags:    l
 */
ZEND_METHOD(QWidget, raise){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->raise();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QWidget, event){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QEvent*") {
				RETURN_BOOL(obj->event((QEvent*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWhatsThis
 *    flags:    
 */
ZEND_METHOD(QWidget, setWhatsThis){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setWhatsThis((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setGeometry
 *    flags:    
 */
ZEND_METHOD(QWidget, setGeometry){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->setGeometry((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setGeometry((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  contextMenuPolicy
 *    flags:    c
 */
ZEND_METHOD(QWidget, contextMenuPolicy){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			Qt::ContextMenuPolicy return_object = (Qt::ContextMenuPolicy) obj->contextMenuPolicy();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  resize
 *    flags:    
 */
ZEND_METHOD(QWidget, resize){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QSize&") {
				obj->resize((const QSize&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->resize((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isLeftToRight
 *    flags:    c
 */
ZEND_METHOD(QWidget, isLeftToRight){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isLeftToRight());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setWindowFlags
 *    flags:    
 */
ZEND_METHOD(QWidget, setWindowFlags){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setWindowFlags((Qt::WindowFlags) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  baseSize
 *    flags:    c
 */
ZEND_METHOD(QWidget, baseSize){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->baseSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setLayout
 *    flags:    
 */
ZEND_METHOD(QWidget, setLayout){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QLayout*") {
				obj->setLayout((QLayout*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMaximumHeight
 *    flags:    
 */
ZEND_METHOD(QWidget, setMaximumHeight){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMaximumHeight((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  showNormal
 *    flags:    l
 */
ZEND_METHOD(QWidget, showNormal){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->showNormal();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  insertAction
 *    flags:    
 */
ZEND_METHOD(QWidget, insertAction){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "QAction*" && tmp_oo_1 == "QAction*") {
				obj->insertAction((QAction*) var_oo_0, (QAction*) var_oo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  window
 *    flags:    c
 */
ZEND_METHOD(QWidget, window){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->window();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  paintEngine
 *    flags:    c
 */
ZEND_METHOD(QWidget, paintEngine){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QPaintEngine * return_object = (QPaintEngine *) obj->paintEngine();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  minimumHeight
 *    flags:    c
 */
ZEND_METHOD(QWidget, minimumHeight){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->minimumHeight());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  x
 *    flags:    c
 */
ZEND_METHOD(QWidget, x){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->x());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  releaseShortcut
 *    flags:    
 */
ZEND_METHOD(QWidget, releaseShortcut){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->releaseShortcut((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setStatusTip
 *    flags:    
 */
ZEND_METHOD(QWidget, setStatusTip){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				obj->setStatusTip((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setBaseSize
 *    flags:    
 */
ZEND_METHOD(QWidget, setBaseSize){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QSize&") {
				obj->setBaseSize((const QSize&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setBaseSize((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  rect
 *    flags:    c
 */
ZEND_METHOD(QWidget, rect){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->rect();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  addAction
 *    flags:    
 */
ZEND_METHOD(QWidget, addAction){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QAction*") {
				obj->addAction((QAction*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  minimumSize
 *    flags:    c
 */
ZEND_METHOD(QWidget, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  sizeHint
 *    flags:    cv
 */
ZEND_METHOD(QWidget, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setFocus
 *    flags:    
 */
ZEND_METHOD(QWidget, setFocus){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->setFocus();
			RETURN_NULL();
	}

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setFocus((Qt::FocusReason) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  destroy
 *    flags:    
 */
ZEND_METHOD(QWidget, destroy){

	if (ZEND_NUM_ARGS() == 2){
		/* bb */
		bool var_bb_0;   // _default: true
		bool var_bb_1;   // _default: true

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|b|", &var_bb_0, &var_bb_1) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->destroy((bool) var_bb_0 ,(bool) var_bb_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isVisible
 *    flags:    c
 */
ZEND_METHOD(QWidget, isVisible){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isVisible());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  accessibleName
 *    flags:    c
 */
ZEND_METHOD(QWidget, accessibleName){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->accessibleName();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  minimumWidth
 *    flags:    c
 */
ZEND_METHOD(QWidget, minimumWidth){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_LONG(obj->minimumWidth());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isEnabled
 *    flags:    c
 */
ZEND_METHOD(QWidget, isEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEnabled());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  keyboardGrabber
 *    flags:    s
 */
ZEND_METHOD(QWidget, keyboardGrabber){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->keyboardGrabber();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  overrideWindowState
 *    flags:    
 */
ZEND_METHOD(QWidget, overrideWindowState){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->overrideWindowState((Qt::WindowStates) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  setMinimumHeight
 *    flags:    
 */
ZEND_METHOD(QWidget, setMinimumHeight){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QWidget *obj = (QWidget*) PHP_QT_FETCH();

			
			obj->setMinimumHeight((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  isMaximized
 *    flags:    c
 */
ZEND_METHOD(QWidget, isMaximized){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isMaximized());
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  parentWidget
 *    flags:    c
 */
ZEND_METHOD(QWidget, parentWidget){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->parentWidget();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  whatsThis
 *    flags:    c
 */
ZEND_METHOD(QWidget, whatsThis){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QString return_object = (QString) obj->whatsThis();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  maximumSize
 *    flags:    c
 */
ZEND_METHOD(QWidget, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->maximumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWidget_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWidget */
/*
 *    function  showMinimized
 *    flags:    l
 */
ZEND_METHOD(QWidget, showMinimized){
	if (ZEND_NUM_ARGS() == 0){
			QWidget *obj = (QWidget*) PHP_QT_FETCH();
			obj->showMinimized();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QWidget);

