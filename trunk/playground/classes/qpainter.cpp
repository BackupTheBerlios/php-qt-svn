/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPainter.cpp - QPainter PHP implementation.
 * begin           : Mon Jan  9 00:39:35 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QPainter>
#include "../php_qt.h"



/*		public enumRenderHint:long {
			Antialiasing = 0x01,
			TextAntialiasing = 0x02,
			SmoothPixmapTransform = 0x04
		}
*/

/*		public enumCompositionMode:long {
			CompositionMode = 0,
			CompositionMode = 1,
			CompositionMode = 2,
			CompositionMode = 3,
			CompositionMode = 4,
			CompositionMode = 5,
			CompositionMode = 6,
			CompositionMode = 7,
			CompositionMode = 8,
			CompositionMode = 9,
			CompositionMode = 10,
			CompositionMode = 11
		}
*/
/*********************************
 *    class     QPainter */
/*
 *    function  eraseRect
 *    flags:    
 */
ZEND_METHOD(QPainter, eraseRect){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRectF& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRectF&") {
				obj->eraseRect((const QRectF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QRect&") {
				obj->eraseRect((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		/* int x, int y, int w, int h,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->eraseRect((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipPath
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipPath){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: Qt::ReplaceClip

		/* const QPainterPath& path, int op,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setClipPath((const QPainterPath&) var_ll_0 ,(Qt::ClipOperation) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  matrixEnabled
 *    flags:    c
 */
ZEND_METHOD(QPainter, matrixEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->matrixEnabled());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  shear
 *    flags:    
 */
ZEND_METHOD(QPainter, shear){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* qreal sh, qreal sv,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "qreal" && tmp_oo_1 == "qreal") {
				obj->shear((qreal) var_oo_0, (qreal) var_oo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  save
 *    flags:    
 */
ZEND_METHOD(QPainter, save){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->save();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  resetMatrix
 *    flags:    
 */
ZEND_METHOD(QPainter, resetMatrix){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->resetMatrix();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  initFrom
 *    flags:    
 */
ZEND_METHOD(QPainter, initFrom){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QWidget* widget,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QWidget*") {
				obj->initFrom((const QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fontInfo
 *    flags:    c
 */
ZEND_METHOD(QPainter, fontInfo){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QFontInfo return_object = (QFontInfo) obj->fontInfo();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setLayoutDirection
 *    flags:    
 */
ZEND_METHOD(QPainter, setLayoutDirection){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int direction,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setLayoutDirection((Qt::LayoutDirection) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBrushOrigin
 *    flags:    
 */
ZEND_METHOD(QPainter, setBrushOrigin){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* const QPoint& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->setBrushOrigin((const QPoint&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* int x, int y,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setBrushOrigin((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  pen
 *    flags:    c
 */
ZEND_METHOD(QPainter, pen){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			const QPen & return_object = (const QPen &) obj->pen();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRects
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRects){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* const QRectF* rects, int rectCount,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QRectF*") {
				obj->drawRects((const QRectF*) var_ol_0, (int) var_ol_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPath
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPath){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* const QPainterPath& path,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->drawPath((const QPainterPath&) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fillPath
 *    flags:    
 */
ZEND_METHOD(QPainter, fillPath){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* const QPainterPath& path, const QBrush& brush,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "const QBrush&") {
				obj->fillPath((const QPainterPath&) var_lo_0, (const QBrush&) var_lo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  rotate
 *    flags:    
 */
ZEND_METHOD(QPainter, rotate){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* qreal a,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "qreal") {
				obj->rotate((qreal) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPie
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPie){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 
		long var_oll_2;    // default: 

		/* const QRectF& rect, int a, int alen,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "const QRectF&") {
				obj->drawPie((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
			RETURN_NULL();
			}			
			if(tmp_oll_0 == "const QRect&") {
				obj->drawPie((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  translate
 *    flags:    
 */
ZEND_METHOD(QPainter, translate){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* const QPointF& offset,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->translate((const QPointF&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* qreal dx, qreal dy,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "qreal" && tmp_oo_1 == "qreal") {
				obj->translate((qreal) var_oo_0, (qreal) var_oo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setCompositionMode
 *    flags:    
 */
ZEND_METHOD(QPainter, setCompositionMode){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* CompositionMode mode,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "CompositionMode") {
				obj->setCompositionMode((CompositionMode) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setWindow
 *    flags:    
 */
ZEND_METHOD(QPainter, setWindow){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRect& window,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->setWindow((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		/* int x, int y, int w, int h,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setWindow((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fontMetrics
 *    flags:    c
 */
ZEND_METHOD(QPainter, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QFontMetrics return_object = (QFontMetrics) obj->fontMetrics();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPixmap
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPixmap){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QRect& r, const QPixmap& pm,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QRect&" && tmp_oo_1 == "const QPixmap&") {
				obj->drawPixmap((const QRect&) var_oo_0, (const QPixmap&) var_oo_1);
			RETURN_NULL();
			}
		}
		/* lo */
		long var_lo_2;    // default: 
		zval* z_var_lo_3;   // default: 

		/* const QPointF& p, const QPixmap& pm,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);

			QString tmp_lo_0(var_lo_3->metaObject()->className());
			
			if(tmp_lo_0 == "const QPixmap&") {
				obj->drawPixmap((const QPointF&) var_lo_2, (const QPixmap&) var_lo_3);
			RETURN_NULL();
			}			
			if(tmp_lo_0 == "const QPixmap&") {
				obj->drawPixmap((const QPoint&) var_lo_4, (const QPixmap&) var_lo_3);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* loo */
		long var_loo_0;    // default: 
		zval* z_var_loo_1;   // default: 
		zval* z_var_loo_2;   // default: 

		/* const QPointF& p, const QPixmap& pm, const QRectF& sr,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"loo", &var_loo_0, &z_var_loo_1, &z_var_loo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_loo_1 = (QObject*) php_qt_fetch(z_var_loo_1);
			QObject* var_loo_2 = (QObject*) php_qt_fetch(z_var_loo_2);

			QString tmp_loo_0(var_loo_1->metaObject()->className());
			QString tmp_loo_1(var_loo_2->metaObject()->className());
			
			if(tmp_loo_0 == "const QPixmap&" && tmp_loo_1 == "const QRectF&") {
				obj->drawPixmap((const QPointF&) var_loo_0, (const QPixmap&) var_loo_1, (const QRectF&) var_loo_2);
			RETURN_NULL();
			}			
			if(tmp_loo_0 == "const QPixmap&" && tmp_loo_1 == "const QRect&") {
				obj->drawPixmap((const QPoint&) var_loo_3, (const QPixmap&) var_loo_1, (const QRect&) var_loo_2);
			RETURN_NULL();
			}
		}
		/* ooo */
		zval* z_var_ooo_6;   // default: 
		zval* z_var_ooo_7;   // default: 
		zval* z_var_ooo_8;   // default: 

		/* const QRectF& targetRect, const QPixmap& pixmap, const QRectF& sourceRect,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_6, &z_var_ooo_7, &z_var_ooo_8) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ooo_6 = (QObject*) php_qt_fetch(z_var_ooo_6);
			QObject* var_ooo_7 = (QObject*) php_qt_fetch(z_var_ooo_7);
			QObject* var_ooo_8 = (QObject*) php_qt_fetch(z_var_ooo_8);

			QString tmp_ooo_0(var_ooo_6->metaObject()->className());
			QString tmp_ooo_1(var_ooo_7->metaObject()->className());
			QString tmp_ooo_2(var_ooo_8->metaObject()->className());
			
			if(tmp_ooo_0 == "const QRectF&" && tmp_ooo_1 == "const QPixmap&" && tmp_ooo_2 == "const QRectF&") {
				obj->drawPixmap((const QRectF&) var_ooo_6, (const QPixmap&) var_ooo_7, (const QRectF&) var_ooo_8);
			RETURN_NULL();
			}
		}
		/* llo */
		long var_llo_9;    // default: 
		long var_llo_10;    // default: 
		zval* z_var_llo_11;   // default: 

		/* int x, int y, const QPixmap& pm,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);

			QString tmp_llo_0(var_llo_11->metaObject()->className());
			
			if(tmp_llo_0 == "const QPixmap&") {
				obj->drawPixmap((int) var_llo_9, (int) var_llo_10, (const QPixmap&) var_llo_11);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* llllo */
		long var_llllo_0;    // default: 
		long var_llllo_1;    // default: 
		long var_llllo_2;    // default: 
		long var_llllo_3;    // default: 
		zval* z_var_llllo_4;   // default: 

		/* int x, int y, int w, int h, const QPixmap& pm,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);

			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
			
			if(tmp_llllo_0 == "const QPixmap&") {
				obj->drawPixmap((int) var_llllo_0, (int) var_llllo_1, (int) var_llllo_2, (int) var_llllo_3, (const QPixmap&) var_llllo_4);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPolyline
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPolyline){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QPolygonF& polyline,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QPolygonF&") {
				obj->drawPolyline((const QPolygonF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QPolygon&") {
				obj->drawPolyline((const QPolygon&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* const QPointF* points, int pointCount,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawPolyline((const QPointF*) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  deviceMatrix
 *    flags:    c
 */
ZEND_METHOD(QPainter, deviceMatrix){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			const QMatrix & return_object = (const QMatrix &) obj->deviceMatrix();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawLine
 *    flags:    
 */
ZEND_METHOD(QPainter, drawLine){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QLineF& line,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QLineF&") {
				obj->drawLine((const QLineF&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* const QPoint& p1, const QPoint& p2,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawLine((const QPoint&) var_ll_0 ,(const QPoint&) var_ll_1);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		/* int x1, int y1, int x2, int y2,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->drawLine((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fillRect
 *    flags:    
 */
ZEND_METHOD(QPainter, fillRect){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QRectF& , const QBrush& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QRectF&" && tmp_oo_1 == "const QBrush&") {
				obj->fillRect((const QRectF&) var_oo_0, (const QBrush&) var_oo_1);
			RETURN_NULL();
			}			
			if(tmp_oo_0 == "const QRect&" && tmp_oo_1 == "const QBrush&") {
				obj->fillRect((const QRect&) var_oo_0, (const QBrush&) var_oo_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* llllo */
		long var_llllo_0;    // default: 
		long var_llllo_1;    // default: 
		long var_llllo_2;    // default: 
		long var_llllo_3;    // default: 
		zval* z_var_llllo_4;   // default: 

		/* int x, int y, int w, int h, const QBrush& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llllo", &var_llllo_0, &var_llllo_1, &var_llllo_2, &var_llllo_3, &z_var_llllo_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_llllo_4 = (QObject*) php_qt_fetch(z_var_llllo_4);

			QString tmp_llllo_0(var_llllo_4->metaObject()->className());
			
			if(tmp_llllo_0 == "const QBrush&") {
				obj->fillRect((int) var_llllo_0, (int) var_llllo_1, (int) var_llllo_2, (int) var_llllo_3, (const QBrush&) var_llllo_4);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  boundingRect
 *    flags:    
 */
ZEND_METHOD(QPainter, boundingRect){

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* z_var_ooo_0;   // default: 
		zval* z_var_ooo_1;   // default: 
		zval* z_var_ooo_2;   // default: QTextOption()

		/* const QRectF& rect, const QString& text, const QTextOption& o,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);

			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
			
			if(tmp_ooo_0 == "const QRectF&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QTextOption&") {
				obj->boundingRect((const QRectF&) var_ooo_0, (const QString&) var_ooo_1, (const QTextOption&) var_ooo_2);
			RETURN_NULL();
			}
		}
		/* olo */
		zval* z_var_olo_3;   // default: 
		long var_olo_4;    // default: 
		zval* z_var_olo_5;   // default: 

		/* const QRectF& rect, int flags, const QString& text,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"olo", &z_var_olo_3, &var_olo_4, &z_var_olo_5) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_olo_3 = (QObject*) php_qt_fetch(z_var_olo_3);
			QObject* var_olo_5 = (QObject*) php_qt_fetch(z_var_olo_5);

			QString tmp_olo_0(var_olo_3->metaObject()->className());
			QString tmp_olo_1(var_olo_5->metaObject()->className());
			
			if(tmp_olo_0 == "const QRectF&" && tmp_olo_1 == "const QString&") {
				QRect return_object = (QRect) obj->boundingRect((const QRectF&) var_olo_3, (int) var_olo_4, (const QString&) var_olo_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_olo_0 == "const QRect&" && tmp_olo_1 == "const QString&") {
				QRect return_object = (QRect) obj->boundingRect((const QRect&) var_olo_3, (int) var_olo_7, (const QString&) var_olo_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipRect
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipRect){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::ReplaceClip

		/* const QRectF& , int op,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QRectF&") {
				obj->setClipRect((const QRectF&) var_ol_0, (Qt::ClipOperation) var_ol_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* lllll */
		long var_lllll_0;    // default: 
		long var_lllll_1;    // default: 
		long var_lllll_2;    // default: 
		long var_lllll_3;    // default: 
		long var_lllll_4;    // default: Qt::ReplaceClip

		/* int x, int y, int w, int h, int op,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lllll|", &var_lllll_0, &var_lllll_1, &var_lllll_2, &var_lllll_3, &var_lllll_4) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setClipRect((int) var_lllll_0 ,(int) var_lllll_1 ,(int) var_lllll_2 ,(int) var_lllll_3 ,(Qt::ClipOperation) var_lllll_4);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawImage
 *    flags:    
 */
ZEND_METHOD(QPainter, drawImage){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QRectF& r, const QImage& image,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QRectF&" && tmp_oo_1 == "const QImage&") {
				obj->drawImage((const QRectF&) var_oo_0, (const QImage&) var_oo_1);
			RETURN_NULL();
			}
		}
		/* lo */
		long var_lo_2;    // default: 
		zval* z_var_lo_3;   // default: 

		/* const QPointF& p, const QImage& image,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);

			QString tmp_lo_0(var_lo_3->metaObject()->className());
			
			if(tmp_lo_0 == "const QImage&") {
				obj->drawImage((const QPointF&) var_lo_2, (const QImage&) var_lo_3);
			RETURN_NULL();
			}			
			if(tmp_lo_0 == "const QImage&") {
				obj->drawImage((const QPoint&) var_lo_4, (const QImage&) var_lo_3);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* oool */
		zval* z_var_oool_0;   // default: 
		zval* z_var_oool_1;   // default: 
		zval* z_var_oool_2;   // default: 
		long var_oool_3;    // default: Qt::AutoColor

		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, int flags,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oool|", &z_var_oool_0, &z_var_oool_1, &z_var_oool_2, &var_oool_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oool_0 = (QObject*) php_qt_fetch(z_var_oool_0);
			QObject* var_oool_1 = (QObject*) php_qt_fetch(z_var_oool_1);
			QObject* var_oool_2 = (QObject*) php_qt_fetch(z_var_oool_2);

			QString tmp_oool_0(var_oool_0->metaObject()->className());
			QString tmp_oool_1(var_oool_1->metaObject()->className());
			QString tmp_oool_2(var_oool_2->metaObject()->className());
			
			if(tmp_oool_0 == "const QRectF&" && tmp_oool_1 == "const QImage&" && tmp_oool_2 == "const QRectF&") {
				obj->drawImage((const QRectF&) var_oool_0, (const QImage&) var_oool_1, (const QRectF&) var_oool_2, (Qt::ImageConversionFlags) var_oool_3);
			RETURN_NULL();
			}
		}
		/* lool */
		long var_lool_4;    // default: 
		zval* z_var_lool_5;   // default: 
		zval* z_var_lool_6;   // default: 
		long var_lool_7;    // default: Qt::AutoColor

		/* const QPointF& p, const QImage& image, const QRectF& sr, int flags,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lool|", &var_lool_4, &z_var_lool_5, &z_var_lool_6, &var_lool_7) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lool_5 = (QObject*) php_qt_fetch(z_var_lool_5);
			QObject* var_lool_6 = (QObject*) php_qt_fetch(z_var_lool_6);

			QString tmp_lool_0(var_lool_5->metaObject()->className());
			QString tmp_lool_1(var_lool_6->metaObject()->className());
			
			if(tmp_lool_0 == "const QImage&" && tmp_lool_1 == "const QRectF&") {
				obj->drawImage((const QPointF&) var_lool_4, (const QImage&) var_lool_5, (const QRectF&) var_lool_6, (Qt::ImageConversionFlags) var_lool_7);
			RETURN_NULL();
			}			
			if(tmp_lool_0 == "const QImage&" && tmp_lool_1 == "const QRect&") {
				obj->drawImage((const QPoint&) var_lool_8, (const QImage&) var_lool_5, (const QRect&) var_lool_6, (Qt::ImageConversionFlags) var_lool_11);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawTiledPixmap
 *    flags:    
 */
ZEND_METHOD(QPainter, drawTiledPixmap){

	if (ZEND_NUM_ARGS() == 3){
		/* ool */
		zval* z_var_ool_0;   // default: 
		zval* z_var_ool_1;   // default: 
		long var_ool_2;    // default: QPointF()

		/* const QRectF& rect, const QPixmap& pm, const QPointF& offset,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);

			QString tmp_ool_0(var_ool_0->metaObject()->className());
			QString tmp_ool_1(var_ool_1->metaObject()->className());
			
			if(tmp_ool_0 == "const QRectF&" && tmp_ool_1 == "const QPixmap&") {
				obj->drawTiledPixmap((const QRectF&) var_ool_0, (const QPixmap&) var_ool_1, (const QPointF&) var_ool_2);
			RETURN_NULL();
			}			
			if(tmp_ool_0 == "const QRect&" && tmp_ool_1 == "const QPixmap&") {
				obj->drawTiledPixmap((const QRect&) var_ool_0, (const QPixmap&) var_ool_1, (const QPoint&) var_ool_5);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  layoutDirection
 *    flags:    c
 */
ZEND_METHOD(QPainter, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			Qt::LayoutDirection return_object = (Qt::LayoutDirection) obj->layoutDirection();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  background
 *    flags:    c
 */
ZEND_METHOD(QPainter, background){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			const QBrush & return_object = (const QBrush &) obj->background();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPolygon
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPolygon){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::OddEvenFill

		/* const QPolygonF& polygon, int fillRule,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QPolygonF&") {
				obj->drawPolygon((const QPolygonF&) var_ol_0, (Qt::FillRule) var_ol_1);
			RETURN_NULL();
			}			
			if(tmp_ol_0 == "const QPolygon&") {
				obj->drawPolygon((const QPolygon&) var_ol_0, (Qt::FillRule) var_ol_3);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* lll */
		long var_lll_0;    // default: 
		long var_lll_1;    // default: 
		long var_lll_2;    // default: Qt::OddEvenFill

		/* const QPointF* points, int pointCount, int fillRule,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawPolygon((const QPointF*) var_lll_0 ,(int) var_lll_1 ,(Qt::FillRule) var_lll_2);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  device
 *    flags:    c
 */
ZEND_METHOD(QPainter, device){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QPaintDevice * return_object = (QPaintDevice *) obj->device();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipRegion
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipRegion){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::ReplaceClip

		/* const QRegion& , int op,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QRegion&") {
				obj->setClipRegion((const QRegion&) var_ol_0, (Qt::ClipOperation) var_ol_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  restoreRedirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, restoreRedirected){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* const QPaintDevice* device,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->restoreRedirected((const QPaintDevice*) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setMatrixEnabled
 *    flags:    
 */
ZEND_METHOD(QPainter, setMatrixEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool enabled,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setMatrixEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPoints
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPoints){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QPolygonF& points,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QPolygonF&") {
				obj->drawPoints((const QPolygonF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QPolygon&") {
				obj->drawPoints((const QPolygon&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* const QPointF* points, int pointCount,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawPoints((const QPointF*) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRoundRect
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRoundRect){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 25
		long var_oll_2;    // default: 25

		/* const QRectF& r, int xround, int yround,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "const QRectF&") {
				obj->drawRoundRect((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
			RETURN_NULL();
			}			
			if(tmp_oll_0 == "const QRect&") {
				obj->drawRoundRect((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawConvexPolygon
 *    flags:    
 */
ZEND_METHOD(QPainter, drawConvexPolygon){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QPolygonF& polygon,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QPolygonF&") {
				obj->drawConvexPolygon((const QPolygonF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QPolygon&") {
				obj->drawConvexPolygon((const QPolygon&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* const QPointF* points, int pointCount,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawConvexPolygon((const QPointF*) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setMatrix
 *    flags:    
 */
ZEND_METHOD(QPainter, setMatrix){

	if (ZEND_NUM_ARGS() == 2){
		/* ob */
		zval* z_var_ob_0;   // default: 
		bool var_ob_1;   // _default: false

		/* const QMatrix& matrix, bool combine,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob|", &z_var_ob_0, &var_ob_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ob_0 = (QObject*) php_qt_fetch(z_var_ob_0);

			QString tmp_ob_0(var_ob_0->metaObject()->className());
			
			if(tmp_ob_0 == "const QMatrix&") {
				obj->setMatrix((const QMatrix&) var_ob_0, (bool) var_ob_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPicture
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPicture){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* const QPointF& p, const QPicture& picture,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "const QPicture&") {
				obj->drawPicture((const QPointF&) var_lo_0, (const QPicture&) var_lo_1);
			RETURN_NULL();
			}			
			if(tmp_lo_0 == "const QPicture&") {
				obj->drawPicture((const QPoint&) var_lo_2, (const QPicture&) var_lo_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		/* int x, int y, const QPicture& picture,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "const QPicture&") {
				obj->drawPicture((int) var_llo_0, (int) var_llo_1, (const QPicture&) var_llo_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  restore
 *    flags:    
 */
ZEND_METHOD(QPainter, restore){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->restore();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  font
 *    flags:    c
 */
ZEND_METHOD(QPainter, font){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			const QFont & return_object = (const QFont &) obj->font();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  matrix
 *    flags:    c
 */
ZEND_METHOD(QPainter, matrix){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			const QMatrix & return_object = (const QMatrix &) obj->matrix();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  viewport
 *    flags:    c
 */
ZEND_METHOD(QPainter, viewport){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->viewport();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  viewTransformEnabled
 *    flags:    c
 */
ZEND_METHOD(QPainter, viewTransformEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->viewTransformEnabled());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawText
 *    flags:    
 */
ZEND_METHOD(QPainter, drawText){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* const QPointF& p, const QString& s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "const QString&") {
				obj->drawText((const QPointF&) var_lo_0, (const QString&) var_lo_1);
			RETURN_NULL();
			}			
			if(tmp_lo_0 == "const QString&") {
				obj->drawText((const QPoint&) var_lo_2, (const QString&) var_lo_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* z_var_ooo_0;   // default: 
		zval* z_var_ooo_1;   // default: 
		zval* z_var_ooo_2;   // default: QTextOption()

		/* const QRectF& r, const QString& text, const QTextOption& o,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo|", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);

			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
			
			if(tmp_ooo_0 == "const QRectF&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QTextOption&") {
				obj->drawText((const QRectF&) var_ooo_0, (const QString&) var_ooo_1, (const QTextOption&) var_ooo_2);
			RETURN_NULL();
			}
		}
		/* llo */
		long var_llo_3;    // default: 
		long var_llo_4;    // default: 
		zval* z_var_llo_5;   // default: 

		/* int x, int y, const QString& s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_3, &var_llo_4, &z_var_llo_5) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_llo_5 = (QObject*) php_qt_fetch(z_var_llo_5);

			QString tmp_llo_0(var_llo_5->metaObject()->className());
			
			if(tmp_llo_0 == "const QString&") {
				obj->drawText((int) var_llo_3, (int) var_llo_4, (const QString&) var_llo_5);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* oloo */
		zval* z_var_oloo_0;   // default: 
		long var_oloo_1;    // default: 
		zval* z_var_oloo_2;   // default: 
		zval* z_var_oloo_3;   // default: 0

		/* const QRectF& r, int flags, const QString& text, QRectF* br,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oloo|", &z_var_oloo_0, &var_oloo_1, &z_var_oloo_2, &z_var_oloo_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oloo_0 = (QObject*) php_qt_fetch(z_var_oloo_0);
			QObject* var_oloo_2 = (QObject*) php_qt_fetch(z_var_oloo_2);
			QObject* var_oloo_3 = (QObject*) php_qt_fetch(z_var_oloo_3);

			QString tmp_oloo_0(var_oloo_0->metaObject()->className());
			QString tmp_oloo_1(var_oloo_2->metaObject()->className());
			QString tmp_oloo_2(var_oloo_3->metaObject()->className());
			
			if(tmp_oloo_0 == "const QRectF&" && tmp_oloo_1 == "const QString&" && tmp_oloo_2 == "QRectF*") {
				obj->drawText((const QRectF&) var_oloo_0, (int) var_oloo_1, (const QString&) var_oloo_2, (QRectF*) var_oloo_3);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawChord
 *    flags:    
 */
ZEND_METHOD(QPainter, drawChord){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 
		long var_oll_2;    // default: 

		/* const QRectF& rect, int a, int alen,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "const QRectF&") {
				obj->drawChord((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
			RETURN_NULL();
			}			
			if(tmp_oll_0 == "const QRect&") {
				obj->drawChord((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  clipRegion
 *    flags:    c
 */
ZEND_METHOD(QPainter, clipRegion){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QRegion return_object = (QRegion) obj->clipRegion();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QPainter, end){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->end());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  brushOrigin
 *    flags:    c
 */
ZEND_METHOD(QPainter, brushOrigin){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_LONG(obj->brushOrigin());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setViewTransformEnabled
 *    flags:    
 */
ZEND_METHOD(QPainter, setViewTransformEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool enable,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setViewTransformEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  scale
 *    flags:    
 */
ZEND_METHOD(QPainter, scale){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* qreal sx, qreal sy,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "qreal" && tmp_oo_1 == "qreal") {
				obj->scale((qreal) var_oo_0, (qreal) var_oo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setPen
 *    flags:    
 */
ZEND_METHOD(QPainter, setPen){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int style,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setPen((Qt::PenStyle) var_l_0);
			RETURN_NULL();
		}
		/* o */
		zval* z_var_o_1;   // default: 

		/* const QColor& color,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);

			QString tmp_o_0(var_o_1->metaObject()->className());
			
			if(tmp_o_0 == "const QColor&") {
				obj->setPen((const QColor&) var_o_1);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QPen&") {
				obj->setPen((const QPen&) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBackgroundMode
 *    flags:    
 */
ZEND_METHOD(QPainter, setBackgroundMode){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int mode,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setBackgroundMode((Qt::BGMode) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  window
 *    flags:    c
 */
ZEND_METHOD(QPainter, window){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->window();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  paintEngine
 *    flags:    c
 */
ZEND_METHOD(QPainter, paintEngine){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QPaintEngine * return_object = (QPaintEngine *) obj->paintEngine();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setRenderHint
 *    flags:    
 */
ZEND_METHOD(QPainter, setRenderHint){

	if (ZEND_NUM_ARGS() == 2){
		/* lb */
		long var_lb_0;    // default: 
		bool var_lb_1;   // _default: true

		/* RenderHint hint, bool on,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb|", &var_lb_0, &var_lb_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setRenderHint((RenderHint) var_lb_0 ,(bool) var_lb_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  brush
 *    flags:    c
 */
ZEND_METHOD(QPainter, brush){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			const QBrush & return_object = (const QBrush &) obj->brush();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  strokePath
 *    flags:    
 */
ZEND_METHOD(QPainter, strokePath){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* const QPainterPath& path, const QPen& pen,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "const QPen&") {
				obj->strokePath((const QPainterPath&) var_lo_0, (const QPen&) var_lo_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBrush
 *    flags:    
 */
ZEND_METHOD(QPainter, setBrush){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int style,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setBrush((Qt::BrushStyle) var_l_0);
			RETURN_NULL();
		}
		/* o */
		zval* z_var_o_1;   // default: 

		/* const QBrush& brush,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);

			QString tmp_o_0(var_o_1->metaObject()->className());
			
			if(tmp_o_0 == "const QBrush&") {
				obj->setBrush((const QBrush&) var_o_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPoint
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPoint){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* const QPointF& pt,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawPoint((const QPointF&) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 

		/* int x, int y,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->drawPoint((int) var_ll_0 ,(int) var_ll_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  QPainter
 *    flags:    
 */
ZEND_METHOD(QPainter, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *QPainter_ptr = new QPainter();
			PHP_QT_REGISTER(QPainter_ptr);
			RETURN_NULL();
	}

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* QPaintDevice* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPainter *QPainter_ptr = new QPainter((QPaintDevice*) var_l_0);
			PHP_QT_REGISTER(QPainter_ptr);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setRedirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, setRedirected){

	if (ZEND_NUM_ARGS() == 3){
		/* lll */
		long var_lll_0;    // default: 
		long var_lll_1;    // default: 
		long var_lll_2;    // default: QPoint()

		/* const QPaintDevice* device, QPaintDevice* replacement, const QPoint& offset,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lll|", &var_lll_0, &var_lll_1, &var_lll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setRedirected((const QPaintDevice*) var_lll_0 ,(QPaintDevice*) var_lll_1 ,(const QPoint&) var_lll_2);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  compositionMode
 *    flags:    c
 */
ZEND_METHOD(QPainter, compositionMode){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->compositionMode();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setFont
 *    flags:    
 */
ZEND_METHOD(QPainter, setFont){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QFont& f,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QFont&") {
				obj->setFont((const QFont&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  begin
 *    flags:    
 */
ZEND_METHOD(QPainter, begin){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* QPaintDevice* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			RETURN_BOOL(obj->begin((QPaintDevice*) var_l_0));
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setViewport
 *    flags:    
 */
ZEND_METHOD(QPainter, setViewport){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRect& viewport,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->setViewport((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		/* int x, int y, int w, int h,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setViewport((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawEllipse
 *    flags:    
 */
ZEND_METHOD(QPainter, drawEllipse){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRectF& r,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRectF&") {
				obj->drawEllipse((const QRectF&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		/* int x, int y, int w, int h,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->drawEllipse((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawArc
 *    flags:    
 */
ZEND_METHOD(QPainter, drawArc){

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 
		long var_oll_2;    // default: 

		/* const QRectF& rect, int a, int alen,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "const QRectF&") {
				obj->drawArc((const QRectF&) var_oll_0, (int) var_oll_1, (int) var_oll_2);
			RETURN_NULL();
			}			
			if(tmp_oll_0 == "const QRect&") {
				obj->drawArc((const QRect&) var_oll_0, (int) var_oll_4, (int) var_oll_5);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBackground
 *    flags:    
 */
ZEND_METHOD(QPainter, setBackground){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QBrush& bg,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QBrush&") {
				obj->setBackground((const QBrush&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  isActive
 *    flags:    c
 */
ZEND_METHOD(QPainter, isActive){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isActive());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRect
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRect){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRectF& rect,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRectF&") {
				obj->drawRect((const QRectF&) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QRect&") {
				obj->drawRect((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llll */
		long var_llll_0;    // default: 
		long var_llll_1;    // default: 
		long var_llll_2;    // default: 
		long var_llll_3;    // default: 

		/* int x1, int y1, int w, int h,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_llll_0, &var_llll_1, &var_llll_2, &var_llll_3) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->drawRect((int) var_llll_0 ,(int) var_llll_1 ,(int) var_llll_2 ,(int) var_llll_3);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawLines
 *    flags:    
 */
ZEND_METHOD(QPainter, drawLines){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* const QLineF* lines, int lineCount,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QLineF*") {
				obj->drawLines((const QLineF*) var_ol_0, (int) var_ol_1);
			RETURN_NULL();
			}			
			if(tmp_ol_0 == "const QLine*") {
				obj->drawLines((const QLine*) var_ol_0, (int) var_ol_3);
			RETURN_NULL();
			}
		}
		/* ll */
		long var_ll_4;    // default: 
		long var_ll_5;    // default: 

		/* const QPointF* pointPairs, int lineCount,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_4, &var_ll_5) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

						
			obj->drawLines((const QPointF*) var_ll_4 ,(int) var_ll_5);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  renderHints
 *    flags:    c
 */
ZEND_METHOD(QPainter, renderHints){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->renderHints();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  backgroundMode
 *    flags:    c
 */
ZEND_METHOD(QPainter, backgroundMode){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			Qt::BGMode return_object = (Qt::BGMode) obj->backgroundMode();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  redirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, redirected){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: 0

		/* const QPaintDevice* device, QPoint* offset,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			QPaintDevice * return_object = (QPaintDevice *) obj->redirected((const QPaintDevice*) var_ll_0 ,(QPoint*) var_ll_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  hasClipping
 *    flags:    c
 */
ZEND_METHOD(QPainter, hasClipping){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasClipping());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawTextItem
 *    flags:    
 */
ZEND_METHOD(QPainter, drawTextItem){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* const QPointF& p, const QTextItem& ti,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "const QTextItem&") {
				obj->drawTextItem((const QPointF&) var_lo_0, (const QTextItem&) var_lo_1);
			RETURN_NULL();
			}			
			if(tmp_lo_0 == "const QTextItem&") {
				obj->drawTextItem((const QPoint&) var_lo_2, (const QTextItem&) var_lo_1);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		/* int x, int y, const QTextItem& ti,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "const QTextItem&") {
				obj->drawTextItem((int) var_llo_0, (int) var_llo_1, (const QTextItem&) var_llo_2);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipping
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipping){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool enable,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QPainter *obj = (QPainter*) PHP_QT_FETCH();

			
			obj->setClipping((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  clipPath
 *    flags:    c
 */
ZEND_METHOD(QPainter, clipPath){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->clipPath();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QPainter);

