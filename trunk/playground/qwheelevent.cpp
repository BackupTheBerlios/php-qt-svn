/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWheelEvent.cpp - QWheelEvent PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QWheelEvent>



/*********************************
 *    class     QWheelEvent
 *    function  delta
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWheelEvent, delta){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->delta());
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  pos
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPoint &
*********************************/
ZEND_METHOD(QWheelEvent, pos){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		const QPoint & obj = (const QPoint &) o->pos();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWheelEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  globalPos
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPoint &
*********************************/
ZEND_METHOD(QWheelEvent, globalPos){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		const QPoint & obj = (const QPoint &) o->globalPos();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWheelEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  x
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWheelEvent, x){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->x());
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  y
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWheelEvent, y){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->y());
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  globalX
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWheelEvent, globalX){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->globalX());
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  globalY
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWheelEvent, globalY){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->globalY());
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  buttons
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::MouseButtons
*********************************/
ZEND_METHOD(QWheelEvent, buttons){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		Qt::MouseButtons obj = (Qt::MouseButtons) o->buttons();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWheelEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWheelEvent
 *    function  orientation
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientation
*********************************/
ZEND_METHOD(QWheelEvent, orientation){
	if (ZEND_NUM_ARGS() == 0){
		QWheelEvent *o = (QWheelEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->orientation());

	}
}


ZEND_METHOD(QWheelEvent,__construct){

	QWheelEvent *QWheelEvent_ptr = new QWheelEvent();

	if(ZEND_NUM_ARGS() == 5){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		zval* param_4;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &param_1, &param_2, &param_3, &param_4, &param_5) == FAILURE) {
			return;
		}
		 /*long pos QPoint&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_0));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*long delta int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*zval* buttons Qt::MouseButtons*/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			Qt::MouseButtons tmp(Z_STRVAL_P(param_2));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*zval* modifiers Qt::KeyboardModifiers*/
		if(Z_TYPE_P(param_3) == IS_OBJECT) {
			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_3));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*long orient Qt::Orientation*/
		if(Z_TYPE_P(param_4) == IS_LONG) {
			Qt::Orientation tmp(Z_STRVAL_P(param_4));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 6){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		zval* param_4;
		zval* param_5;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
			return;
		}
		 /*long pos QPoint&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_0));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*long globalPos QPoint&*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_1));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*long delta int*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_2));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*zval* buttons Qt::MouseButtons*/
		if(Z_TYPE_P(param_3) == IS_OBJECT) {
			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*zval* modifiers Qt::KeyboardModifiers*/
		if(Z_TYPE_P(param_4) == IS_OBJECT) {
			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
		 /*long orient Qt::Orientation*/
		if(Z_TYPE_P(param_5) == IS_LONG) {
			Qt::Orientation tmp(Z_STRVAL_P(param_5));
			QWheelEvent_ptr = new QWheelEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QWheelEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QWheelEvent);

