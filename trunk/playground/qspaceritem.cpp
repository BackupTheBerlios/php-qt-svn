/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QSpacerItem.cpp - QSpacerItem PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QSpacerItem>



/*********************************
 *    class     QSpacerItem
 *    function  changeSize
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   QSizePolicy::Policy
 *    @param   QSizePolicy::Policy
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QSpacerItem, changeSize){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// QSizePolicy::Minimum
		zval* var_2;

	// QSizePolicy::Minimum
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lloo", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		o->changeSize((int) var_0, (int) var_1,  tmp_var_2,  tmp_var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QSpacerItem, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  minimumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QSpacerItem, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  maximumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QSpacerItem, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		QSize obj = (QSize) o->maximumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  expandingDirections
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientations
*********************************/
ZEND_METHOD(QSpacerItem, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  isEmpty
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QSpacerItem, isEmpty){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEmpty());
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  setGeometry
 *    flags:    
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QSpacerItem, setGeometry){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		o->setGeometry( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  geometry
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QSpacerItem, geometry){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		QRect obj = (QRect) o->geometry();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSpacerItem
 *    function  spacerItem
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   QSpacerItem *
*********************************/
ZEND_METHOD(QSpacerItem, spacerItem){
	if (ZEND_NUM_ARGS() == 0){
		QSpacerItem *o = (QSpacerItem*) PHP_QT_FETCH();
		QSpacerItem * obj = (QSpacerItem *) o->spacerItem();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSpacerItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QSpacerItem,__construct){

	QSpacerItem *QSpacerItem_ptr = new QSpacerItem();

	if(ZEND_NUM_ARGS() == 4){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
			return;
		}
		 /*long w int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
		 /*long h int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
		 /*zval* hData QSizePolicy::Policy*/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			QSizePolicy::Policy tmp(Z_STRVAL_P(param_2));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
		 /*zval* vData QSizePolicy::Policy*/
		if(Z_TYPE_P(param_3) == IS_OBJECT) {
			QSizePolicy::Policy tmp(Z_STRVAL_P(param_3));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
	}

	PHP_QT_REGISTER(QSpacerItem_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QSpacerItem);

