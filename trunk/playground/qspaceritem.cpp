/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QSpacerItem.cpp - QSpacerItem PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QSpacerItem>


/*********************************
 *    class     QSpacerItem */
/*
 *    function  changeSize
 *    flags:    
 */
ZEND_METHOD(QSpacerItem, changeSize){

	if (ZEND_NUM_ARGS() == 4){
		/* lloo */
		long var_lloo_0;    // default: 
		long var_lloo_1;    // default: 
		zval* var_lloo_2;   // default: QSizePolicy::Minimum
		zval* var_lloo_3;   // default: QSizePolicy::Minimum

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo|o|", &var_lloo_0, &var_lloo_1, &var_lloo_2, &var_lloo_3) == SUCCESS) {
			QSpacerItem *obj = (QSpacerItem*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);
			QObject* var_o_3 = (QObject*) php_qt_fetch(var_o_3);

			QString tmp_0(var_o_2->metaObject()->className());
			QString tmp_1(var_o_3->metaObject()->className());
			
			if(tmp_0 == "QSizePolicy::Policy" && tmp_1 == "QSizePolicy::Policy") {
				QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			obj->changeSize((int) var_lloo_0, (int) var_lloo_0, (QSizePolicy::Policy) var_o_2, (QSizePolicy::Policy) var_o_3);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  isEmpty
 *    flags:    c
 */
ZEND_METHOD(QSpacerItem, isEmpty){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEmpty());
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  setGeometry
 *    flags:    
 */
ZEND_METHOD(QSpacerItem, setGeometry){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* var_o_0;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_o_0) == SUCCESS) {
			QSpacerItem *obj = (QSpacerItem*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(var_o_0);

			QString tmp_0(var_o_0->metaObject()->className());
			
			if(tmp_0 == "const QRect&") {
				QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			obj->setGeometry((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  spacerItem
 *    flags:    
 */
ZEND_METHOD(QSpacerItem, spacerItem){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			QSpacerItem * return_object = (QSpacerItem *) obj->spacerItem();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QSpacerItem_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  minimumSize
 *    flags:    c
 */
ZEND_METHOD(QSpacerItem, minimumSize){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSize();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QSpacerItem_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QSpacerItem, sizeHint){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->sizeHint();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QSpacerItem_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  maximumSize
 *    flags:    c
 */
ZEND_METHOD(QSpacerItem, maximumSize){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->maximumSize();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QSpacerItem_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  expandingDirections
 *    flags:    c
 */
ZEND_METHOD(QSpacerItem, expandingDirections){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QSpacerItem_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QSpacerItem */
/*
 *    function  geometry
 *    flags:    c
 */
ZEND_METHOD(QSpacerItem, geometry){
			QSpacerItem *obj = (QSpacerItem) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->geometry();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QSpacerItem_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}



ZEND_METHOD(QSpacerItem,__construct){

	QSpacerItem *QSpacerItem_ptr = new QSpacerItem();

	if(ZEND_NUM_ARGS() == 4){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
			return;
		}
		 /*long w int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
		 /*long h int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
		 /*zval* hData QSizePolicy::Policy*/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			QSizePolicy::Policy tmp(Z_STRVAL_P(param_2));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
		 /*zval* vData QSizePolicy::Policy*/
		if(Z_TYPE_P(param_3) == IS_OBJECT) {
			QSizePolicy::Policy tmp(Z_STRVAL_P(param_3));
			QSpacerItem_ptr = new QSpacerItem(tmp);
		}
	}

	PHP_QT_REGISTER(QSpacerItem_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QSpacerItem);

