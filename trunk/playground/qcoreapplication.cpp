/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QCoreApplication.cpp - QCoreApplication PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QCoreApplication>



/*		public enumEncoding:long {
			Encoding = 0,
			Encoding = 1
		}
*/

/*********************************
 *    class     QCoreApplication
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QCoreApplication, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QCoreApplication, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QCoreApplication, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  QCoreApplication
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QCoreApplication, QCoreApplication){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_~(o->QCoreApplication());
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  notify
 *    flags:    v
 *
 *    @param   QObject*
 *    @param   QEvent*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, notify){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  bool
 *    flags:    
 *
 *    @param   * EventFilter)(void*
 *    @param   long*
 *    @param   -

 *    @access   public
 *    @return   typedef
*********************************/
ZEND_METHOD(QCoreApplication, bool){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_INTPTR(o->bool( tmp_var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  setEventFilter
 *    flags:    
 *
 *    @param   EventFilter
 *    @param   -

 *    @access   public
 *    @return   EventFilter
*********************************/
ZEND_METHOD(QCoreApplication, setEventFilter){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_INTPTR(o->setEventFilter( tmp_var_0));
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QCoreApplication, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  argc
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QCoreApplication, argc){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->argc());
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  argv
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   char **
*********************************/
ZEND_METHOD(QCoreApplication, argv){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		char ** obj = (char **) o->argv();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  setOrganizationDomain
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, setOrganizationDomain){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"organizationDomain",strlen("organizationDomain"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  organizationDomain
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, organizationDomain){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->organizationDomain();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  setOrganizationName
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, setOrganizationName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"organizationName",strlen("organizationName"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  organizationName
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, organizationName){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->organizationName();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  setApplicationName
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, setApplicationName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"applicationName",strlen("applicationName"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  applicationName
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, applicationName){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->applicationName();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  instance
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QCoreApplication *
*********************************/
ZEND_METHOD(QCoreApplication, instance){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QCoreApplication * obj = (QCoreApplication *) o->instance();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  exec
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QCoreApplication, exec){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->exec());
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  processEvents
 *    flags:    s
 *
 *    @param   QEventLoop::ProcessEventsFlags
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, processEvents){
	if (ZEND_NUM_ARGS() == 1){
	// QEventLoop::AllEvents
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->processEvents( tmp_var_0);
		RETURN_NULL();
// marked for overloading: processEvents
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->processEvents( tmp_var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  exit
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, exit){
	if (ZEND_NUM_ARGS() == 1){
	// 0
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->exit((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  sendPostedEvents
 *    flags:    s
 *
 *    @param   QObject*
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, sendPostedEvents){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->sendPostedEvents( tmp_var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: sendPostedEvents
	}
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->sendPostedEvents();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  removePostedEvents
 *    flags:    s
 *
 *    @param   QObject*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, removePostedEvents){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->removePostedEvents( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  hasPendingEvents
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, hasPendingEvents){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasPendingEvents());
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  startingUp
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, startingUp){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->startingUp());
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  closingDown
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, closingDown){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->closingDown());
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  applicationDirPath
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, applicationDirPath){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->applicationDirPath();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  applicationFilePath
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, applicationFilePath){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->applicationFilePath();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  setLibraryPaths
 *    flags:    s
 *
 *    @param   const QStringList&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, setLibraryPaths){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->setLibraryPaths( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  libraryPaths
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QStringList
*********************************/
ZEND_METHOD(QCoreApplication, libraryPaths){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QStringList obj = (QStringList) o->libraryPaths();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  addLibraryPath
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, addLibraryPath){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->addLibraryPath( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  removeLibraryPath
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, removeLibraryPath){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->removeLibraryPath( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  installTranslator
 *    flags:    s
 *
 *    @param   QTranslator*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, installTranslator){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->installTranslator( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  removeTranslator
 *    flags:    s
 *
 *    @param   QTranslator*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, removeTranslator){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->removeTranslator( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  translate
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   const char*
 *    @param   Encoding
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QCoreApplication, translate){
	if (ZEND_NUM_ARGS() == 4){
	// 
		char* var_0;
		int* len_0;

	// 
		char* var_1;
		int* len_1;

	// 0
		char* var_2;
		int* len_2;

	// DefaultCodec
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ssso", &var_0, &len_0, &var_1, &len_1, &var_2, &len_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->translate( var_0,  var_1,  var_2,  tmp_var_3);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QCoreApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  flush
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, flush){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->flush();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  watchUnixSignal
 *    flags:    s
 *
 *    @param   int
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, watchUnixSignal){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->watchUnixSignal((int) var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  quit
 *    flags:    sl
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QCoreApplication, quit){
	if (ZEND_NUM_ARGS() == 0){
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		o->quit();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QCoreApplication
 *    function  event
 *    flags:    
 *
 *    @param   QEvent*
 *    @param   -

 *    @access   protected
 *    @return   bool
*********************************/
ZEND_METHOD(QCoreApplication, event){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QCoreApplication *o = (QCoreApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->event( tmp_var_0));

	}
}


ZEND_METHOD(QCoreApplication,__construct){

	QCoreApplication *QCoreApplication_ptr = new QCoreApplication();

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long argc int&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int& tmp(Z_STRVAL_P(param_0));
			QCoreApplication_ptr = new QCoreApplication(tmp);
		}
		 /*char argv char***/
		if(Z_TYPE_P(param_1) == IS_STRING) {
			char** tmp(Z_STRVAL_P(param_1));
			QCoreApplication_ptr = new QCoreApplication(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* p QCoreApplicationPrivate&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QCoreApplicationPrivate& tmp(Z_STRVAL_P(param_0));
			QCoreApplication_ptr = new QCoreApplication(tmp);
		}
	}

	PHP_QT_REGISTER(QCoreApplication_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QCoreApplication);

