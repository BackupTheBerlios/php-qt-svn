/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTimer.cpp - QTimer PHP implementation.
 * begin           : Fri Jan  6 00:06:34 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QTimer>


/*********************************
 *    class     QTimer */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QTimer, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int* len_ss_0;

		char* var_ss_1;   // default: 0
		int* len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_0, &len_0, &var_1, &len_1) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();

			
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			QString return_object = (QString) obj->tr( var_0 , var_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QTimer_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QUObject*") {
				QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QTimer, staticMetaObject){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QTimer_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QTimer */
/*
 *    function  setInterval
 *    flags:    
 */
ZEND_METHOD(QTimer, setInterval){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();

			
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->setInterval((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QTimer, qObject){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QTimer_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QTimer */
/*
 *    function  timerId
 *    flags:    c
 */
ZEND_METHOD(QTimer, timerId){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_LONG(obj->timerId());
}

/*********************************
 *    class     QTimer */
/*
 *    function  singleShot
 *    flags:    s
 */
ZEND_METHOD(QTimer, singleShot){

	if (ZEND_NUM_ARGS() == 3){
		/* los */
		long var_los_0;    // default: 
		zval* var_los_1;   // default: 
		char* var_los_2;   // default: 
		int* len_los_2;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"los", &var_los_0, &var_los_1, &var_2, &len_2) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QObject*") {
				QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->singleShot((int) var_los_0, (QObject*) var_o_1, (const char*) var_los_1);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int* len_s_0;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();

			
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->qt_cast( var_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QTimer, metaObject){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QTimer_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QTimer */
/*
 *    function  stop
 *    flags:    l
 */
ZEND_METHOD(QTimer, stop){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->stop();
			RETURN_NULL();
}

/*********************************
 *    class     QTimer */
/*
 *    function  isActive
 *    flags:    c
 */
ZEND_METHOD(QTimer, isActive){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_BOOL(obj->isActive());
}

/*********************************
 *    class     QTimer */
/*
 *    function  QTimer
 *    flags:    
 */
ZEND_METHOD(QTimer, QTimer){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_~(obj->QTimer());
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* var_lo_1;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &var_lo_1) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(var_o_1);

			QString tmp_0(var_o_1->metaObject()->className());
			
			if(tmp_0 == "QUObject*") {
				QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_o_1));
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  interval
 *    flags:    c
 */
ZEND_METHOD(QTimer, interval){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_LONG(obj->interval());
}

/*********************************
 *    class     QTimer */
/*
 *    function  setSingleShot
 *    flags:    
 */
ZEND_METHOD(QTimer, setSingleShot){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool* var_b_0;   // _default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();

			
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->setSingleShot((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QTimer, className){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QTimer_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
}

/*********************************
 *    class     QTimer */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QTimer, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int* len_ss_0;

		char* var_ss_1;   // default: 0
		int* len_ss_1;


		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_0, &len_0, &var_1, &len_1) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();

			
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			QString return_object = (QString) obj->trUtf8( var_0 , var_1);
			zend_class_entry *ce;                                   
			object_init_ex(return_value, QTimer_ce_ptr);     
			zend_rsrc_list_entry le;                            
			le.ptr = &return_object;                                       
			php_qt_register(return_value,le);                   
			return;                                             
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* var_llo_2;   // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &var_llo_2) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			QObject* var_o_2 = (QObject*) php_qt_fetch(var_o_2);

			QString tmp_0(var_o_2->metaObject()->className());
			
			if(tmp_0 == "QVariant*") {
				QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_0, (QVariant*) var_o_2));
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  isSingleShot
 *    flags:    c
 */
ZEND_METHOD(QTimer, isSingleShot){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSingleShot());
}

/*********************************
 *    class     QTimer */
/*
 *    function  start
 *    flags:    l
 */
ZEND_METHOD(QTimer, start){
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->start();
			RETURN_NULL();

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QTimer *obj = (QTimer*) PHP_QT_FETCH();

			
			QTimer *obj = (QTimer) PHP_QT_FETCH();
			obj->start((int) var_l_0);
			RETURN_NULL();
		}
	}
}



ZEND_METHOD(QTimer,__construct){

	QTimer *QTimer_ptr = new QTimer();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QObject**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QObject* tmp(Z_STRVAL_P(param_0));
			QTimer_ptr = new QTimer(tmp);
		}
	}

	PHP_QT_REGISTER(QTimer_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QTimer);

