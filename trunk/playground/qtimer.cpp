/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTimer.cpp - QTimer PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QTimer>



/*********************************
 *    class     QTimer
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QTimer, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QTimer
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QTimer, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QTimer
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QTimer, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QTimer
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTimer, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QTimer
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTimer, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QTimer
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTimer, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QTimer
 *    function  QTimer
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QTimer, QTimer){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		RETURN_~(o->QTimer());
	}
}


/*********************************
 *    class     QTimer
 *    function  isActive
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTimer, isActive){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		RETURN_BOOL(o->isActive());
	}
}


/*********************************
 *    class     QTimer
 *    function  timerId
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTimer, timerId){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		RETURN_LONG(o->timerId());
	}
}


/*********************************
 *    class     QTimer
 *    function  setInterval
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QTimer, setInterval){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"interval",strlen("interval"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QTimer
 *    function  interval
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTimer, interval){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		RETURN_LONG(o->interval());
	}
}


/*********************************
 *    class     QTimer
 *    function  setSingleShot
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QTimer, setSingleShot){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"singleShot",strlen("singleShot"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QTimer
 *    function  isSingleShot
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTimer, isSingleShot){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		RETURN_BOOL(o->isSingleShot());
	}
}


/*********************************
 *    class     QTimer
 *    function  start
 *    flags:    l
 *
 *    @param   int
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QTimer, start){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		o->start((int) var_0);
		RETURN_NULL();
// marked for overloading: start
	}
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		o->start();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QTimer
 *    function  stop
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QTimer, stop){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		o->stop();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QTimer
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QTimer, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTimer_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTimer
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QTimer, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTimer_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTimer
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QTimer, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTimer_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTimer
 *    function  singleShot
 *    flags:    s
 *
 *    @param   int
 *    @param   QObject*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QTimer, singleShot){
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		zval* var_1;

	// 
		char* var_2;
		int* len_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"los", &var_0, &var_1, &var_2, &len_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QTimer *o = (QTimer*) PHP_QT_FETCH();
		o->singleShot((int) var_0,  tmp_var_1,  var_2);
		RETURN_NULL();

	}
}


ZEND_METHOD(QTimer,__construct){

	QTimer *QTimer_ptr = new QTimer();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QObject**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QObject* tmp(Z_STRVAL_P(param_0));
			QTimer_ptr = new QTimer(tmp);
		}
	}

	PHP_QT_REGISTER(QTimer_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QTimer);

