/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLayout.cpp - QLayout PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QLayout>



/*		public enumSizeConstraint:long {
			SizeConstraint = 0,
			SizeConstraint = 1,
			SizeConstraint = 2,
			SizeConstraint = 3,
			SizeConstraint = 4,
			SizeConstraint = 5
		}
*/

/*********************************
 *    class     QLayout
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QLayout, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QLayout, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QLayout, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QLayout
 *    function  QLayout
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QLayout, QLayout){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_~(o->QLayout());
	}
}


/*********************************
 *    class     QLayout
 *    function  margin
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayout, margin){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->margin());
	}
}


/*********************************
 *    class     QLayout
 *    function  spacing
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayout, spacing){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->spacing());
	}
}


/*********************************
 *    class     QLayout
 *    function  setMargin
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, setMargin){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"margin",strlen("margin"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLayout
 *    function  setSpacing
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, setSpacing){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"spacing",strlen("spacing"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLayout
 *    function  setAlignment
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, setAlignment){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->setAlignment( tmp_var_0,  tmp_var_1));
// marked for overloading: setAlignment
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->setAlignment( tmp_var_0,  tmp_var_1));
// marked for overloading: setAlignment
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->setAlignment( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  setSizeConstraint
 *    flags:    
 *
 *    @param   SizeConstraint
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, setSizeConstraint){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeConstraint",strlen("sizeConstraint"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLayout
 *    function  sizeConstraint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   SizeConstraint
*********************************/
ZEND_METHOD(QLayout, sizeConstraint){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QLayout
 *    function  setMenuBar
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, setMenuBar){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->setMenuBar( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  menuBar
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QLayout, menuBar){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->menuBar();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  parentWidget
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QLayout, parentWidget){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->parentWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  invalidate
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, invalidate){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->invalidate();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  geometry
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QLayout, geometry){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QRect obj = (QRect) o->geometry();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  activate
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, activate){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->activate());
	}
}


/*********************************
 *    class     QLayout
 *    function  update
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, update){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->update();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  addWidget
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, addWidget){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->addWidget( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  addItem
 *    flags:    pv
 *
 *    @param   QLayoutItem*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, addItem){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  removeWidget
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, removeWidget){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->removeWidget( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  removeItem
 *    flags:    
 *
 *    @param   QLayoutItem*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, removeItem){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->removeItem( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  expandingDirections
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientations
*********************************/
ZEND_METHOD(QLayout, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		Qt::Orientations obj = (Qt::Orientations) o->expandingDirections();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  minimumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayout, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  maximumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayout, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->maximumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  setGeometry
 *    flags:    p
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, setGeometry){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->setGeometry( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  itemAt
 *    flags:    cpv
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QLayoutItem *
*********************************/
ZEND_METHOD(QLayout, itemAt){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  takeAt
 *    flags:    pv
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QLayoutItem *
*********************************/
ZEND_METHOD(QLayout, takeAt){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  indexOf
 *    flags:    cv
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayout, indexOf){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  count
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayout, count){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayout
 *    function  isEmpty
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, isEmpty){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEmpty());
	}
}


/*********************************
 *    class     QLayout
 *    function  totalHeightForWidth
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayout, totalHeightForWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_LONG(o->totalHeightForWidth((int) var_0));
	}
}


/*********************************
 *    class     QLayout
 *    function  totalMinimumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayout, totalMinimumSize){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->totalMinimumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  totalMaximumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayout, totalMaximumSize){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->totalMaximumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  totalSizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayout, totalSizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->totalSizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  layout
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   QLayout *
*********************************/
ZEND_METHOD(QLayout, layout){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QLayout * obj = (QLayout *) o->layout();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  setEnabled
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayout, setEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		o->setEnabled((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLayout
 *    function  isEnabled
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayout, isEnabled){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEnabled());
	}
}


/*********************************
 *    class     QLayout
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QLayout, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLayout, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeConstraint",strlen("sizeConstraint"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLayout
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLayout, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayout
 *    function  closestAcceptableSize
 *    flags:    s
 *
 *    @param   const QWidget*
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayout, closestAcceptableSize){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QLayout *o = (QLayout*) PHP_QT_FETCH();
		QSize obj = (QSize) o->closestAcceptableSize( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayout_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QLayout,__construct){

	QLayout *QLayout_ptr = new QLayout();

	PHP_QT_REGISTER(QLayout_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QLayout);

