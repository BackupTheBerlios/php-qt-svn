/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTabletEvent.cpp - QTabletEvent PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QTabletEvent>



/*		public enumTabletDevice:long {
			TabletDevice = 0,
			TabletDevice = 1,
			TabletDevice = 2,
			TabletDevice = 3,
			TabletDevice = 4,
			TabletDevice = 5
		}
*/

/*		public enumPointerType:long {
			PointerType = 0,
			PointerType = 1,
			PointerType = 2,
			PointerType = 3
		}
*/

/*********************************
 *    class     QTabletEvent
 *    function  pos
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPoint &
*********************************/
ZEND_METHOD(QTabletEvent, pos){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		const QPoint & obj = (const QPoint &) o->pos();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTabletEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  globalPos
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPoint &
*********************************/
ZEND_METHOD(QTabletEvent, globalPos){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		const QPoint & obj = (const QPoint &) o->globalPos();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTabletEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  hiResGlobalPos
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPointF &
*********************************/
ZEND_METHOD(QTabletEvent, hiResGlobalPos){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		const QPointF & obj = (const QPointF &) o->hiResGlobalPos();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTabletEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  x
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, x){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->x());
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  y
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, y){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->y());
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  globalX
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, globalX){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->globalX());
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  globalY
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, globalY){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->globalY());
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  hiResGlobalX
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QTabletEvent, hiResGlobalX){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  hiResGlobalY
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QTabletEvent, hiResGlobalY){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  device
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   TabletDevice
*********************************/
ZEND_METHOD(QTabletEvent, device){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  pointerType
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   PointerType
*********************************/
ZEND_METHOD(QTabletEvent, pointerType){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  uniqueId
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qint64
*********************************/
ZEND_METHOD(QTabletEvent, uniqueId){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  pressure
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QTabletEvent, pressure){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  z
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, z){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->z());
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  tangentialPressure
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QTabletEvent, tangentialPressure){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  rotation
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QTabletEvent, rotation){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  xTilt
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, xTilt){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->xTilt());
	}
}


/*********************************
 *    class     QTabletEvent
 *    function  yTilt
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTabletEvent, yTilt){
	if (ZEND_NUM_ARGS() == 0){
		QTabletEvent *o = (QTabletEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->yTilt());

	}
}


ZEND_METHOD(QTabletEvent,__construct){

	QTabletEvent *QTabletEvent_ptr = new QTabletEvent();

	if(ZEND_NUM_ARGS() == 14){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		zval* param_4;
		zval* param_5;
		zval* param_6;
		zval* param_7;
		zval* param_8;
		zval* param_9;
		zval* param_10;
		zval* param_11;
		zval* param_12;
		zval* param_13;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzzzzzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6, &param_7, &param_8, &param_9, &param_10, &param_11, &param_12, &param_13, &param_14) == FAILURE) {
			return;
		}
		 /*long t Type*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			Type tmp(Z_STRVAL_P(param_0));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long pos QPoint&*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_1));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long globalPos QPoint&*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_2));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*zval* hiResGlobalPos QPointF&*/
		if(Z_TYPE_P(param_3) == IS_OBJECT) {
			QPointF& tmp(Z_STRVAL_P(param_3));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long device int*/
		if(Z_TYPE_P(param_4) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_4));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long pointerType int*/
		if(Z_TYPE_P(param_5) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_5));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*qreal pressure qreal*/
		if(Z_TYPE_P(param_6) == IS_) {
			qreal tmp(Z_STRVAL_P(param_6));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long xTilt int*/
		if(Z_TYPE_P(param_7) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_7));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long yTilt int*/
		if(Z_TYPE_P(param_8) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_8));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*qreal tangentialPressure qreal*/
		if(Z_TYPE_P(param_9) == IS_) {
			qreal tmp(Z_STRVAL_P(param_9));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*qreal rotation qreal*/
		if(Z_TYPE_P(param_10) == IS_) {
			qreal tmp(Z_STRVAL_P(param_10));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*long z int*/
		if(Z_TYPE_P(param_11) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_11));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*zval* keyState Qt::KeyboardModifiers*/
		if(Z_TYPE_P(param_12) == IS_OBJECT) {
			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_12));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
		 /*qint64 uniqueID qint64*/
		if(Z_TYPE_P(param_13) == IS_) {
			qint64 tmp(Z_STRVAL_P(param_13));
			QTabletEvent_ptr = new QTabletEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QTabletEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QTabletEvent);

