/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QInputMethodEvent>



/*		public enumAttributeType:long {
			AttributeType = 0,
			AttributeType = 1,
			AttributeType = 2,
			AttributeType = 3
		}
*/

/*********************************
 *    class     QInputMethodEvent
 *    function  setCommitString
 *    flags:    
 *
 *    @param   const QString&
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QInputMethodEvent, setCommitString){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 0
		long var_1;
	// 0
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
		o->setCommitString( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QInputMethodEvent
 *    function  preeditString
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QString &
*********************************/
ZEND_METHOD(QInputMethodEvent, preeditString){
	if (ZEND_NUM_ARGS() == 0){
		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
		const QString & obj = (const QString &) o->preeditString();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QInputMethodEvent
 *    function  commitString
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QString &
*********************************/
ZEND_METHOD(QInputMethodEvent, commitString){
	if (ZEND_NUM_ARGS() == 0){
		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
		const QString & obj = (const QString &) o->commitString();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QInputMethodEvent
 *    function  replacementStart
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QInputMethodEvent, replacementStart){
	if (ZEND_NUM_ARGS() == 0){
		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->replacementStart());
	}
}


/*********************************
 *    class     QInputMethodEvent
 *    function  replacementLength
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QInputMethodEvent, replacementLength){
	if (ZEND_NUM_ARGS() == 0){
		QInputMethodEvent *o = (QInputMethodEvent*) PHP_QT_FETCH();
		RETURN_LONG(o->replacementLength());

	}
}


ZEND_METHOD(QInputMethodEvent,__construct){

	QInputMethodEvent *QInputMethodEvent_ptr = new QInputMethodEvent();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* other QInputMethodEvent&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QInputMethodEvent& tmp(Z_STRVAL_P(param_0));
			QInputMethodEvent_ptr = new QInputMethodEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QInputMethodEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QInputMethodEvent);

