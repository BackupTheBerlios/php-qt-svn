/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWidget.cpp - QWidget PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QWidget>



/*********************************
 *    class     QWidget
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QWidget, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QWidget, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QWidget, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QWidget
 *    function  QWidget
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QWidget, QWidget){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_~(o->QWidget());
	}
}


/*********************************
 *    class     QWidget
 *    function  devType
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, devType){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->devType());
	}
}


/*********************************
 *    class     QWidget
 *    function  winId
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   WId
*********************************/
ZEND_METHOD(QWidget, winId){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->winId());
	}
}


/*********************************
 *    class     QWidget
 *    function  style
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QStyle *
*********************************/
ZEND_METHOD(QWidget, style){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QStyle * obj = (QStyle *) o->style();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setStyle
 *    flags:    
 *
 *    @param   QStyle*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setStyle){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setStyle( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  isTopLevel
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isTopLevel){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isTopLevel());
	}
}


/*********************************
 *    class     QWidget
 *    function  isWindow
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isWindow){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isWindow());
	}
}


/*********************************
 *    class     QWidget
 *    function  isModal
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isModal){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isModal());
	}
}


/*********************************
 *    class     QWidget
 *    function  isEnabled
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isEnabled){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEnabled());
	}
}


/*********************************
 *    class     QWidget
 *    function  isEnabledTo
 *    flags:    c
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isEnabledTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEnabledTo( tmp_var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  isEnabledToTLW
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isEnabledToTLW){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEnabledToTLW());
	}
}


/*********************************
 *    class     QWidget
 *    function  frameGeometry
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QWidget, frameGeometry){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRect obj = (QRect) o->frameGeometry();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  geometry
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QRect &
*********************************/
ZEND_METHOD(QWidget, geometry){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		const QRect & obj = (const QRect &) o->geometry();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  normalGeometry
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QWidget, normalGeometry){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRect obj = (QRect) o->normalGeometry();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  x
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, x){
	if (ZEND_NUM_ARGS() == 0){
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"maximumSize",strlen("maximumSize"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  y
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, y){
	if (ZEND_NUM_ARGS() == 0){
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  pos
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, pos){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->pos());
	}
}


/*********************************
 *    class     QWidget
 *    function  frameSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, frameSize){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QSize obj = (QSize) o->frameSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  size
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, size){
	if (ZEND_NUM_ARGS() == 0){
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"size",strlen("size"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  width
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, width){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->width());
	}
}


/*********************************
 *    class     QWidget
 *    function  height
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, height){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->height());
	}
}


/*********************************
 *    class     QWidget
 *    function  rect
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QWidget, rect){
	if (ZEND_NUM_ARGS() == 0){
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  childrenRect
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QWidget, childrenRect){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRect obj = (QRect) o->childrenRect();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  childrenRegion
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRegion
*********************************/
ZEND_METHOD(QWidget, childrenRegion){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRegion obj = (QRegion) o->childrenRegion();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  minimumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  maximumSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QSize obj = (QSize) o->maximumSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  minimumWidth
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, minimumWidth){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->minimumWidth());
	}
}


/*********************************
 *    class     QWidget
 *    function  minimumHeight
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, minimumHeight){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->minimumHeight());
	}
}


/*********************************
 *    class     QWidget
 *    function  maximumWidth
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, maximumWidth){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->maximumWidth());
	}
}


/*********************************
 *    class     QWidget
 *    function  maximumHeight
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, maximumHeight){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->maximumHeight());
	}
}


/*********************************
 *    class     QWidget
 *    function  setMinimumSize
 *    flags:    
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMinimumSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"minimumSize",strlen("minimumSize"),var_0 TSRMLS_CC);
	}
// marked for overloading: setMinimumSize
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"minimumSize",strlen("minimumSize"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setMaximumSize
 *    flags:    
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMaximumSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"maximumSize",strlen("maximumSize"),var_0 TSRMLS_CC);
	}
// marked for overloading: setMaximumSize
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"maximumSize",strlen("maximumSize"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setMinimumWidth
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMinimumWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"minimumWidth",strlen("minimumWidth"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setMinimumHeight
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMinimumHeight){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"minimumHeight",strlen("minimumHeight"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setMaximumWidth
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMaximumWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maximumWidth",strlen("maximumWidth"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setMaximumHeight
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMaximumHeight){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maximumHeight",strlen("maximumHeight"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  sizeIncrement
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, sizeIncrement){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeIncrement();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setSizeIncrement
 *    flags:    
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setSizeIncrement){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeIncrement",strlen("sizeIncrement"),var_0 TSRMLS_CC);
	}
// marked for overloading: setSizeIncrement
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizeIncrement",strlen("sizeIncrement"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  baseSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, baseSize){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QSize obj = (QSize) o->baseSize();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setBaseSize
 *    flags:    
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setBaseSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"baseSize",strlen("baseSize"),var_0 TSRMLS_CC);
	}
// marked for overloading: setBaseSize
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"baseSize",strlen("baseSize"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setFixedSize
 *    flags:    
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFixedSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setFixedSize( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setFixedSize
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setFixedSize((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setFixedWidth
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFixedWidth){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setFixedWidth((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setFixedHeight
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFixedHeight){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setFixedHeight((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  mapToGlobal
 *    flags:    c
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, mapToGlobal){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->mapToGlobal((const QPoint&) var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  mapFromGlobal
 *    flags:    c
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, mapFromGlobal){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->mapFromGlobal((const QPoint&) var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  mapToParent
 *    flags:    c
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, mapToParent){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->mapToParent((const QPoint&) var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  mapFromParent
 *    flags:    c
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, mapFromParent){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->mapFromParent((const QPoint&) var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  mapTo
 *    flags:    c
 *
 *    @param   QWidget*
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, mapTo){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->mapTo( tmp_var_0, (const QPoint&) var_1));
	}
}


/*********************************
 *    class     QWidget
 *    function  mapFrom
 *    flags:    c
 *
 *    @param   QWidget*
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QPoint
*********************************/
ZEND_METHOD(QWidget, mapFrom){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->mapFrom( tmp_var_0, (const QPoint&) var_1));
	}
}


/*********************************
 *    class     QWidget
 *    function  window
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, window){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->window();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  topLevelWidget
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, topLevelWidget){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->topLevelWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  palette
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QPalette &
*********************************/
ZEND_METHOD(QWidget, palette){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		const QPalette & obj = (const QPalette &) o->palette();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setPalette
 *    flags:    
 *
 *    @param   const QPalette&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setPalette){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"palette",strlen("palette"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setBackgroundRole
 *    flags:    
 *
 *    @param   QPalette::ColorRole
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setBackgroundRole){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setBackgroundRole( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  backgroundRole
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPalette::ColorRole
*********************************/
ZEND_METHOD(QWidget, backgroundRole){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QPalette::ColorRole obj = (QPalette::ColorRole) o->backgroundRole();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setForegroundRole
 *    flags:    
 *
 *    @param   QPalette::ColorRole
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setForegroundRole){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setForegroundRole( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  foregroundRole
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPalette::ColorRole
*********************************/
ZEND_METHOD(QWidget, foregroundRole){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QPalette::ColorRole obj = (QPalette::ColorRole) o->foregroundRole();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  font
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QFont &
*********************************/
ZEND_METHOD(QWidget, font){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		const QFont & obj = (const QFont &) o->font();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setFont
 *    flags:    
 *
 *    @param   const QFont&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFont){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"font",strlen("font"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  fontMetrics
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QFontMetrics
*********************************/
ZEND_METHOD(QWidget, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QFontMetrics obj = (QFontMetrics) o->fontMetrics();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  fontInfo
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QFontInfo
*********************************/
ZEND_METHOD(QWidget, fontInfo){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QFontInfo obj = (QFontInfo) o->fontInfo();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  cursor
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QCursor
*********************************/
ZEND_METHOD(QWidget, cursor){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QCursor obj = (QCursor) o->cursor();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setCursor
 *    flags:    
 *
 *    @param   const QCursor&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setCursor){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"cursor",strlen("cursor"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  unsetCursor
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, unsetCursor){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->unsetCursor();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setMouseTracking
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMouseTracking){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"mouseTracking",strlen("mouseTracking"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  hasMouseTracking
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, hasMouseTracking){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasMouseTracking());
	}
}


/*********************************
 *    class     QWidget
 *    function  underMouse
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, underMouse){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->underMouse());
	}
}


/*********************************
 *    class     QWidget
 *    function  setMask
 *    flags:    
 *
 *    @param   const QBitmap&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setMask){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setMask( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  mask
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRegion
*********************************/
ZEND_METHOD(QWidget, mask){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRegion obj = (QRegion) o->mask();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  clearMask
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, clearMask){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->clearMask();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowTitle
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowTitle){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowTitle",strlen("windowTitle"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  windowTitle
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, windowTitle){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->windowTitle();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowIcon
 *    flags:    
 *
 *    @param   const QIcon&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowIcon){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowIcon",strlen("windowIcon"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  windowIcon
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QIcon
*********************************/
ZEND_METHOD(QWidget, windowIcon){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowIconText
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowIconText){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowIconText",strlen("windowIconText"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  windowIconText
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, windowIconText){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->windowIconText();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowRole
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowRole){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setWindowRole( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  windowRole
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, windowRole){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->windowRole();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowOpacity
 *    flags:    
 *
 *    @param   qreal
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowOpacity){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_double(Z_OBJCE_P(getThis()),getThis(),"windowOpacity",strlen("windowOpacity"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  windowOpacity
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QWidget, windowOpacity){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QWidget
 *    function  isWindowModified
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isWindowModified){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isWindowModified());
	}
}


/*********************************
 *    class     QWidget
 *    function  setToolTip
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setToolTip){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"toolTip",strlen("toolTip"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  toolTip
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, toolTip){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->toolTip();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setStatusTip
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setStatusTip){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"statusTip",strlen("statusTip"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  statusTip
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, statusTip){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->statusTip();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setWhatsThis
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWhatsThis){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"whatsThis",strlen("whatsThis"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  whatsThis
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, whatsThis){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->whatsThis();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  accessibleName
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, accessibleName){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->accessibleName();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setAccessibleName
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setAccessibleName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"accessibleName",strlen("accessibleName"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  accessibleDescription
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, accessibleDescription){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->accessibleDescription();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setAccessibleDescription
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setAccessibleDescription){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"accessibleDescription",strlen("accessibleDescription"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setLayoutDirection
 *    flags:    
 *
 *    @param   Qt::LayoutDirection
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setLayoutDirection){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  layoutDirection
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::LayoutDirection
*********************************/
ZEND_METHOD(QWidget, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::LayoutDirection obj = (Qt::LayoutDirection) o->layoutDirection();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  unsetLayoutDirection
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, unsetLayoutDirection){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->unsetLayoutDirection();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  isRightToLeft
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isRightToLeft());
	}
}


/*********************************
 *    class     QWidget
 *    function  isLeftToRight
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isLeftToRight){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isLeftToRight());
	}
}


/*********************************
 *    class     QWidget
 *    function  isActiveWindow
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isActiveWindow){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isActiveWindow());
	}
}


/*********************************
 *    class     QWidget
 *    function  activateWindow
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, activateWindow){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->activateWindow();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  clearFocus
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, clearFocus){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->clearFocus();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setFocus
 *    flags:    
 *
 *    @param   Qt::FocusReason
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFocus){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"focusPolicy",strlen("focusPolicy"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  focusPolicy
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::FocusPolicy
*********************************/
ZEND_METHOD(QWidget, focusPolicy){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::FocusPolicy obj = (Qt::FocusPolicy) o->focusPolicy();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setFocusPolicy
 *    flags:    
 *
 *    @param   Qt::FocusPolicy
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFocusPolicy){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"focusPolicy",strlen("focusPolicy"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  hasFocus
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, hasFocus){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasFocus());
	}
}


/*********************************
 *    class     QWidget
 *    function  setFocusProxy
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setFocusProxy){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setFocusProxy( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  focusProxy
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, focusProxy){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->focusProxy();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  contextMenuPolicy
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::ContextMenuPolicy
*********************************/
ZEND_METHOD(QWidget, contextMenuPolicy){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::ContextMenuPolicy obj = (Qt::ContextMenuPolicy) o->contextMenuPolicy();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setContextMenuPolicy
 *    flags:    
 *
 *    @param   Qt::ContextMenuPolicy
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setContextMenuPolicy){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"contextMenuPolicy",strlen("contextMenuPolicy"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  grabMouse
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, grabMouse){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->grabMouse();
		RETURN_NULL();
// marked for overloading: grabMouse
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->grabMouse( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  releaseMouse
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, releaseMouse){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->releaseMouse();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  grabKeyboard
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, grabKeyboard){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->grabKeyboard();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  releaseKeyboard
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, releaseKeyboard){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->releaseKeyboard();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  grabShortcut
 *    flags:    
 *
 *    @param   const QKeySequence&
 *    @param   Qt::ShortcutContext
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, grabShortcut){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::WindowShortcut
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->grabShortcut( tmp_var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QWidget
 *    function  releaseShortcut
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, releaseShortcut){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->releaseShortcut((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setShortcutEnabled
 *    flags:    
 *
 *    @param   int
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setShortcutEnabled){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// true
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lb", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setShortcutEnabled((int) var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  updatesEnabled
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, updatesEnabled){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->updatesEnabled());
	}
}


/*********************************
 *    class     QWidget
 *    function  setUpdatesEnabled
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setUpdatesEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"updatesEnabled",strlen("updatesEnabled"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  update
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, update){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->update((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
// marked for overloading: update
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->update( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  repaint
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, repaint){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->repaint((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
// marked for overloading: repaint
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->repaint( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  stackUnder
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, stackUnder){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->stackUnder( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  move
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, move){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"pos",strlen("pos"),var_0 TSRMLS_CC);
	}
// marked for overloading: move
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"pos",strlen("pos"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  resize
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, resize){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"size",strlen("size"),var_0 TSRMLS_CC);
	}
// marked for overloading: resize
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"size",strlen("size"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setGeometry
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setGeometry){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
	}
// marked for overloading: setGeometry
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  adjustSize
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, adjustSize){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->adjustSize();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  isVisible
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isVisible){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isVisible());
	}
}


/*********************************
 *    class     QWidget
 *    function  isVisibleTo
 *    flags:    c
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isVisibleTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isVisibleTo( tmp_var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  isHidden
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isHidden){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isHidden());
	}
}


/*********************************
 *    class     QWidget
 *    function  isMinimized
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isMinimized){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isMinimized());
	}
}


/*********************************
 *    class     QWidget
 *    function  isMaximized
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isMaximized){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isMaximized());
	}
}


/*********************************
 *    class     QWidget
 *    function  isFullScreen
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isFullScreen){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isFullScreen());
	}
}


/*********************************
 *    class     QWidget
 *    function  windowState
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::WindowStates
*********************************/
ZEND_METHOD(QWidget, windowState){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::WindowStates obj = (Qt::WindowStates) o->windowState();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowState
 *    flags:    
 *
 *    @param   Qt::WindowStates
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowState){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setWindowState( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  overrideWindowState
 *    flags:    
 *
 *    @param   Qt::WindowStates
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, overrideWindowState){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->overrideWindowState( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  sizeHint
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, sizeHint){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  minimumSizeHint
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QWidget, minimumSizeHint){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  sizePolicy
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSizePolicy
*********************************/
ZEND_METHOD(QWidget, sizePolicy){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QSizePolicy obj = (QSizePolicy) o->sizePolicy();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setSizePolicy
 *    flags:    
 *
 *    @param   QSizePolicy
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setSizePolicy){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizePolicy",strlen("sizePolicy"),var_0 TSRMLS_CC);
	}
// marked for overloading: setSizePolicy
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"sizePolicy",strlen("sizePolicy"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  heightForWidth
 *    flags:    cv
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, heightForWidth){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  visibleRegion
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRegion
*********************************/
ZEND_METHOD(QWidget, visibleRegion){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRegion obj = (QRegion) o->visibleRegion();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setContentsMargins
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setContentsMargins){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setContentsMargins((int) var_0, (int) var_1, (int) var_2, (int) var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  getContentsMargins
 *    flags:    c
 *
 *    @param   int*
 *    @param   int*
 *    @param   int*
 *    @param   int*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, getContentsMargins){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->getContentsMargins((int*) var_0, (int*) var_1, (int*) var_2, (int*) var_3);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  contentsRect
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QWidget, contentsRect){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QRect obj = (QRect) o->contentsRect();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  layout
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QLayout *
*********************************/
ZEND_METHOD(QWidget, layout){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QLayout * obj = (QLayout *) o->layout();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setLayout
 *    flags:    
 *
 *    @param   QLayout*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setLayout){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  updateGeometry
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, updateGeometry){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->updateGeometry();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setParent
 *    flags:    
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setParent){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setParent( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setParent
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setParent( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  scroll
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, scroll){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->scroll((int) var_0, (int) var_1);
		RETURN_NULL();
// marked for overloading: scroll
	}
	if (ZEND_NUM_ARGS() == 3){
	// 
		long var_0;
	// 
		long var_1;
	// 
		zval* var_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->scroll((int) var_0, (int) var_1,  tmp_var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  focusWidget
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, focusWidget){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->focusWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  nextInFocusChain
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, nextInFocusChain){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->nextInFocusChain();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  acceptDrops
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, acceptDrops){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->acceptDrops());
	}
}


/*********************************
 *    class     QWidget
 *    function  setAcceptDrops
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setAcceptDrops){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"acceptDrops",strlen("acceptDrops"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  addAction
 *    flags:    
 *
 *    @param   QAction*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, addAction){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->addAction( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  insertAction
 *    flags:    
 *
 *    @param   QAction*
 *    @param   QAction*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, insertAction){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->insertAction( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  removeAction
 *    flags:    
 *
 *    @param   QAction*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, removeAction){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->removeAction( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  parentWidget
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, parentWidget){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->parentWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowFlags
 *    flags:    
 *
 *    @param   Qt::WindowFlags
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowFlags){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setWindowFlags( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  windowFlags
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::WindowFlags
*********************************/
ZEND_METHOD(QWidget, windowFlags){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::WindowFlags obj = (Qt::WindowFlags) o->windowFlags();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  overrideWindowFlags
 *    flags:    
 *
 *    @param   Qt::WindowFlags
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, overrideWindowFlags){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->overrideWindowFlags( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  windowType
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::WindowType
*********************************/
ZEND_METHOD(QWidget, windowType){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::WindowType obj = (Qt::WindowType) o->windowType();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  childAt
 *    flags:    c
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, childAt){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->childAt((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: childAt
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->childAt((const QPoint&) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  handle
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::HANDLE
*********************************/
ZEND_METHOD(QWidget, handle){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		Qt::HANDLE obj = (Qt::HANDLE) o->handle();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setAttribute
 *    flags:    
 *
 *    @param   Qt::WidgetAttribute
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setAttribute){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// true
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setAttribute( tmp_var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  testAttribute
 *    flags:    c
 *
 *    @param   Qt::WidgetAttribute
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, testAttribute){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->testAttribute( tmp_var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  paintEngine
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QPaintEngine *
*********************************/
ZEND_METHOD(QWidget, paintEngine){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QPaintEngine * obj = (QPaintEngine *) o->paintEngine();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  ensurePolished
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, ensurePolished){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->ensurePolished();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  inputContext
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   QInputContext *
*********************************/
ZEND_METHOD(QWidget, inputContext){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QInputContext * obj = (QInputContext *) o->inputContext();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setInputContext
 *    flags:    
 *
 *    @param   QInputContext*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setInputContext){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setInputContext( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  isAncestorOf
 *    flags:    c
 *
 *    @param   const QWidget*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, isAncestorOf){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->isAncestorOf( tmp_var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  inputMethodQuery
 *    flags:    cv
 *
 *    @param   Qt::InputMethodQuery
 *    @param   -

 *    @access   public
 *    @return   QVariant
*********************************/
ZEND_METHOD(QWidget, inputMethodQuery){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  setEnabled
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"enabled",strlen("enabled"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  setDisabled
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setDisabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setDisabled((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setWindowModified
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setWindowModified){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"windowModified",strlen("windowModified"),var_0 TSRMLS_CC);
	}
// marked for overloading: setFocus
	}
	if (ZEND_NUM_ARGS() == 0){
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"focusPolicy",strlen("focusPolicy"),var_0 TSRMLS_CC);
	}
// marked for overloading: update
	}
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->update();
		RETURN_NULL();
// marked for overloading: repaint
	}
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->repaint();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setVisible
 *    flags:    vl
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setVisible){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  setHidden
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setHidden){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setHidden((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  show
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, show){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->show();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  hide
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, hide){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->hide();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  setShown
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setShown){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setShown((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  showMinimized
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, showMinimized){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->showMinimized();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  showMaximized
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, showMaximized){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->showMaximized();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  showFullScreen
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, showFullScreen){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->showFullScreen();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  showNormal
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, showNormal){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->showNormal();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  close
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, close){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->close());
	}
}


/*********************************
 *    class     QWidget
 *    function  raise
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, raise){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->raise();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  lower
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, lower){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->lower();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QWidget, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"geometry",strlen("geometry"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QWidget
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QWidget, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  setTabOrder
 *    flags:    s
 *
 *    @param   QWidget*
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, setTabOrder){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->setTabOrder( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  mouseGrabber
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, mouseGrabber){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->mouseGrabber();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  keyboardGrabber
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, keyboardGrabber){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->keyboardGrabber();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  find
 *    flags:    s
 *
 *    @param   WId
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QWidget, find){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->find( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QWidget_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QWidget
 *    function  event
 *    flags:    
 *
 *    @param   QEvent*
 *    @param   -

 *    @access   protected
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, event){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->event( tmp_var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  metric
 *    flags:    c
 *
 *    @param   PaintDeviceMetric
 *    @param   -

 *    @access   protected
 *    @return   int
*********************************/
ZEND_METHOD(QWidget, metric){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_LONG(o->metric((PaintDeviceMetric) var_0));
	}
}


/*********************************
 *    class     QWidget
 *    function  resetInputContext
 *    flags:    
 *
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, resetInputContext){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->resetInputContext();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  updateMicroFocus
 *    flags:    
 *
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, updateMicroFocus){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->updateMicroFocus();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  create
 *    flags:    
 *
 *    @param   WId
 *    @param   bool
 *    @param   bool
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, create){
	if (ZEND_NUM_ARGS() == 3){
	// 0
		zval* var_0;

	// true
		bool* var_1;
	// true
		bool* var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"obb", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->create( tmp_var_0, (bool) var_1, (bool) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  destroy
 *    flags:    
 *
 *    @param   bool
 *    @param   bool
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, destroy){
	if (ZEND_NUM_ARGS() == 2){
	// true
		bool* var_0;
	// true
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bb", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		o->destroy((bool) var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QWidget
 *    function  focusNextPrevChild
 *    flags:    v
 *
 *    @param   bool
 *    @param   -

 *    @access   protected
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, focusNextPrevChild){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  focusNextChild
 *    flags:    
 *
 *    @param   -

 *    @access   protected
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, focusNextChild){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->focusNextChild());
	}
}


/*********************************
 *    class     QWidget
 *    function  focusPreviousChild
 *    flags:    
 *
 *    @param   -

 *    @access   protected
 *    @return   bool
*********************************/
ZEND_METHOD(QWidget, focusPreviousChild){
	if (ZEND_NUM_ARGS() == 0){
		QWidget *o = (QWidget*) PHP_QT_FETCH();
		RETURN_BOOL(o->focusPreviousChild());
	}
}


/*********************************
 *    class     QWidget
 *    function  styleChange
 *    flags:    v
 *
 *    @param   QStyle&
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, styleChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  enabledChange
 *    flags:    v
 *
 *    @param   bool
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, enabledChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  paletteChange
 *    flags:    v
 *
 *    @param   const QPalette&
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, paletteChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  fontChange
 *    flags:    v
 *
 *    @param   const QFont&
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, fontChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  windowActivationChange
 *    flags:    v
 *
 *    @param   bool
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, windowActivationChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QWidget
 *    function  languageChange
 *    flags:    v
 *
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QWidget, languageChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

	}
}


ZEND_METHOD(QWidget,__construct){

	QWidget *QWidget_ptr = new QWidget();

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QWidget_ptr = new QWidget(tmp);
		}
		 /*long f Qt::WFlags*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			Qt::WFlags tmp(Z_STRVAL_P(param_1));
			QWidget_ptr = new QWidget(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*zval* d QWidgetPrivate&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidgetPrivate& tmp(Z_STRVAL_P(param_0));
			QWidget_ptr = new QWidget(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QWidget_ptr = new QWidget(tmp);
		}
		 /*long f Qt::WFlags*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			Qt::WFlags tmp(Z_STRVAL_P(param_2));
			QWidget_ptr = new QWidget(tmp);
		}
	}

	PHP_QT_REGISTER(QWidget_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QWidget);

