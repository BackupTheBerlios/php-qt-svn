/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QSlider.cpp - QSlider PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QSlider>



/*		public enumTickPosition:long {
			NoTicks = 0,
			TicksAbove = 1,
			TicksLeft = TicksAbove,
			TicksBelow = 2,
			TicksRight = TicksBelow,
			TicksBothSides = 3
		}
*/

/*********************************
 *    class     QSlider
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QSlider, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QSlider
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QSlider, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QSlider
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QSlider, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QSlider
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QSlider, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QSlider
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QSlider, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QSlider
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QSlider, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QSlider
 *    function  QSlider
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QSlider, QSlider){
	if (ZEND_NUM_ARGS() == 0){
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		RETURN_~(o->QSlider());
	}
}


/*********************************
 *    class     QSlider
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QSlider, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSlider
 *    function  minimumSizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QSlider, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSlider
 *    function  setTickPosition
 *    flags:    
 *
 *    @param   TickPosition
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QSlider, setTickPosition){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"tickPosition",strlen("tickPosition"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QSlider
 *    function  tickPosition
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   TickPosition
*********************************/
ZEND_METHOD(QSlider, tickPosition){
	if (ZEND_NUM_ARGS() == 0){
		QSlider *o = (QSlider*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QSlider
 *    function  setTickInterval
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QSlider, setTickInterval){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"tickInterval",strlen("tickInterval"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QSlider
 *    function  tickInterval
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QSlider, tickInterval){
	if (ZEND_NUM_ARGS() == 0){
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->tickInterval());
	}
}


/*********************************
 *    class     QSlider
 *    function  event
 *    flags:    
 *
 *    @param   QEvent*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QSlider, event){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		RETURN_BOOL(o->event( tmp_var_0));
	}
}


/*********************************
 *    class     QSlider
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QSlider, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSlider
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QSlider, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QSlider
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QSlider, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QSlider *o = (QSlider*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QSlider,__construct){

	QSlider *QSlider_ptr = new QSlider();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QSlider_ptr = new QSlider(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long orientation Qt::Orientation*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			Qt::Orientation tmp(Z_STRVAL_P(param_0));
			QSlider_ptr = new QSlider(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QSlider_ptr = new QSlider(tmp);
		}
	}

	PHP_QT_REGISTER(QSlider_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QSlider);

