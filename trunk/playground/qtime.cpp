/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTime.cpp - QTime PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*********************************
 *    class     QTime
 *    function  isNull
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTime, isNull){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_BOOL(o->isNull());
	}
}


/*********************************
 *    class     QTime
 *    function  isValid
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTime, isValid){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_BOOL(o->isValid());
	}
}


/*********************************
 *    class     QTime
 *    function  hour
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, hour){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->hour());
	}
}


/*********************************
 *    class     QTime
 *    function  minute
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, minute){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->minute());
	}
}


/*********************************
 *    class     QTime
 *    function  second
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, second){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->second());
	}
}


/*********************************
 *    class     QTime
 *    function  msec
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, msec){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->msec());
	}
}


/*********************************
 *    class     QTime
 *    function  toString
 *    flags:    c
 *
 *    @param   Qt::DateFormat
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QTime, toString){
	if (ZEND_NUM_ARGS() == 1){
	// Qt::TextDate
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QTime *o = (QTime*) PHP_QT_FETCH();
		QString obj = (QString) o->toString( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: toString
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QTime *o = (QTime*) PHP_QT_FETCH();
		QString obj = (QString) o->toString( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTime
 *    function  setHMS
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QTime, setHMS){
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 0
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_BOOL(o->setHMS((int) var_0, (int) var_1, (int) var_2, (int) var_3));
	}
}


/*********************************
 *    class     QTime
 *    function  addSecs
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QTime
*********************************/
ZEND_METHOD(QTime, addSecs){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QTime *o = (QTime*) PHP_QT_FETCH();
		QTime obj = (QTime) o->addSecs((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTime
 *    function  secsTo
 *    flags:    c
 *
 *    @param   const QTime&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, secsTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->secsTo( tmp_var_0));
	}
}


/*********************************
 *    class     QTime
 *    function  addMSecs
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QTime
*********************************/
ZEND_METHOD(QTime, addMSecs){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QTime *o = (QTime*) PHP_QT_FETCH();
		QTime obj = (QTime) o->addMSecs((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTime
 *    function  msecsTo
 *    flags:    c
 *
 *    @param   const QTime&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, msecsTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->msecsTo( tmp_var_0));
	}
}


/*********************************
 *    class     QTime
 *    function  start
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QTime, start){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		o->start();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QTime
 *    function  restart
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, restart){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->restart());
	}
}


/*********************************
 *    class     QTime
 *    function  elapsed
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QTime, elapsed){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_LONG(o->elapsed());
	}
}


/*********************************
 *    class     QTime
 *    function  currentTime
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QTime
*********************************/
ZEND_METHOD(QTime, currentTime){
	if (ZEND_NUM_ARGS() == 0){
		QTime *o = (QTime*) PHP_QT_FETCH();
		QTime obj = (QTime) o->currentTime();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QTime
 *    function  fromString
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   Qt::DateFormat
 *    @param   -

 *    @access   public
 *    @return   QTime
*********************************/
ZEND_METHOD(QTime, fromString){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::TextDate
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QTime *o = (QTime*) PHP_QT_FETCH();
		QTime obj = (QTime) o->fromString( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: fromString
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QTime *o = (QTime*) PHP_QT_FETCH();
		QTime obj = (QTime) o->fromString( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: isValid
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		long var_0;
	// 
		long var_1;
	// 
		long var_2;
	// 0
		long var_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llll", &var_0, &var_1, &var_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QTime *o = (QTime*) PHP_QT_FETCH();
		RETURN_BOOL(o->isValid((int) var_0, (int) var_1, (int) var_2, (int) var_3));

	}
}


ZEND_METHOD(QTime,__construct){

	QTime *QTime_ptr = new QTime();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 4){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
			return;
		}
		 /*long h int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QTime_ptr = new QTime(tmp);
		}
		 /*long m int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QTime_ptr = new QTime(tmp);
		}
		 /*long s int*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_2));
			QTime_ptr = new QTime(tmp);
		}
		 /*long ms int*/
		if(Z_TYPE_P(param_3) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_3));
			QTime_ptr = new QTime(tmp);
		}
	}

	PHP_QT_REGISTER(QTime_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QTime);

