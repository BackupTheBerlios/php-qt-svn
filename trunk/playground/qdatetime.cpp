/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDateTime.cpp - QDateTime PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*********************************
 *    class     QDateTime
 *    function  QDateTime
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QDateTime, QDateTime){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		RETURN_~(o->QDateTime());
	}
}


/*********************************
 *    class     QDateTime
 *    function  isNull
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QDateTime, isNull){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		RETURN_BOOL(o->isNull());
	}
}


/*********************************
 *    class     QDateTime
 *    function  isValid
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QDateTime, isValid){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		RETURN_BOOL(o->isValid());
	}
}


/*********************************
 *    class     QDateTime
 *    function  date
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QDate
*********************************/
ZEND_METHOD(QDateTime, date){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDate obj = (QDate) o->date();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  time
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QTime
*********************************/
ZEND_METHOD(QDateTime, time){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QTime obj = (QTime) o->time();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  timeSpec
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::TimeSpec
*********************************/
ZEND_METHOD(QDateTime, timeSpec){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		Qt::TimeSpec obj = (Qt::TimeSpec) o->timeSpec();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  toTime_t
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   uint
*********************************/
ZEND_METHOD(QDateTime, toTime_t){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		RETURN_LONG(o->toTime_t());
	}
}


/*********************************
 *    class     QDateTime
 *    function  setDate
 *    flags:    
 *
 *    @param   const QDate&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDateTime, setDate){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		o->setDate( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QDateTime
 *    function  setTime
 *    flags:    
 *
 *    @param   const QTime&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDateTime, setTime){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		o->setTime( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QDateTime
 *    function  setTimeSpec
 *    flags:    
 *
 *    @param   Qt::TimeSpec
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDateTime, setTimeSpec){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		o->setTimeSpec( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QDateTime
 *    function  setTime_t
 *    flags:    
 *
 *    @param   uint
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDateTime, setTime_t){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		o->setTime_t((uint) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QDateTime
 *    function  toString
 *    flags:    c
 *
 *    @param   Qt::DateFormat
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QDateTime, toString){
	if (ZEND_NUM_ARGS() == 1){
	// Qt::TextDate
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QString obj = (QString) o->toString( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: toString
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QString obj = (QString) o->toString( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  addDays
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, addDays){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->addDays((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  addMonths
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, addMonths){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->addMonths((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  addYears
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, addYears){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->addYears((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  addSecs
 *    flags:    c
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, addSecs){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->addSecs((int) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  toTimeSpec
 *    flags:    c
 *
 *    @param   Qt::TimeSpec
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, toTimeSpec){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->toTimeSpec( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  toLocalTime
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, toLocalTime){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->toLocalTime();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  toUTC
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, toUTC){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->toUTC();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  daysTo
 *    flags:    c
 *
 *    @param   const QDateTime&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDateTime, daysTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		RETURN_LONG(o->daysTo( tmp_var_0));
	}
}


/*********************************
 *    class     QDateTime
 *    function  secsTo
 *    flags:    c
 *
 *    @param   const QDateTime&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QDateTime, secsTo){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		RETURN_LONG(o->secsTo( tmp_var_0));
	}
}


/*********************************
 *    class     QDateTime
 *    function  currentDateTime
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, currentDateTime){
	if (ZEND_NUM_ARGS() == 0){
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->currentDateTime();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDateTime
 *    function  fromString
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   Qt::DateFormat
 *    @param   -

 *    @access   public
 *    @return   QDateTime
*********************************/
ZEND_METHOD(QDateTime, fromString){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// Qt::TextDate
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->fromString( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: fromString
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QDateTime *o = (QDateTime*) PHP_QT_FETCH();
		QDateTime obj = (QDateTime) o->fromString( tmp_var_0,  tmp_var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDateTime_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QDateTime,__construct){

	QDateTime *QDateTime_ptr = new QDateTime();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* arg1 QDate&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QDate& tmp(Z_STRVAL_P(param_0));
			QDateTime_ptr = new QDateTime(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*zval* arg1 QDate&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QDate& tmp(Z_STRVAL_P(param_0));
			QDateTime_ptr = new QDateTime(tmp);
		}
		 /*zval* arg2 QTime&*/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QTime& tmp(Z_STRVAL_P(param_1));
			QDateTime_ptr = new QDateTime(tmp);
		}
		 /*zval* spec Qt::TimeSpec*/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			Qt::TimeSpec tmp(Z_STRVAL_P(param_2));
			QDateTime_ptr = new QDateTime(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* other QDateTime&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QDateTime& tmp(Z_STRVAL_P(param_0));
			QDateTime_ptr = new QDateTime(tmp);
		}
	}

	PHP_QT_REGISTER(QDateTime_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QDateTime);

