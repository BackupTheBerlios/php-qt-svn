/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLayoutItem.cpp - QLayoutItem PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*********************************
 *    class     QLayoutItem
 *    function  QLayoutItem
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QLayoutItem, QLayoutItem){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  sizeHint
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayoutItem, sizeHint){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  minimumSize
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayoutItem, minimumSize){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  maximumSize
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLayoutItem, maximumSize){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  expandingDirections
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientations
*********************************/
ZEND_METHOD(QLayoutItem, expandingDirections){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  setGeometry
 *    flags:    pv
 *
 *    @param   const QRect&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayoutItem, setGeometry){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  geometry
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QLayoutItem, geometry){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  isEmpty
 *    flags:    cpv
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayoutItem, isEmpty){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  hasHeightForWidth
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLayoutItem, hasHeightForWidth){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  heightForWidth
 *    flags:    cv
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayoutItem, heightForWidth){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  minimumHeightForWidth
 *    flags:    cv
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLayoutItem, minimumHeightForWidth){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  invalidate
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayoutItem, invalidate){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  widget
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QLayoutItem, widget){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  layout
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   QLayout *
*********************************/
ZEND_METHOD(QLayoutItem, layout){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  spacerItem
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   QSpacerItem *
*********************************/
ZEND_METHOD(QLayoutItem, spacerItem){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  alignment
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Alignment
*********************************/
ZEND_METHOD(QLayoutItem, alignment){
	if (ZEND_NUM_ARGS() == 0){
		QLayoutItem *o = (QLayoutItem*) PHP_QT_FETCH();
		Qt::Alignment obj = (Qt::Alignment) o->alignment();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLayoutItem_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLayoutItem
 *    function  setAlignment
 *    flags:    
 *
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLayoutItem, setAlignment){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLayoutItem *o = (QLayoutItem*) PHP_QT_FETCH();
		o->setAlignment( tmp_var_0);
		RETURN_NULL();

	}
}


ZEND_METHOD(QLayoutItem,__construct){

	QLayoutItem *QLayoutItem_ptr = new QLayoutItem();

	PHP_QT_REGISTER(QLayoutItem_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QLayoutItem);

