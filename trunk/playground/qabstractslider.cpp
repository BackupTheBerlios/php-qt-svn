/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QAbstractSlider.cpp - QAbstractSlider PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QAbstractSlider>



/*		public enumSliderAction:long {
			SliderAction = 0,
			SliderAction = 1,
			SliderAction = 2,
			SliderAction = 3,
			SliderAction = 4,
			SliderAction = 5,
			SliderAction = 6,
			SliderAction = 7
		}
*/

/*		protected enumSliderChange:long {
			SliderChange = 0,
			SliderChange = 1,
			SliderChange = 2,
			SliderChange = 3
		}
*/

/*********************************
 *    class     QAbstractSlider
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QAbstractSlider, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QAbstractSlider, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QAbstractSlider, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  QAbstractSlider
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QAbstractSlider, QAbstractSlider){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_~(o->QAbstractSlider());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  orientation
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Orientation
*********************************/
ZEND_METHOD(QAbstractSlider, orientation){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->orientation());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setMinimum
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setMinimum){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"minimum",strlen("minimum"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  minimum
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QAbstractSlider, minimum){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->minimum());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setMaximum
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setMaximum){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maximum",strlen("maximum"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  maximum
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QAbstractSlider, maximum){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->maximum());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setRange
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setRange){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		o->setRange((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setSingleStep
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setSingleStep){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"singleStep",strlen("singleStep"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  singleStep
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QAbstractSlider, singleStep){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->singleStep());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setPageStep
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setPageStep){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"pageStep",strlen("pageStep"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  pageStep
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QAbstractSlider, pageStep){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->pageStep());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setTracking
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setTracking){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"tracking",strlen("tracking"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  hasTracking
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, hasTracking){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasTracking());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setSliderDown
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setSliderDown){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"sliderDown",strlen("sliderDown"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  isSliderDown
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, isSliderDown){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_BOOL(o->isSliderDown());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setSliderPosition
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setSliderPosition){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"sliderPosition",strlen("sliderPosition"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  sliderPosition
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QAbstractSlider, sliderPosition){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->sliderPosition());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setInvertedAppearance
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setInvertedAppearance){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"invertedAppearance",strlen("invertedAppearance"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  invertedAppearance
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, invertedAppearance){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_BOOL(o->invertedAppearance());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setInvertedControls
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setInvertedControls){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"invertedControls",strlen("invertedControls"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  invertedControls
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QAbstractSlider, invertedControls){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_BOOL(o->invertedControls());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  value
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QAbstractSlider, value){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		RETURN_LONG(o->value());
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  triggerAction
 *    flags:    
 *
 *    @param   SliderAction
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, triggerAction){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		o->triggerAction( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setValue
 *    flags:    l
 *
 *    @param   int
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setValue){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"value",strlen("value"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setOrientation
 *    flags:    l
 *
 *    @param   Qt::Orientation
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setOrientation){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"orientation",strlen("orientation"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QAbstractSlider, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QAbstractSlider, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"invertedControls",strlen("invertedControls"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QAbstractSlider, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QAbstractSlider_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  setRepeatAction
 *    flags:    
 *
 *    @param   SliderAction
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, setRepeatAction){
	if (ZEND_NUM_ARGS() == 3){
	// 
		zval* var_0;

	// 500
		long var_1;
	// 50
		long var_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll", &var_0, &var_1, &var_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
		o->setRepeatAction( tmp_var_0, (int) var_1, (int) var_2);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  repeatAction
 *    flags:    c
 *
 *    @param   -

 *    @access   protected
 *    @return   SliderAction
*********************************/
ZEND_METHOD(QAbstractSlider, repeatAction){
	if (ZEND_NUM_ARGS() == 0){
		QAbstractSlider *o = (QAbstractSlider*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QAbstractSlider
 *    function  sliderChange
 *    flags:    v
 *
 *    @param   SliderChange
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QAbstractSlider, sliderChange){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

	}
}


ZEND_METHOD(QAbstractSlider,__construct){

	QAbstractSlider *QAbstractSlider_ptr = new QAbstractSlider();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QAbstractSlider_ptr = new QAbstractSlider(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* dd QAbstractSliderPrivate&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QAbstractSliderPrivate& tmp(Z_STRVAL_P(param_0));
			QAbstractSlider_ptr = new QAbstractSlider(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QAbstractSlider_ptr = new QAbstractSlider(tmp);
		}
	}

	PHP_QT_REGISTER(QAbstractSlider_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QAbstractSlider);

