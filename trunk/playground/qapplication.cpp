/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QApplication.cpp - QApplication PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QApplication>



/*		public enumType:long {
			Type = 0,
			Type = 1,
			Type = 2
		}
*/

/*		public enumColorSpec:long {
			NormalColor = 0,
			CustomColor = 1,
			ManyColor = 2
		}
*/

/*********************************
 *    class     QApplication
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QApplication, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QApplication, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QApplication, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QApplication
 *    function  QApplication
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QApplication, QApplication){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  isSessionRestored
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, isSessionRestored){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->isSessionRestored());
	}
}


/*********************************
 *    class     QApplication
 *    function  sessionId
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QApplication, sessionId){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->sessionId();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  sessionKey
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QApplication, sessionKey){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->sessionKey();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  commitData
 *    flags:    v
 *
 *    @param   QSessionManager&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, commitData){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  saveState
 *    flags:    v
 *
 *    @param   QSessionManager&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, saveState){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QApplication
 *    function  setInputContext
 *    flags:    
 *
 *    @param   QInputContext*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setInputContext){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setInputContext( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  inputContext
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QInputContext *
*********************************/
ZEND_METHOD(QApplication, inputContext){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QInputContext * obj = (QInputContext *) o->inputContext();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  notify
 *    flags:    
 *
 *    @param   QObject*
 *    @param   QEvent*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, notify){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->notify( tmp_var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QApplication
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QApplication, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QApplication, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"globalStrut",strlen("globalStrut"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QApplication
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QApplication, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  type
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   Type
*********************************/
ZEND_METHOD(QApplication, type){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->type());
	}
}


/*********************************
 *    class     QApplication
 *    function  style
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QStyle *
*********************************/
ZEND_METHOD(QApplication, style){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QStyle * obj = (QStyle *) o->style();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setStyle
 *    flags:    s
 *
 *    @param   QStyle*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setStyle){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setStyle( tmp_var_0);
		RETURN_NULL();
// marked for overloading: setStyle
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QStyle * obj = (QStyle *) o->setStyle( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  colorSpec
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, colorSpec){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->colorSpec());
	}
}


/*********************************
 *    class     QApplication
 *    function  setColorSpec
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setColorSpec){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setColorSpec((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  overrideCursor
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QCursor *
*********************************/
ZEND_METHOD(QApplication, overrideCursor){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QCursor * obj = (QCursor *) o->overrideCursor();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setOverrideCursor
 *    flags:    s
 *
 *    @param   const QCursor&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setOverrideCursor){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setOverrideCursor( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  changeOverrideCursor
 *    flags:    s
 *
 *    @param   const QCursor&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, changeOverrideCursor){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->changeOverrideCursor( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  restoreOverrideCursor
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, restoreOverrideCursor){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->restoreOverrideCursor();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  palette
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QPalette
*********************************/
ZEND_METHOD(QApplication, palette){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QPalette obj = (QPalette) o->palette();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: palette
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QPalette obj = (QPalette) o->palette( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: palette
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		char* var_0;
		int* len_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QPalette obj = (QPalette) o->palette( var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setPalette
 *    flags:    s
 *
 *    @param   const QPalette&
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setPalette){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os", &var_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setPalette( tmp_var_0,  var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  font
 *    flags:    s
 *
 *    @param   const QWidget*
 *    @param   -

 *    @access   public
 *    @return   QFont
*********************************/
ZEND_METHOD(QApplication, font){
	if (ZEND_NUM_ARGS() == 1){
	// 0
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QFont obj = (QFont) o->font( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setFont
 *    flags:    s
 *
 *    @param   const QFont&
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setFont){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os", &var_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setFont( tmp_var_0,  var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  fontMetrics
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QFontMetrics
*********************************/
ZEND_METHOD(QApplication, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QFontMetrics obj = (QFontMetrics) o->fontMetrics();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setWindowIcon
 *    flags:    s
 *
 *    @param   const QIcon&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setWindowIcon){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"windowIcon",strlen("windowIcon"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QApplication
 *    function  windowIcon
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QIcon
*********************************/
ZEND_METHOD(QApplication, windowIcon){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QApplication
 *    function  allWidgets
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidgetList
*********************************/
ZEND_METHOD(QApplication, allWidgets){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidgetList obj = (QWidgetList) o->allWidgets();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  topLevelWidgets
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidgetList
*********************************/
ZEND_METHOD(QApplication, topLevelWidgets){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidgetList obj = (QWidgetList) o->topLevelWidgets();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  desktop
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QDesktopWidget *
*********************************/
ZEND_METHOD(QApplication, desktop){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QDesktopWidget * obj = (QDesktopWidget *) o->desktop();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  activePopupWidget
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QApplication, activePopupWidget){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->activePopupWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  activeModalWidget
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QApplication, activeModalWidget){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->activeModalWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  clipboard
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QClipboard *
*********************************/
ZEND_METHOD(QApplication, clipboard){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QClipboard * obj = (QClipboard *) o->clipboard();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  focusWidget
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QApplication, focusWidget){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->focusWidget();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  activeWindow
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QApplication, activeWindow){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->activeWindow();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setActiveWindow
 *    flags:    s
 *
 *    @param   QWidget*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setActiveWindow){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setActiveWindow( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  widgetAt
 *    flags:    s
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QApplication, widgetAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->widgetAt((const QPoint&) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: widgetAt
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->widgetAt((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  topLevelAt
 *    flags:    s
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   QWidget *
*********************************/
ZEND_METHOD(QApplication, topLevelAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->topLevelAt((const QPoint&) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: topLevelAt
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QWidget * obj = (QWidget *) o->topLevelAt((int) var_0, (int) var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  syncX
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, syncX){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->syncX();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  beep
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, beep){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->beep();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  keyboardModifiers
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::KeyboardModifiers
*********************************/
ZEND_METHOD(QApplication, keyboardModifiers){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		Qt::KeyboardModifiers obj = (Qt::KeyboardModifiers) o->keyboardModifiers();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  mouseButtons
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::MouseButtons
*********************************/
ZEND_METHOD(QApplication, mouseButtons){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		Qt::MouseButtons obj = (Qt::MouseButtons) o->mouseButtons();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setDesktopSettingsAware
 *    flags:    s
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setDesktopSettingsAware){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setDesktopSettingsAware((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  desktopSettingsAware
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, desktopSettingsAware){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->desktopSettingsAware());
	}
}


/*********************************
 *    class     QApplication
 *    function  setCursorFlashTime
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setCursorFlashTime){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"cursorFlashTime",strlen("cursorFlashTime"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QApplication
 *    function  cursorFlashTime
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, cursorFlashTime){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->cursorFlashTime());
	}
}


/*********************************
 *    class     QApplication
 *    function  setDoubleClickInterval
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setDoubleClickInterval){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setDoubleClickInterval((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  doubleClickInterval
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, doubleClickInterval){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->doubleClickInterval());
	}
}


/*********************************
 *    class     QApplication
 *    function  setKeyboardInputInterval
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setKeyboardInputInterval){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"keyboardInputInterval",strlen("keyboardInputInterval"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QApplication
 *    function  keyboardInputInterval
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, keyboardInputInterval){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->keyboardInputInterval());
	}
}


/*********************************
 *    class     QApplication
 *    function  setWheelScrollLines
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setWheelScrollLines){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setWheelScrollLines((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  wheelScrollLines
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, wheelScrollLines){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->wheelScrollLines());
	}
}


/*********************************
 *    class     QApplication
 *    function  setGlobalStrut
 *    flags:    s
 *
 *    @param   const QSize&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setGlobalStrut){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"globalStrut",strlen("globalStrut"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QApplication
 *    function  globalStrut
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QApplication, globalStrut){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		QSize obj = (QSize) o->globalStrut();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  setStartDragTime
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setStartDragTime){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setStartDragTime((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  startDragTime
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, startDragTime){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->startDragTime());
	}
}


/*********************************
 *    class     QApplication
 *    function  setStartDragDistance
 *    flags:    s
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setStartDragDistance){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setStartDragDistance((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  startDragDistance
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, startDragDistance){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->startDragDistance());
	}
}


/*********************************
 *    class     QApplication
 *    function  setLayoutDirection
 *    flags:    s
 *
 *    @param   Qt::LayoutDirection
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setLayoutDirection){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"layoutDirection",strlen("layoutDirection"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QApplication
 *    function  layoutDirection
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::LayoutDirection
*********************************/
ZEND_METHOD(QApplication, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		Qt::LayoutDirection obj = (Qt::LayoutDirection) o->layoutDirection();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QApplication_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QApplication
 *    function  isRightToLeft
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->isRightToLeft());
	}
}


/*********************************
 *    class     QApplication
 *    function  isLeftToRight
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, isLeftToRight){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->isLeftToRight());
	}
}


/*********************************
 *    class     QApplication
 *    function  isEffectEnabled
 *    flags:    s
 *
 *    @param   Qt::UIEffect
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, isEffectEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->isEffectEnabled( tmp_var_0));
	}
}


/*********************************
 *    class     QApplication
 *    function  setEffectEnabled
 *    flags:    s
 *
 *    @param   Qt::UIEffect
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setEffectEnabled){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// true
		bool* var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ob", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setEffectEnabled( tmp_var_0, (bool) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  exec
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QApplication, exec){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_LONG(o->exec());
	}
}


/*********************************
 *    class     QApplication
 *    function  setQuitOnLastWindowClosed
 *    flags:    s
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, setQuitOnLastWindowClosed){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->setQuitOnLastWindowClosed((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  quitOnLastWindowClosed
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, quitOnLastWindowClosed){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->quitOnLastWindowClosed());
	}
}


/*********************************
 *    class     QApplication
 *    function  closeAllWindows
 *    flags:    sl
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, closeAllWindows){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->closeAllWindows();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  aboutQt
 *    flags:    sl
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QApplication, aboutQt){
	if (ZEND_NUM_ARGS() == 0){
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		o->aboutQt();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QApplication
 *    function  event
 *    flags:    
 *
 *    @param   QEvent*
 *    @param   -

 *    @access   protected
 *    @return   bool
*********************************/
ZEND_METHOD(QApplication, event){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QApplication *o = (QApplication*) PHP_QT_FETCH();
		RETURN_BOOL(o->event( tmp_var_0));

	}
}


ZEND_METHOD(QApplication,__construct){

	QApplication *QApplication_ptr = new QApplication();

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*long argc int&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int& tmp(Z_STRVAL_P(param_0));
			QApplication_ptr = new QApplication(tmp);
		}
		 /*char argv char***/
		if(Z_TYPE_P(param_1) == IS_STRING) {
			char** tmp(Z_STRVAL_P(param_1));
			QApplication_ptr = new QApplication(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*long argc int&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int& tmp(Z_STRVAL_P(param_0));
			QApplication_ptr = new QApplication(tmp);
		}
		 /*char argv char***/
		if(Z_TYPE_P(param_1) == IS_STRING) {
			char** tmp(Z_STRVAL_P(param_1));
			QApplication_ptr = new QApplication(tmp);
		}
		 /*bool GUIenabled bool*/
		if(Z_TYPE_P(param_2) == IS_BOOL) {
			bool tmp(Z_STRVAL_P(param_2));
			QApplication_ptr = new QApplication(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*long argc int&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int& tmp(Z_STRVAL_P(param_0));
			QApplication_ptr = new QApplication(tmp);
		}
		 /*char argv char***/
		if(Z_TYPE_P(param_1) == IS_STRING) {
			char** tmp(Z_STRVAL_P(param_1));
			QApplication_ptr = new QApplication(tmp);
		}
		 /*long arg1 Type*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			Type tmp(Z_STRVAL_P(param_2));
			QApplication_ptr = new QApplication(tmp);
		}
	}

	PHP_QT_REGISTER(QApplication_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QApplication);

