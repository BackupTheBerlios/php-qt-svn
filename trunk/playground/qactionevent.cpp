/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QActionEvent.cpp - QActionEvent PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QActionEvent>



/*********************************
 *    class     QActionEvent
 *    function  action
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QAction *
*********************************/
ZEND_METHOD(QActionEvent, action){
	if (ZEND_NUM_ARGS() == 0){
		QActionEvent *o = (QActionEvent*) PHP_QT_FETCH();
		QAction * obj = (QAction *) o->action();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QActionEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QActionEvent
 *    function  before
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QAction *
*********************************/
ZEND_METHOD(QActionEvent, before){
	if (ZEND_NUM_ARGS() == 0){
		QActionEvent *o = (QActionEvent*) PHP_QT_FETCH();
		QAction * obj = (QAction *) o->before();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QActionEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QActionEvent,__construct){

	QActionEvent *QActionEvent_ptr = new QActionEvent();

	if(ZEND_NUM_ARGS() == 3){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &param_1, &param_2, &param_3) == FAILURE) {
			return;
		}
		 /*long type int*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_0));
			QActionEvent_ptr = new QActionEvent(tmp);
		}
		 /*zval* action QAction**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QAction* tmp(Z_STRVAL_P(param_1));
			QActionEvent_ptr = new QActionEvent(tmp);
		}
		 /*zval* before QAction**/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			QAction* tmp(Z_STRVAL_P(param_2));
			QActionEvent_ptr = new QActionEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QActionEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QActionEvent);

