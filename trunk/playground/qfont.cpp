/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QFont.cpp - QFont PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*		public enumStyleHint:long {
			StyleHint = 0,
			SansSerif = Helvetica,
			StyleHint = 2,
			Serif = Times,
			StyleHint = 4,
			TypeWriter = Courier,
			StyleHint = 6,
			Decorative = OldEnglish,
			StyleHint = 8,
			StyleHint = 9
		}
*/

/*		public enumStyleStrategy:long {
			PreferDefault = 0x0001,
			PreferBitmap = 0x0002,
			PreferDevice = 0x0004,
			PreferOutline = 0x0008,
			ForceOutline = 0x0010,
			PreferMatch = 0x0020,
			PreferQuality = 0x0040,
			PreferAntialias = 0x0080,
			NoAntialias = 0x0100,
			OpenGLCompatible = 0x0200
		}
*/

/*		public enumWeight:long {
			Light = 25,
			Normal = 50,
			DemiBold = 63,
			Bold = 75,
			Black = 87
		}
*/

/*		public enumStyle:long {
			Style = 0,
			Style = 1,
			Style = 2
		}
*/

/*		public enumStretch:long {
			UltraCondensed = 50,
			ExtraCondensed = 62,
			Condensed = 75,
			SemiCondensed = 87,
			Unstretched = 100,
			SemiExpanded = 112,
			Expanded = 125,
			ExtraExpanded = 150,
			UltraExpanded = 200
		}
*/

/*********************************
 *    class     QFont
 *    function  QFont
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QFont, QFont){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_~(o->QFont());
	}
}


/*********************************
 *    class     QFont
 *    function  family
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, family){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->family();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  setFamily
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setFamily){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setFamily( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  pointSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QFont, pointSize){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->pointSize());
	}
}


/*********************************
 *    class     QFont
 *    function  setPointSize
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setPointSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setPointSize((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  pointSizeF
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   qreal
*********************************/
ZEND_METHOD(QFont, pointSizeF){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QFont
 *    function  setPointSizeF
 *    flags:    
 *
 *    @param   qreal
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setPointSizeF){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setPointSizeF( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  pixelSize
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QFont, pixelSize){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->pixelSize());
	}
}


/*********************************
 *    class     QFont
 *    function  setPixelSize
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setPixelSize){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setPixelSize((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  weight
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QFont, weight){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->weight());
	}
}


/*********************************
 *    class     QFont
 *    function  setWeight
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setWeight){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setWeight((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  bold
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, bold){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->bold());
	}
}


/*********************************
 *    class     QFont
 *    function  setBold
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setBold){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setBold((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  setStyle
 *    flags:    
 *
 *    @param   Style
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setStyle){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setStyle( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  style
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Style
*********************************/
ZEND_METHOD(QFont, style){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
	}
}


/*********************************
 *    class     QFont
 *    function  italic
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, italic){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->italic());
	}
}


/*********************************
 *    class     QFont
 *    function  setItalic
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setItalic){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setItalic((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  underline
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, underline){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->underline());
	}
}


/*********************************
 *    class     QFont
 *    function  setUnderline
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setUnderline){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setUnderline((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  overline
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, overline){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->overline());
	}
}


/*********************************
 *    class     QFont
 *    function  setOverline
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setOverline){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setOverline((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  strikeOut
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, strikeOut){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->strikeOut());
	}
}


/*********************************
 *    class     QFont
 *    function  setStrikeOut
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setStrikeOut){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setStrikeOut((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  fixedPitch
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, fixedPitch){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->fixedPitch());
	}
}


/*********************************
 *    class     QFont
 *    function  setFixedPitch
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setFixedPitch){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setFixedPitch((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  kerning
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, kerning){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->kerning());
	}
}


/*********************************
 *    class     QFont
 *    function  setKerning
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setKerning){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setKerning((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  styleHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   StyleHint
*********************************/
ZEND_METHOD(QFont, styleHint){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->styleHint());
	}
}


/*********************************
 *    class     QFont
 *    function  styleStrategy
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   StyleStrategy
*********************************/
ZEND_METHOD(QFont, styleStrategy){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->styleStrategy());
	}
}


/*********************************
 *    class     QFont
 *    function  setStyleHint
 *    flags:    
 *
 *    @param   StyleHint
 *    @param   StyleStrategy
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setStyleHint){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// PreferDefault
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setStyleHint((StyleHint) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  setStyleStrategy
 *    flags:    
 *
 *    @param   StyleStrategy
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setStyleStrategy){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setStyleStrategy( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  stretch
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QFont, stretch){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->stretch());
	}
}


/*********************************
 *    class     QFont
 *    function  setStretch
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setStretch){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setStretch((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  rawMode
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, rawMode){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->rawMode());
	}
}


/*********************************
 *    class     QFont
 *    function  setRawMode
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setRawMode){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setRawMode((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  exactMatch
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, exactMatch){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->exactMatch());
	}
}


/*********************************
 *    class     QFont
 *    function  isCopyOf
 *    flags:    c
 *
 *    @param   const QFont&
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, isCopyOf){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->isCopyOf( tmp_var_0));
	}
}


/*********************************
 *    class     QFont
 *    function  handle
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::HANDLE
*********************************/
ZEND_METHOD(QFont, handle){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		Qt::HANDLE obj = (Qt::HANDLE) o->handle();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  setRawName
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, setRawName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->setRawName( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  rawName
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, rawName){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->rawName();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  key
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, key){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->key();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  toString
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, toString){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->toString();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  fromString
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QFont, fromString){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_BOOL(o->fromString( tmp_var_0));
	}
}


/*********************************
 *    class     QFont
 *    function  defaultFamily
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, defaultFamily){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->defaultFamily();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  lastResortFamily
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, lastResortFamily){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->lastResortFamily();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  lastResortFont
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, lastResortFont){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->lastResortFont();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  resolve
 *    flags:    c
 *
 *    @param   const QFont&
 *    @param   -

 *    @access   public
 *    @return   QFont
*********************************/
ZEND_METHOD(QFont, resolve){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		QFont obj = (QFont) o->resolve( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: resolve
	}
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		RETURN_LONG(o->resolve());
// marked for overloading: resolve
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->resolve((uint) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  substitute
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QFont, substitute){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		QString obj = (QString) o->substitute( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  substitutes
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   QStringList
*********************************/
ZEND_METHOD(QFont, substitutes){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		QStringList obj = (QStringList) o->substitutes( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  substitutions
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QStringList
*********************************/
ZEND_METHOD(QFont, substitutions){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		QStringList obj = (QStringList) o->substitutions();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QFont_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QFont
 *    function  insertSubstitution
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, insertSubstitution){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->insertSubstitution( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  insertSubstitutions
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   const QStringList&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, insertSubstitutions){
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->insertSubstitutions( tmp_var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  removeSubstitution
 *    flags:    s
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, removeSubstitution){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->removeSubstitution( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  initialize
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, initialize){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->initialize();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  cleanup
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, cleanup){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->cleanup();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QFont
 *    function  cacheStatistics
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QFont, cacheStatistics){
	if (ZEND_NUM_ARGS() == 0){
		QFont *o = (QFont*) PHP_QT_FETCH();
		o->cacheStatistics();
		RETURN_NULL();

	}
}


ZEND_METHOD(QFont,__construct){

	QFont *QFont_ptr = new QFont();

	if(ZEND_NUM_ARGS() == 0){
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"") == FAILURE) {
			return;
		}
	}

	if(ZEND_NUM_ARGS() == 4){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &param_1, &param_2, &param_3, &param_4) == FAILURE) {
			return;
		}
		 /*zval* family QString&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_0));
			QFont_ptr = new QFont(tmp);
		}
		 /*long pointSize int*/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_1));
			QFont_ptr = new QFont(tmp);
		}
		 /*long weight int*/
		if(Z_TYPE_P(param_2) == IS_LONG) {
			int tmp(Z_STRVAL_P(param_2));
			QFont_ptr = new QFont(tmp);
		}
		 /*bool italic bool*/
		if(Z_TYPE_P(param_3) == IS_BOOL) {
			bool tmp(Z_STRVAL_P(param_3));
			QFont_ptr = new QFont(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* arg1 QFont&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QFont& tmp(Z_STRVAL_P(param_0));
			QFont_ptr = new QFont(tmp);
		}
		 /*long pd QPaintDevice**/
		if(Z_TYPE_P(param_1) == IS_LONG) {
			QPaintDevice* tmp(Z_STRVAL_P(param_1));
			QFont_ptr = new QFont(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* arg1 QFont&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QFont& tmp(Z_STRVAL_P(param_0));
			QFont_ptr = new QFont(tmp);
		}
	}

	PHP_QT_REGISTER(QFont_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QFont);

