/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDragMoveEvent.cpp - QDragMoveEvent PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QDragMoveEvent>



/*********************************
 *    class     QDragMoveEvent
 *    function  answerRect
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QRect
*********************************/
ZEND_METHOD(QDragMoveEvent, answerRect){
	if (ZEND_NUM_ARGS() == 0){
		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
		QRect obj = (QRect) o->answerRect();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QDragMoveEvent_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QDragMoveEvent
 *    function  accept
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDragMoveEvent, accept){
	if (ZEND_NUM_ARGS() == 0){
		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
		o->accept();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QDragMoveEvent
 *    function  ignore
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QDragMoveEvent, ignore){
	if (ZEND_NUM_ARGS() == 0){
		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
		o->ignore();
		RETURN_NULL();
// marked for overloading: accept
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
		o->accept( tmp_var_0);
		RETURN_NULL();
// marked for overloading: ignore
	}
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QDragMoveEvent *o = (QDragMoveEvent*) PHP_QT_FETCH();
		o->ignore( tmp_var_0);
		RETURN_NULL();

	}
}


ZEND_METHOD(QDragMoveEvent,__construct){

	QDragMoveEvent *QDragMoveEvent_ptr = new QDragMoveEvent();

	if(ZEND_NUM_ARGS() == 6){
		zval* param_0;
		zval* param_1;
		zval* param_2;
		zval* param_3;
		zval* param_4;
		zval* param_5;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &param_1, &param_2, &param_3, &param_4, &param_5, &param_6) == FAILURE) {
			return;
		}
		 /*long pos QPoint&*/
		if(Z_TYPE_P(param_0) == IS_LONG) {
			QPoint& tmp(Z_STRVAL_P(param_0));
			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
		}
		 /*zval* actions Qt::DropActions*/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			Qt::DropActions tmp(Z_STRVAL_P(param_1));
			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
		}
		 /*zval* data QMimeData**/
		if(Z_TYPE_P(param_2) == IS_OBJECT) {
			QMimeData* tmp(Z_STRVAL_P(param_2));
			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
		}
		 /*zval* buttons Qt::MouseButtons*/
		if(Z_TYPE_P(param_3) == IS_OBJECT) {
			Qt::MouseButtons tmp(Z_STRVAL_P(param_3));
			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
		}
		 /*zval* modifiers Qt::KeyboardModifiers*/
		if(Z_TYPE_P(param_4) == IS_OBJECT) {
			Qt::KeyboardModifiers tmp(Z_STRVAL_P(param_4));
			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
		}
		 /*long type Type*/
		if(Z_TYPE_P(param_5) == IS_LONG) {
			Type tmp(Z_STRVAL_P(param_5));
			QDragMoveEvent_ptr = new QDragMoveEvent(tmp);
		}
	}

	PHP_QT_REGISTER(QDragMoveEvent_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QDragMoveEvent);

