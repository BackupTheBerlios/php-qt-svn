/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLineEdit.cpp - QLineEdit PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QLineEdit>



/*		public enumEchoMode:long {
			EchoMode = 0,
			EchoMode = 1,
			EchoMode = 2
		}
*/

/*********************************
 *    class     QLineEdit
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QLineEdit, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QLineEdit, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QLineEdit, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QLineEdit
 *    function  QLineEdit
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QLineEdit, QLineEdit){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_~(o->QLineEdit());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  text
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLineEdit, text){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QString obj = (QString) o->text();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  displayText
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLineEdit, displayText){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QString obj = (QString) o->displayText();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  maxLength
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLineEdit, maxLength){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_LONG(o->maxLength());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setMaxLength
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setMaxLength){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"maxLength",strlen("maxLength"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setFrame
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setFrame){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"frame",strlen("frame"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  hasFrame
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, hasFrame){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasFrame());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  echoMode
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   EchoMode
*********************************/
ZEND_METHOD(QLineEdit, echoMode){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_LONG(o->echoMode());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setEchoMode
 *    flags:    
 *
 *    @param   EchoMode
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setEchoMode){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"echoMode",strlen("echoMode"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  isReadOnly
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, isReadOnly){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->isReadOnly());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setReadOnly
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setReadOnly){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"readOnly",strlen("readOnly"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setValidator
 *    flags:    
 *
 *    @param   const QValidator*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setValidator){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->setValidator( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  validator
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QValidator *
*********************************/
ZEND_METHOD(QLineEdit, validator){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		const QValidator * obj = (const QValidator *) o->validator();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLineEdit, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QSize obj = (QSize) o->sizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  minimumSizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLineEdit, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QSize obj = (QSize) o->minimumSizeHint();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cursorPosition
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLineEdit, cursorPosition){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_LONG(o->cursorPosition());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setCursorPosition
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setCursorPosition){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"cursorPosition",strlen("cursorPosition"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cursorPositionAt
 *    flags:    
 *
 *    @param   const QPoint&
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLineEdit, cursorPositionAt){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_LONG(o->cursorPositionAt((const QPoint&) var_0));
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setAlignment
 *    flags:    
 *
 *    @param   Qt::Alignment
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setAlignment){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"alignment",strlen("alignment"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  alignment
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Qt::Alignment
*********************************/
ZEND_METHOD(QLineEdit, alignment){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		Qt::Alignment obj = (Qt::Alignment) o->alignment();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cursorForward
 *    flags:    
 *
 *    @param   bool
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, cursorForward){
	if (ZEND_NUM_ARGS() == 2){
	// 
		bool* var_0;
	// 1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->cursorForward((bool) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cursorBackward
 *    flags:    
 *
 *    @param   bool
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, cursorBackward){
	if (ZEND_NUM_ARGS() == 2){
	// 
		bool* var_0;
	// 1
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"bl", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->cursorBackward((bool) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cursorWordForward
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, cursorWordForward){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->cursorWordForward((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cursorWordBackward
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, cursorWordBackward){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->cursorWordBackward((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  backspace
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, backspace){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->backspace();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  del
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, del){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->del();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  home
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, home){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->home((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  end
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, end){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->end((bool) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  isModified
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, isModified){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->isModified());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setModified
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setModified){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"modified",strlen("modified"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setSelection
 *    flags:    
 *
 *    @param   int
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setSelection){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		long var_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->setSelection((int) var_0, (int) var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  hasSelectedText
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, hasSelectedText){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasSelectedText());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  selectedText
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLineEdit, selectedText){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QString obj = (QString) o->selectedText();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  selectionStart
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLineEdit, selectionStart){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_LONG(o->selectionStart());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  isUndoAvailable
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, isUndoAvailable){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->isUndoAvailable());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  isRedoAvailable
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, isRedoAvailable){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->isRedoAvailable());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setDragEnabled
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setDragEnabled){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property_bool(Z_OBJCE_P(getThis()),getThis(),"dragEnabled",strlen("dragEnabled"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  dragEnabled
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, dragEnabled){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->dragEnabled());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  inputMask
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLineEdit, inputMask){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QString obj = (QString) o->inputMask();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setInputMask
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setInputMask){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"inputMask",strlen("inputMask"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  hasAcceptableInput
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, hasAcceptableInput){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->hasAcceptableInput());
	}
}


/*********************************
 *    class     QLineEdit
 *    function  deselect
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, deselect){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->deselect();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  insert
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, insert){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->insert( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  createStandardContextMenu
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   QMenu *
*********************************/
ZEND_METHOD(QLineEdit, createStandardContextMenu){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QMenu * obj = (QMenu *) o->createStandardContextMenu();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  inputMethodQuery
 *    flags:    c
 *
 *    @param   Qt::InputMethodQuery
 *    @param   -

 *    @access   public
 *    @return   QVariant
*********************************/
ZEND_METHOD(QLineEdit, inputMethodQuery){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QVariant obj = (QVariant) o->inputMethodQuery( tmp_var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  event
 *    flags:    
 *
 *    @param   QEvent*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLineEdit, event){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		RETURN_BOOL(o->event( tmp_var_0));
	}
}


/*********************************
 *    class     QLineEdit
 *    function  setText
 *    flags:    l
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, setText){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"text",strlen("text"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QLineEdit
 *    function  clear
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, clear){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->clear();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  selectAll
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, selectAll){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->selectAll();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  undo
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, undo){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->undo();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  redo
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, redo){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->redo();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  cut
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, cut){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->cut();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  copy
 *    flags:    cl
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, copy){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->copy();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  paste
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLineEdit, paste){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		o->paste();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QLineEdit
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QLineEdit, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLineEdit, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QLineEdit
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLineEdit, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QLineEdit *o = (QLineEdit*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QLineEdit_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             

	}
}


ZEND_METHOD(QLineEdit,__construct){

	QLineEdit *QLineEdit_ptr = new QLineEdit();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_0));
			QLineEdit_ptr = new QLineEdit(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* arg1 QString&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QString& tmp(Z_STRVAL_P(param_0));
			QLineEdit_ptr = new QLineEdit(tmp);
		}
		 /*zval* parent QWidget**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QWidget* tmp(Z_STRVAL_P(param_1));
			QLineEdit_ptr = new QLineEdit(tmp);
		}
	}

	PHP_QT_REGISTER(QLineEdit_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QLineEdit);

