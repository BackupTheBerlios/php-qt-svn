/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QObject.cpp - QObject PHP implementation.
 * begin           : Wed Jan  4 01:19:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


/*********************************
 *    class     QObject
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QObject, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QObject, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QObject, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject
	}
}


/*********************************
 *    class     QObject
 *    function  QObject
 *    flags:    v
 *
 *    @param   -

 *    @access   public
 *    @return   ~
*********************************/
ZEND_METHOD(QObject, QObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  event
 *    flags:    v
 *
 *    @param   QEvent*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, event){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  eventFilter
 *    flags:    v
 *
 *    @param   QObject*
 *    @param   QEvent*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, eventFilter){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// marked for overloading: metaObject
	}
ZEND_METHOD(QObject, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  objectName
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QObject, objectName){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->objectName();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  setObjectName
 *    flags:    
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, setObjectName){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		zend_update_property(Z_OBJCE_P(getThis()),getThis(),"objectName",strlen("objectName"),var_0 TSRMLS_CC);
	}
	}
}


/*********************************
 *    class     QObject
 *    function  isWidgetType
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, isWidgetType){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->isWidgetType());
	}
}


/*********************************
 *    class     QObject
 *    function  signalsBlocked
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, signalsBlocked){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->signalsBlocked());
	}
}


/*********************************
 *    class     QObject
 *    function  blockSignals
 *    flags:    
 *
 *    @param   bool
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, blockSignals){
	if (ZEND_NUM_ARGS() == 1){
	// 
		bool* var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->blockSignals((bool) var_0));
	}
}


/*********************************
 *    class     QObject
 *    function  thread
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QThread *
*********************************/
ZEND_METHOD(QObject, thread){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		QThread * obj = (QThread *) o->thread();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  moveToThread
 *    flags:    
 *
 *    @param   QThread*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, moveToThread){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->moveToThread( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  startTimer
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QObject, startTimer){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_LONG(o->startTimer((int) var_0));
	}
}


/*********************************
 *    class     QObject
 *    function  killTimer
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, killTimer){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->killTimer((int) var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  children
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   const QObjectList &
*********************************/
ZEND_METHOD(QObject, children){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		const QObjectList & obj = (const QObjectList &) o->children();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  setParent
 *    flags:    
 *
 *    @param   QObject*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, setParent){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->setParent( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  installEventFilter
 *    flags:    
 *
 *    @param   QObject*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, installEventFilter){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->installEventFilter( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  removeEventFilter
 *    flags:    
 *
 *    @param   QObject*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, removeEventFilter){
	if (ZEND_NUM_ARGS() == 1){
	// 
		zval* var_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->removeEventFilter( tmp_var_0);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  connect
 *    flags:    c
 *
 *    @param   const QObject*
 *    @param   const char*
 *    @param   const char*
 *    @param   Qt::ConnectionType
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, connect){
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		char* var_1;
		int* len_1;

	// 
		char* var_2;
		int* len_2;

	// Qt::AutoConnection
		zval* var_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osso", &var_0, &var_1, &len_1, &var_2, &len_2, &var_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_3 = (QObject*) php_qt_fetch(var_3);
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->connect( tmp_var_0,  var_1,  var_2,  tmp_var_3));
	}
}


/*********************************
 *    class     QObject
 *    function  disconnect
 *    flags:    
 *
 *    @param   const char*
 *    @param   const QObject*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, disconnect){
	if (ZEND_NUM_ARGS() == 3){
	// 0
		char* var_0;
		int* len_0;

	// 0
		zval* var_1;

	// 0
		char* var_2;
		int* len_2;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sos", &var_0, &len_0, &var_1, &var_2, &len_2) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->disconnect( var_0,  tmp_var_1,  var_2));
// marked for overloading: disconnect
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		zval* var_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"os", &var_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->disconnect( tmp_var_0,  var_1));
	}
}


/*********************************
 *    class     QObject
 *    function  dumpObjectTree
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, dumpObjectTree){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->dumpObjectTree();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  dumpObjectInfo
 *    flags:    
 *
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, dumpObjectInfo){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->dumpObjectInfo();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  setProperty
 *    flags:    
 *
 *    @param   const char*
 *    @param   const QVariant&
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, setProperty){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_0, &len_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->setProperty( var_0,  tmp_var_1));
	}
}


/*********************************
 *    class     QObject
 *    function  property
 *    flags:    c
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QVariant
*********************************/
ZEND_METHOD(QObject, property){
	if (ZEND_NUM_ARGS() == 1){
	// 
		char* var_0;
		int* len_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QVariant obj = (QVariant) o->property( var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  setUserData
 *    flags:    
 *
 *    @param   uint
 *    @param   QObjectUserData*
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QObject, setUserData){
	if (ZEND_NUM_ARGS() == 2){
	// 
		long var_0;
	// 
		zval* var_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_0, &var_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_1 = (QObject*) php_qt_fetch(var_1);
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->setUserData((uint) var_0,  tmp_var_1);
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  userData
 *    flags:    c
 *
 *    @param   uint
 *    @param   -

 *    @access   public
 *    @return   QObjectUserData*
*********************************/
ZEND_METHOD(QObject, userData){
	if (ZEND_NUM_ARGS() == 1){
	// 
		long var_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QObjectUserData* obj = (QObjectUserData*) o->userData((uint) var_0);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  parent
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QObject *
*********************************/
ZEND_METHOD(QObject, parent){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		QObject * obj = (QObject *) o->parent();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  inherits
 *    flags:    c
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QObject, inherits){
	if (ZEND_NUM_ARGS() == 1){
	// 
		char* var_0;
		int* len_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->inherits( var_0));
	}
}


/*********************************
 *    class     QObject
 *    function  deleteLater
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QObject, deleteLater){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		o->deleteLater();
		RETURN_NULL();
	}
}


/*********************************
 *    class     QObject
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QObject, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QObject, tr){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QObject, trUtf8){
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: tr
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: trUtf8
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: tr
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->tr( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: trUtf8
	}
	if (ZEND_NUM_ARGS() == 2){
	// 
		char* var_0;
		int* len_0;

	// 0
		char* var_1;
		int* len_1;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		QString obj = (QString) o->trUtf8( var_0,  var_1);
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
// marked for overloading: connect
	}
	if (ZEND_NUM_ARGS() == 5){
	// 
		zval* var_0;

	// 
		char* var_1;
		int* len_1;

	// 
		zval* var_2;

	// 
		char* var_3;
		int* len_3;

	// Qt::AutoConnection
		zval* var_4;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ososo", &var_0, &var_1, &len_1, &var_2, &var_3, &len_3, &var_4) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject* tmp_var_4 = (QObject*) php_qt_fetch(var_4);
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->connect( tmp_var_0,  var_1,  tmp_var_2,  var_3,  tmp_var_4));
// marked for overloading: disconnect
	}
	if (ZEND_NUM_ARGS() == 4){
	// 
		zval* var_0;

	// 
		char* var_1;
		int* len_1;

	// 
		zval* var_2;

	// 
		char* var_3;
		int* len_3;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"osos", &var_0, &var_1, &len_1, &var_2, &var_3, &len_3) == FAILURE) {
			RETURN_FALSE;
		}
		QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
		QObject* tmp_var_2 = (QObject*) php_qt_fetch(var_2);
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_BOOL(o->disconnect( tmp_var_0,  var_1,  tmp_var_2,  var_3));
	}
}


/*********************************
 *    class     QObject
 *    function  registerUserData
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   uint
*********************************/
ZEND_METHOD(QObject, registerUserData){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_LONG(o->registerUserData());
	}
}


/*********************************
 *    class     QObject
 *    function  sender
 *    flags:    c
 *
 *    @param   -

 *    @access   protected
 *    @return   QObject *
*********************************/
ZEND_METHOD(QObject, sender){
	if (ZEND_NUM_ARGS() == 0){
		QObject *o = (QObject*) PHP_QT_FETCH();
		QObject * obj = (QObject *) o->sender();
		zend_class_entry *ce;                                   
		    object_init_ex(return_value, QObject_ce_ptr);     
		    zend_rsrc_list_entry le;                            
		    le.ptr = &obj;                                       
		    php_qt_register(return_value,le);                   
		    return;                                             
	}
}


/*********************************
 *    class     QObject
 *    function  receivers
 *    flags:    c
 *
 *    @param   const char*
 *    @param   -

 *    @access   protected
 *    @return   int
*********************************/
ZEND_METHOD(QObject, receivers){
	if (ZEND_NUM_ARGS() == 1){
	// 
		char* var_0;
		int* len_0;

		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_0, &len_0) == FAILURE) {
			RETURN_FALSE;
		}
		QObject *o = (QObject*) PHP_QT_FETCH();
		RETURN_LONG(o->receivers( var_0));
	}
}


/*********************************
 *    class     QObject
 *    function  connectNotify
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QObject, connectNotify){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
	}
}


/*********************************
 *    class     QObject
 *    function  disconnectNotify
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   protected
 *    @return   void
*********************************/
ZEND_METHOD(QObject, disconnectNotify){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

	}
}


ZEND_METHOD(QObject,__construct){

	QObject *QObject_ptr = new QObject();

	if(ZEND_NUM_ARGS() == 1){
		zval* param_0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &param_1) == FAILURE) {
			return;
		}
		 /*zval* parent QObject**/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QObject* tmp(Z_STRVAL_P(param_0));
			QObject_ptr = new QObject(tmp);
		}
	}

	if(ZEND_NUM_ARGS() == 2){
		zval* param_0;
		zval* param_1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &param_1, &param_2) == FAILURE) {
			return;
		}
		 /*zval* dd QObjectPrivate&*/
		if(Z_TYPE_P(param_0) == IS_OBJECT) {
			QObjectPrivate& tmp(Z_STRVAL_P(param_0));
			QObject_ptr = new QObject(tmp);
		}
		 /*zval* parent QObject**/
		if(Z_TYPE_P(param_1) == IS_OBJECT) {
			QObject* tmp(Z_STRVAL_P(param_1));
			QObject_ptr = new QObject(tmp);
		}
	}

	PHP_QT_REGISTER(QObject_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QObject);

