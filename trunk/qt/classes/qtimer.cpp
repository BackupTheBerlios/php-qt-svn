/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTimer.cpp - QTimer PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QTimer>
#include "../php_qt.h"


/*********************************
 *    class     QTimer */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QTimer, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();


				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTimer_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_invoke){
}

/*********************************
 *    class     QTimer */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QTimer, staticMetaObject){
}

/*********************************
 *    class     QTimer */
/*
 *    function  setInterval
 *    flags:    
 */
ZEND_METHOD(QTimer, setInterval){
		/* l public*/

		/* int msec,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();


			obj->setInterval((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QTimer, qObject){
}

/*********************************
 *    class     QTimer */
/*
 *    function  timerId
 *    flags:    c
 */
ZEND_METHOD(QTimer, timerId){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			RETURN_LONG(obj->timerId());
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  singleShot
 *    flags:    s
 */
ZEND_METHOD(QTimer, singleShot){
		/* los public*/

		/* int msec, qt_QObject* receiver, const char* member,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_STRING){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QObject")) {
				obj->singleShot((int) Z_LVAL_P(z_0), (QObject*) obj_z_1, (const char*) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_cast){
}

/*********************************
 *    class     QTimer */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QTimer, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTimer_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  stop
 *    flags:    l
 */
ZEND_METHOD(QTimer, stop){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			obj->stop();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  isActive
 *    flags:    c
 */
ZEND_METHOD(QTimer, isActive){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isActive());
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  QTimer
 *    flags:    t
 */
ZEND_METHOD(QTimer, __construct){
		/* o public*/

		/* qt_QObject* parent,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QObject")) {
				QTimer *QTimer_ptr = new QTimer((QObject*) obj_z_0);
				PHP_QT_REGISTER(QTimer_ptr);
				RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_emit){
}

/*********************************
 *    class     QTimer */
/*
 *    function  interval
 *    flags:    c
 */
ZEND_METHOD(QTimer, interval){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			RETURN_LONG(obj->interval());
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  setSingleShot
 *    flags:    
 */
ZEND_METHOD(QTimer, setSingleShot){
		/* l public*/

		/* int singleShot,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();


			obj->setSingleShot((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QTimer, className){
}

/*********************************
 *    class     QTimer */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QTimer, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();


				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTimer_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QTimer, qt_property){
}

/*********************************
 *    class     QTimer */
/*
 *    function  isSingleShot
 *    flags:    c
 */
ZEND_METHOD(QTimer, isSingleShot){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSingleShot());
	}
}

/*********************************
 *    class     QTimer */
/*
 *    function  start
 *    flags:    l
 */
ZEND_METHOD(QTimer, start){
	if (ZEND_NUM_ARGS() == 0){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();
			obj->start();
			RETURN_NULL();
	}
		/* l public_slots*/

		/* int msec,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QTimer *obj = (QTimer*) PHP_QT_FETCH();


			obj->start((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}


PHP_QT_DESTRUCT(QTimer);

