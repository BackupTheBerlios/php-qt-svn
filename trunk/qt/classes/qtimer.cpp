/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTimer.cpp - QTimer PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QTimer>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QTimer_php_qt:public QTimer
{

public:
  QTimer_php_qt(zval * zend_ptr, QObject * parent = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QTimer_php_qt::QTimer_php_qt(zval * zend_ptr, QObject * parent):QTimer(parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QTimer",&staticMetaObject));
}

PHP_QT_MOC(QTimer);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QTimer, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QTimer::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QTimer::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QTimer::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method timeout
 * 
 * @param: -
 * @param: -
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method singleShot
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int msecs0
 * @param	 QObject *receivers1
 * @param	 const char *members2
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QTimer, singleShot)
{
  ///int msecs0, QObject *receivers1, const char *members2
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_STRING) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_1), 46)) {
        /// try int msecs0, QObject *receivers1, const char *members2,
        QTimer *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_1 = static_cast < QObject * >(php_qt_fetch(arg_1));

        if (getThis() == NULL) {
          RETURN_VOID(QTimer::singleShot((int)Z_LVAL_P(arg_0), (QObject *) cpp_arg_1, (const char *)&Z_STRVAL_P(arg_2)[0]));
        } else {
          RETURN_VOID(selfpointer->singleShot((int)Z_LVAL_P(arg_0), (QObject *) cpp_arg_1, (const char *)&Z_STRVAL_P(arg_2)[0]));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::singleShot(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method start
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int msecs0
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QTimer, start)
{
  ///int msecs0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'start' is not static");
        RETURN_NULL();
      }
      /// try int msecs0,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->start((int)Z_LVAL_P(arg_0)));
    }
  }
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'start' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->start());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::start(...) ");
}

/*!
 * method timerEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QTimerEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QTimer, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QTimer::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QTimer::staticMetaObject(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method timerId
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTimer, timerId)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'timerId' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->timerId());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::timerId(...) ");
}

/*!
 * method killTimer
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	private
 * @return	void
 * @flags	
 */

ZEND_METHOD(QTimer, killTimer)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
/// method is private, skip
      php_error(E_ERROR, "QTimer::killTimer(...) cannot be called with 'int ints0,'.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::killTimer(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method isSingleShot
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QTimer, isSingleShot)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isSingleShot' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isSingleShot());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::isSingleShot(...) ");
}

/*!
 * method interval
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTimer, interval)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'interval' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->interval());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::interval(...) ");
}

/*!
 * method setInterval
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int msecs0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QTimer, setInterval)
{
  ///int msecs0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setInterval' is not static");
        RETURN_NULL();
      }
      /// try int msecs0,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setInterval((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::setInterval(...) ");
}

/*!
 * method stop
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QTimer, stop)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'stop' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->stop());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::stop(...) ");
}

/*!
 * method isActive
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QTimer, isActive)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isActive' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isActive());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::isActive(...) ");
}

/*!
 * method QTimer
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *parent = 0s0
 * 
 * overloaded args:
 * @param	const QTimer &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QTimer, __construct)
{
  ///QObject *parent = 0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimer_php_qt *
        selfpointer = new QTimer_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QObject *parent = 0s0,
      QObject *
        cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
      QTimer_php_qt *
        selfpointer = new QTimer_php_qt(getThis(), (QObject *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///const QTimer &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QTimer
      if (inherits(Z_OBJCE_P(arg_0), 64)) {
/// method is private, skip
        php_error(E_ERROR, "QTimer::__construct(...) cannot be called with 'const QTimer &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::QTimer(...) ");
}

/*!
 * method setSingleShot
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool singleShots0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QTimer, setSingleShot)
{
  ///bool singleShots0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setSingleShot' is not static");
        RETURN_NULL();
      }
      /// try bool singleShots0,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setSingleShot((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::setSingleShot(...) ");
}

/*!
 * method startTimer
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	private
 * @return	int
 * @flags	
 */

ZEND_METHOD(QTimer, startTimer)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
/// method is private, skip
      php_error(E_ERROR, "QTimer::startTimer(...) cannot be called with 'int ints0,'.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimer::startTimer(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QTimer, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QTimer::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QTimer *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimer * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QTimer::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QTimer::trUtf8(...) ");
}
