/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTimerEvent.cpp - QTimerEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QTimerEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QTimerEvent_php_qt:public QTimerEvent
{

public:
  QTimerEvent_php_qt(zval * zend_ptr, int timerIds0);


  zval *zend_ptr;
};
QTimerEvent_php_qt::QTimerEvent_php_qt(zval * zend_ptr, int timerIds0):
QTimerEvent(timerIds0)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method timerId
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTimerEvent, timerId)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'timerId' is not static");
        RETURN_NULL();
      }
      /// try 
      QTimerEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTimerEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->timerId());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimerEvent::timerId(...) ");
}

/*!
 * method QTimerEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int timerIds0s0
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QTimerEvent, __construct)
{
  ///int timerIds0s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int timerIds0s0,
      QTimerEvent_php_qt *selfpointer = new QTimerEvent_php_qt(getThis(), (int)Z_LVAL_P(arg_0));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  php_error(E_ERROR, "could not parse argument in QTimerEvent::QTimerEvent(...) ");
}
