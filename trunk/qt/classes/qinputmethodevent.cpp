/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QInputMethodEvent>
#include <QMetaMethod>
class QInputMethodEvent_php_qt:public QInputMethodEvent
{

public:
  QInputMethodEvent_php_qt(zval * zend_ptr);
  QInputMethodEvent_php_qt(zval * zend_ptr, const QString & preeditTexts0, const QList < Attribute > &attributess1);
    QInputMethodEvent_php_qt(zval * zend_ptr, const QInputMethodEvent & others0);


  zval *zend_ptr;
};

QInputMethodEvent_php_qt::QInputMethodEvent_php_qt(zval * zend_ptr):QInputMethodEvent()
{
  this->zend_ptr = zend_ptr;
}
QInputMethodEvent_php_qt::QInputMethodEvent_php_qt(zval * zend_ptr, const QString & preeditTexts0, const QList < Attribute > &attributess1):
QInputMethodEvent(preeditTexts0, attributess1)
{
  this->zend_ptr = zend_ptr;
}
QInputMethodEvent_php_qt::QInputMethodEvent_php_qt(zval * zend_ptr, const QInputMethodEvent & others0):
QInputMethodEvent(others0)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method commitString
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QString &
 * @flags	c
 */

ZEND_METHOD(QInputMethodEvent, commitString)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'commitString' is not static");
        RETURN_NULL();
      }
      /// try 
      QInputMethodEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QString & >(selfpointer->commitString());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::commitString(...) ");
}

/*!
 * method attributes
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QList<Attribute> &
 * @flags	c
 */

ZEND_METHOD(QInputMethodEvent, attributes)
{
  ///
#ifdef PHP_QT_QList             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'attributes' is not static");
        RETURN_NULL();
      }
      /// try 
      QInputMethodEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QList < Attribute > &>(selfpointer->attributes());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::attributes(...) ");
}

/*!
 * method replacementLength
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QInputMethodEvent, replacementLength)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'replacementLength' is not static");
        RETURN_NULL();
      }
      /// try 
      QInputMethodEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->replacementLength());
    }
  }
  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::replacementLength(...) ");
}

/*!
 * method replacementStart
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QInputMethodEvent, replacementStart)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'replacementStart' is not static");
        RETURN_NULL();
      }
      /// try 
      QInputMethodEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->replacementStart());
    }
  }
  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::replacementStart(...) ");
}

/*!
 * method preeditString
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QString &
 * @flags	c
 */

ZEND_METHOD(QInputMethodEvent, preeditString)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'preeditString' is not static");
        RETURN_NULL();
      }
      /// try 
      QInputMethodEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QString & >(selfpointer->preeditString());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::preeditString(...) ");
}

/*!
 * method setCommitString
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &commitStrings0
 * @param	 int replaceFrom = 0s1
 * @param	 int replaceLength = 0s2
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QInputMethodEvent, setCommitString)
{
  ///const QString &commitStrings0, int replaceFrom = 0s1, int replaceLength = 0s2
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setCommitString' is not static");
          RETURN_NULL();
        }
        /// try const QString &commitStrings0,
        QInputMethodEvent *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setCommitString((const QString &)*cpp_arg_0));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    arg_0 = invokeToQString(arg_0);
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setCommitString' is not static");
          RETURN_NULL();
        }
        /// try const QString &commitStrings0, int replaceFrom = 0s1,
        QInputMethodEvent *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setCommitString((const QString &)*cpp_arg_0, (int)Z_LVAL_P(arg_1)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    arg_0 = invokeToQString(arg_0);
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setCommitString' is not static");
          RETURN_NULL();
        }
        /// try const QString &commitStrings0, int replaceFrom = 0s1, int replaceLength = 0s2,
        QInputMethodEvent *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QInputMethodEvent * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setCommitString((const QString &)*cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::setCommitString(...) ");
}

/*!
 * method QInputMethodEvent
 * 
 * @param: -
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &preeditTexts0
 * @param	const QList<Attribute> &attributess1
 * 
 * overloaded args:
 * @param	const QInputMethodEvent &others0
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QInputMethodEvent, __construct)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QInputMethodEvent_php_qt *selfpointer = new QInputMethodEvent_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///const QString &preeditTexts0,const QList<Attribute> &attributess1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QString
#ifdef PHP_QT_QList
      if (inherits(Z_OBJCE_P(arg_0), 59) && inherits(Z_OBJCE_P(arg_1), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &preeditTexts0,const QList<Attribute> &attributess1,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        QList < Attribute > *cpp_arg_1 = static_cast < QList < Attribute > *>(php_qt_fetch(arg_1));
        QInputMethodEvent_php_qt *selfpointer = new QInputMethodEvent_php_qt(getThis(), (const QString &)*cpp_arg_0, (const QList < Attribute > &)*cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  ///const QInputMethodEvent &others0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QInputMethodEvent
      if (inherits(Z_OBJCE_P(arg_0), 33)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QInputMethodEvent &others0,
        QInputMethodEvent *cpp_arg_0 = static_cast < QInputMethodEvent * >(php_qt_fetch(arg_0));
        QInputMethodEvent_php_qt *selfpointer = new QInputMethodEvent_php_qt(getThis(), (const QInputMethodEvent &)*cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QInputMethodEvent::QInputMethodEvent(...) ");
}
