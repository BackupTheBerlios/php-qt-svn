/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QInputMethodEvent.cpp - QInputMethodEvent PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QInputMethodEvent>
#include "../php_qt.h"



/*		public enumAttributeType:long {
			AttributeType = 0,
			AttributeType = 0,
			AttributeType = 0,
			AttributeType = 0,
		}
*/
/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  commitString
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, commitString){
	if (ZEND_NUM_ARGS() == 0){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
				const QString & return_object = (const QString &) obj->commitString();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  replacementStart
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, replacementStart){
	if (ZEND_NUM_ARGS() == 0){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->replacementStart());
	}
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  setCommitString
 *    flags:    
 */
ZEND_METHOD(QInputMethodEvent, setCommitString){
		/* oll public*/

		/* const QString& commitString, int replaceFrom, int replaceLength,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->setCommitString((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  replacementLength
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, replacementLength){
	if (ZEND_NUM_ARGS() == 0){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->replacementLength());
	}
}

/*********************************
 *    class     QInputMethodEvent */
/*
 *    function  preeditString
 *    flags:    c
 */
ZEND_METHOD(QInputMethodEvent, preeditString){
	if (ZEND_NUM_ARGS() == 0){
			QInputMethodEvent *obj = (QInputMethodEvent*) PHP_QT_FETCH();
				const QString & return_object = (const QString &) obj->preeditString();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QInputMethodEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}


PHP_QT_DESTRUCT(QInputMethodEvent);

