/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLCDNumber.cpp - QLCDNumber PHP implementation.
 * begin           : Thu Jan 19 02:44:10 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QLCDNumber>
#include "../php_qt.h"



/*		public enumMode:long {
			Mode = 0,
			Mode = 1,
			Mode = 2,
			Mode = 3
		}
*/

/*		public enumSegmentStyle:long {
			SegmentStyle = 0,
			SegmentStyle = 1,
			SegmentStyle = 2
		}
*/
/*********************************
 *    class     QLCDNumber */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QLCDNumber, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLCDNumber_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  segmentStyle
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, segmentStyle){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
				QLCDNumber::SegmentStyle return_object = (QLCDNumber::SegmentStyle) obj->segmentStyle();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLCDNumber_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  mode
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, mode){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			RETURN_LONG(obj->mode());
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  checkOverflow
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, checkOverflow){
		/* l public*/

		/* double num,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


			RETURN_BOOL(obj->checkOverflow((double) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QLCDNumber, qt_invoke){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QLCDNumber, staticMetaObject){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setOctMode
 *    flags:    l
 */
ZEND_METHOD(QLCDNumber, setOctMode){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			obj->setOctMode();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  display
 *    flags:    l
 */
ZEND_METHOD(QLCDNumber, display){
		/* l public_slots*/

		/* int num,  */
		/* o public_slots*/

		/* const QString& str,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


			obj->display((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
				obj->display((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setSegmentStyle
 *    flags:    
 */
ZEND_METHOD(QLCDNumber, setSegmentStyle){
		/* o public*/

		/* QLCDNumber::SegmentStyle ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


			obj->setSegmentStyle((QLCDNumber::SegmentStyle) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setHexMode
 *    flags:    l
 */
ZEND_METHOD(QLCDNumber, setHexMode){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			obj->setHexMode();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QLCDNumber, qObject){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setSmallDecimalPoint
 *    flags:    l
 */
ZEND_METHOD(QLCDNumber, setSmallDecimalPoint){
		/* l public_slots*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


			obj->setSmallDecimalPoint((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->sizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLCDNumber_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QLCDNumber, qt_cast){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QLCDNumber, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLCDNumber_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  value
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, value){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			RETURN_DOUBLE(obj->value());
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setDecMode
 *    flags:    l
 */
ZEND_METHOD(QLCDNumber, setDecMode){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			obj->setDecMode();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QLCDNumber, qt_emit){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QLCDNumber, className){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  intValue
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, intValue){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			RETURN_LONG(obj->intValue());
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  QLCDNumber
 *    flags:    t
 */
ZEND_METHOD(QLCDNumber, __construct){
		/* o public*/

		/* qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((QWidget*) obj_z_0);
				PHP_QT_REGISTER(QLCDNumber_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* lo public*/

		/* unsigned int numDigits, qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(1 == 1) {
				QLCDNumber *QLCDNumber_ptr = new QLCDNumber((uint) Z_LVAL_P(z_0), (QWidget*) obj_z_1);
				PHP_QT_REGISTER(QLCDNumber_ptr);
				RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setNumDigits
 *    flags:    
 */
ZEND_METHOD(QLCDNumber, setNumDigits){
		/* l public*/

		/* int nDigits,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


			obj->setNumDigits((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  numDigits
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, numDigits){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			RETURN_LONG(obj->numDigits());
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setMode
 *    flags:    
 */
ZEND_METHOD(QLCDNumber, setMode){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


			obj->setMode((QLCDNumber::Mode) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QLCDNumber, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();


				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLCDNumber_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QLCDNumber, qt_property){
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  smallDecimalPoint
 *    flags:    c
 */
ZEND_METHOD(QLCDNumber, smallDecimalPoint){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			RETURN_BOOL(obj->smallDecimalPoint());
	}
}

/*********************************
 *    class     QLCDNumber */
/*
 *    function  setBinMode
 *    flags:    l
 */
ZEND_METHOD(QLCDNumber, setBinMode){
	if (ZEND_NUM_ARGS() == 0){
			QLCDNumber *obj = (QLCDNumber*) PHP_QT_FETCH();
			obj->setBinMode();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QLCDNumber);

