/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QCharRef.cpp - QCharRef PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QCharRef>
/*!
 * method row
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	uchar
 * @flags	c
 */

ZEND_METHOD(QCharRef, row)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type uchar");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::row(...) ");
}

/*!
 * method category
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar::Category
 * @flags	c
 */

ZEND_METHOD(QCharRef, category)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::category(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::category(...) ");
}

/*!
 * method digitValue
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QCharRef, digitValue)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::digitValue(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::digitValue(...) ");
}

/*!
 * method isPrint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isPrint)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isPrint(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isPrint(...) ");
}

/*!
 * method mirroredChar
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar
 * @flags	c
 */

ZEND_METHOD(QCharRef, mirroredChar)
{
  ///
#ifdef PHP_QT_QChar             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::mirroredChar(...) cannot be called with ''.");
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCharRef::mirroredChar(...) ");
}

/*!
 * method isSpace
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isSpace)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isSpace(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isSpace(...) ");
}

/*!
 * method decomposition
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QCharRef, decomposition)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::decomposition(...) cannot be called with ''.");
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCharRef::decomposition(...) ");
}

/*!
 * method toUpper
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar
 * @flags	c
 */

ZEND_METHOD(QCharRef, toUpper)
{
  ///
#ifdef PHP_QT_QChar             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::toUpper(...) cannot be called with ''.");
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCharRef::toUpper(...) ");
}

/*!
 * method isPunct
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isPunct)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isPunct(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isPunct(...) ");
}

/*!
 * method direction
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar::Direction
 * @flags	c
 */

ZEND_METHOD(QCharRef, direction)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::direction(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::direction(...) ");
}

/*!
 * method hasMirrored
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, hasMirrored)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::hasMirrored(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::hasMirrored(...) ");
}

/*!
 * method setRow
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	uchar rows0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QCharRef, setRow)
{
// notice: unknown argument uchar rows0, skipped
  php_error(E_ERROR, "could not parse argument in QCharRef::setRow(...) ");
}

/*!
 * method isLetter
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isLetter)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isLetter(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isLetter(...) ");
}

/*!
 * method unicodeVersion
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar::UnicodeVersion
 * @flags	c
 */

ZEND_METHOD(QCharRef, unicodeVersion)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::unicodeVersion(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::unicodeVersion(...) ");
}

/*!
 * method toAscii
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char
 * @flags	c
 */

ZEND_METHOD(QCharRef, toAscii)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::toAscii(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::toAscii(...) ");
}

/*!
 * method combiningClass
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	uchar
 * @flags	c
 */

ZEND_METHOD(QCharRef, combiningClass)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type uchar");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::combiningClass(...) ");
}

/*!
 * method joining
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar::Joining
 * @flags	c
 */

ZEND_METHOD(QCharRef, joining)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::joining(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::joining(...) ");
}

/*!
 * method toLatin1
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char
 * @flags	c
 */

ZEND_METHOD(QCharRef, toLatin1)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::toLatin1(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::toLatin1(...) ");
}

/*!
 * method QCharRef
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QString &strs0
 * @param	 int idxs1
 * 
 * @access	private
 * @return	
 * @flags	
 */

ZEND_METHOD(QCharRef, __construct)
{
  ///QString &strs0, int idxs1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
/// method is private, skip
        php_error(E_ERROR, "QCharRef::__construct(...) cannot be called with 'QString &strs0, int idxs1,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::QCharRef(...) ");
}

/*!
 * method operator QChar
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	
 * @flags	c
 */

/*!
 * method isDigit
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isDigit)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isDigit(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isDigit(...) ");
}

/*!
 * method decompositionTag
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar::Decomposition
 * @flags	c
 */

ZEND_METHOD(QCharRef, decompositionTag)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::decompositionTag(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::decompositionTag(...) ");
}

/*!
 * method toLower
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QChar
 * @flags	c
 */

ZEND_METHOD(QCharRef, toLower)
{
  ///
#ifdef PHP_QT_QChar             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::toLower(...) cannot be called with ''.");
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCharRef::toLower(...) ");
}

/*!
 * method unicode
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const ushort
 * @flags	c
 */

ZEND_METHOD(QCharRef, unicode)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::unicode(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::unicode(...) ");
}

/*!
 * method cell
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	uchar
 * @flags	c
 */

ZEND_METHOD(QCharRef, cell)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type uchar");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::cell(...) ");
}

/*!
 * method isLetterOrNumber
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QCharRef, isLetterOrNumber)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isLetterOrNumber(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isLetterOrNumber(...) ");
}

/*!
 * method setCell
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	uchar cells0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QCharRef, setCell)
{
// notice: unknown argument uchar cells0, skipped
  php_error(E_ERROR, "could not parse argument in QCharRef::setCell(...) ");
}

/*!
 * method isNumber
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isNumber)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isNumber(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isNumber(...) ");
}

/*!
 * method isMark
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isMark)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isMark(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isMark(...) ");
}

/*!
 * method isNull
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QCharRef, isNull)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCharRef::isNull(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCharRef::isNull(...) ");
}

/*!
 * method operator=
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QChar &cs0
 * 
 * overloaded args:
 * @param	char c
 * 
 * overloaded args:
 * @param	uchar c
 * 
 * overloaded args:
 * @param	const QCharRef &c
 * 
 * overloaded args:
 * @param	ushort rc
 * 
 * overloaded args:
 * @param	short rc
 * 
 * overloaded args:
 * @param	uint rc
 * 
 * overloaded args:
 * @param	int rc
 * 
 * @access	public
 * @return	QCharRef &
 * @flags	
 */
