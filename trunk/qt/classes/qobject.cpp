/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QObject.cpp - QObject PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QObject>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QObject_php_qt:public QObject
{

public:
  QObject_php_qt(zval * zend_ptr, QObject * parent = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QObject_php_qt::QObject_php_qt(zval * zend_ptr, QObject * parent):QObject(parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QObject",&staticMetaObject));
}

PHP_QT_MOC(QObject);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * overloaded args:
 * @param	const char *
 * @param	 const char *
 * 
 * overloaded args:
 * @param	const char *sourceText
 * @param	 const char * = 0
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QObject, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type


  ///const char *, const char *
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try const char *, const char *,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type


  ///const char *sourceText, const char * = 0
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try const char *sourceText,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try const char *sourceText, const char * = 0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::tr(...) ");
}

/*!
 * method children
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QObjectList &
 * @flags	c
 */

ZEND_METHOD(QObject, children)
{
  ///
#ifdef PHP_QT_QObjectList       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'children' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = &const_cast < QObjectList & >(selfpointer->children());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::children(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method installEventFilter
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, installEventFilter)
{
  ///QObject *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'installEventFilter' is not static");
          RETURN_NULL();
        }
        /// try QObject *s0,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->installEventFilter((QObject *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::installEventFilter(...) ");
}

/*!
 * method destroyed
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject * = 0s0
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method setProperty
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *names0
 * @param	 const QVariant  &values1
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QObject, setProperty)
{
  ///const char *names0, const QVariant  &values1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QVariant
      if (inherits(Z_OBJCE_P(arg_1), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setProperty' is not static");
          RETURN_NULL();
        }
        /// try const char *names0, const QVariant  &values1,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QVariant *
          cpp_arg_1 = static_cast < QVariant * >(php_qt_fetch(arg_1));

        RETURN_BOOL(selfpointer->setProperty((const char *)&Z_STRVAL_P(arg_0)[0], (const QVariant &)*cpp_arg_1));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::setProperty(...) ");
}

/*!
 * method property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *names0
 * 
 * @access	public
 * @return	QVariant
 * @flags	c
 */

ZEND_METHOD(QObject, property)
{
  ///const char *names0
#ifdef PHP_QT_QVariant          // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'property' is not static");
        RETURN_NULL();
      }
      /// try const char *names0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QVariant *
        return_object = new QVariant;

      *return_object = static_cast < QVariant > (selfpointer->property((const char *)&Z_STRVAL_P(arg_0)[0]));
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::property(...) ");
}

/*!
 * method dumpObjectInfo
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, dumpObjectInfo)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'dumpObjectInfo' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->dumpObjectInfo());
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::dumpObjectInfo(...) ");
}

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method timerEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QTimerEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	v
 */

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QObject, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QObject::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::staticMetaObject(...) ");
}

/*!
 * method userData
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	uint ids0
 * 
 * @access	public
 * @return	QObjectUserData*
 * @flags	c
 */

ZEND_METHOD(QObject, userData)
{
  ///uint ids0
#ifdef PHP_QT_QObjectUserData   // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'userData' is not static");
        RETURN_NULL();
      }
      /// try uint ids0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QObjectUserData * >(selfpointer->userData((uint) Z_LVAL_P(arg_0)));
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::userData(...) ");
}

/*!
 * method setUserData
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	uint ids0
 * @param	 QObjectUserData * datas1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, setUserData)
{
  ///uint ids0, QObjectUserData * datas1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QObjectUserData
      if (inherits(Z_OBJCE_P(arg_1), 48)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setUserData' is not static");
          RETURN_NULL();
        }
        /// try uint ids0, QObjectUserData * datas1,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObjectUserData *
          cpp_arg_1 = static_cast < QObjectUserData * >(php_qt_fetch(arg_1));

        RETURN_VOID(selfpointer->setUserData((uint) Z_LVAL_P(arg_0), (QObjectUserData *) cpp_arg_1));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::setUserData(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method setParent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, setParent)
{
  ///QObject *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setParent' is not static");
          RETURN_NULL();
        }
        /// try QObject *s0,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setParent((QObject *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::setParent(...) ");
}

/*!
 * method killTimer
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ids0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, killTimer)
{
  ///int ids0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'killTimer' is not static");
        RETURN_NULL();
      }
      /// try int ids0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->killTimer((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::killTimer(...) ");
}

/*!
 * method childEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QChildEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	v
 */

/*!
 * method moveToThread
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QThread *threads0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, moveToThread)
{
  ///QThread *threads0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QThread
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'moveToThread' is not static");
          RETURN_NULL();
        }
        /// try QThread *threads0,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QThread *
          cpp_arg_0 = static_cast < QThread * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->moveToThread((QThread *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::moveToThread(...) ");
}

/*!
 * method dumpObjectTree
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, dumpObjectTree)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'dumpObjectTree' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->dumpObjectTree());
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::dumpObjectTree(...) ");
}

/*!
 * method eventFilter
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * @param	 QEvent *s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method removeEventFilter
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, removeEventFilter)
{
  ///QObject *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'removeEventFilter' is not static");
          RETURN_NULL();
        }
        /// try QObject *s0,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->removeEventFilter((QObject *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::removeEventFilter(...) ");
}

/*!
 * method connectNotify
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *signals0
 * 
 * @access	protected
 * @return	void
 * @flags	v
 */

/*!
 * method disconnect
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *signal = 0s0
 * @param	 const QObject *receiver = 0s1
 * @param	 const char *member = 0s2
 * 
 * overloaded args:
 * @param	const QObject *receiver
 * @param	 const char *member = 0
 * 
 * overloaded args:
 * @param	const QObject *sender
 * @param	 const char *signal
 * @param	 const QObject *receiver
 * @param	 const char *member
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QObject, disconnect)
{
  ///const char *signal = 0s0, const QObject *receiver = 0s1, const char *member = 0s2
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'disconnect' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->disconnect());
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'disconnect' is not static");
        RETURN_NULL();
      }
      /// try const char *signal = 0s0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->disconnect((const char *)&Z_STRVAL_P(arg_0)[0]));
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'disconnect' is not static");
        RETURN_NULL();
      }
      /// try const char *signal = 0s0, const QObject *receiver = 0s1,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      QObject *
        cpp_arg_1 = static_cast < QObject * >(php_qt_fetch(arg_1));

      RETURN_BOOL(selfpointer->disconnect((const char *)&Z_STRVAL_P(arg_0)[0], (const QObject *)cpp_arg_1));
    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_STRING) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'disconnect' is not static");
        RETURN_NULL();
      }
      /// try const char *signal = 0s0, const QObject *receiver = 0s1, const char *member = 0s2,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      QObject *
        cpp_arg_1 = static_cast < QObject * >(php_qt_fetch(arg_1));

      RETURN_BOOL(selfpointer->disconnect((const char *)&Z_STRVAL_P(arg_0)[0], (const QObject *)cpp_arg_1, (const char *)&Z_STRVAL_P(arg_2)[0]));
    }
  }
  ///const QObject *receiver, const char *member = 0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'disconnect' is not static");
          RETURN_NULL();
        }
        /// try const QObject *receiver,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_BOOL(selfpointer->disconnect((const QObject *)cpp_arg_0));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'disconnect' is not static");
          RETURN_NULL();
        }
        /// try const QObject *receiver, const char *member = 0,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_BOOL(selfpointer->disconnect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0]));
      }
#endif

    }
  }
  ///const QObject *sender, const char *signal, const QObject *receiver, const char *member
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING && Z_TYPE_P(arg_2) == IS_OBJECT && Z_TYPE_P(arg_3) == IS_STRING) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_2), 46)) {
        /// try const QObject *sender, const char *signal, const QObject *receiver, const char *member,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
        QObject *
          cpp_arg_2 = static_cast < QObject * >(php_qt_fetch(arg_2));

        if (getThis() == NULL) {
          RETURN_BOOL(QObject::
                      disconnect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const QObject *)cpp_arg_2,
                                 (const char *)&Z_STRVAL_P(arg_3)[0]));
        } else {
          RETURN_BOOL(selfpointer->
                      disconnect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const QObject *)cpp_arg_2,
                                 (const char *)&Z_STRVAL_P(arg_3)[0]));
      }}
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::disconnect(...) ");
}

/*!
 * method deleteLater
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QObject, deleteLater)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'deleteLater' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->deleteLater());
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::deleteLater(...) ");
}

/*!
 * method disconnectNotify
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *signals0
 * 
 * @access	protected
 * @return	void
 * @flags	v
 */

/*!
 * method registerUserData
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	uint
 * @flags	s
 */

ZEND_METHOD(QObject, registerUserData)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QObject::registerUserData());
      } else {
        RETURN_LONG(selfpointer->registerUserData());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::registerUserData(...) ");
}

/*!
 * method parent
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject *
 * @flags	c
 */

ZEND_METHOD(QObject, parent)
{
  ///
#ifdef PHP_QT_QObject           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'parent' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QObject * >(selfpointer->parent());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::parent(...) ");
}

/*!
 * method receivers
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char * signals0
 * 
 * @access	protected
 * @return	int
 * @flags	c
 */

/*!
 * method event
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method thread
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QThread *
 * @flags	c
 */

ZEND_METHOD(QObject, thread)
{
  ///
#ifdef PHP_QT_QThread           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'thread' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QThread * >(selfpointer->thread());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::thread(...) ");
}

/*!
 * method isWidgetType
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QObject, isWidgetType)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isWidgetType' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isWidgetType());
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::isWidgetType(...) ");
}

/*!
 * method sender
 * 
 * @param: -
 * @param: -
 * 
 * @access	protected
 * @return	QObject *
 * @flags	c
 */

/*!
 * method signalsBlocked
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QObject, signalsBlocked)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'signalsBlocked' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->signalsBlocked());
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::signalsBlocked(...) ");
}

/*!
 * method setObjectName
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &names0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QObject, setObjectName)
{
  ///const QString &names0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setObjectName' is not static");
          RETURN_NULL();
        }
        /// try const QString &names0,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QString *
          cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setObjectName((const QString &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::setObjectName(...) ");
}

/*!
 * method connect
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QObject *senders0
 * @param	 const char *signals1
 * @param	 const char *members2
 * @param	 Qt::ConnectionType type = Qt::AutoConnection s3
 * 
 * overloaded args:
 * @param	const QObject *sender
 * @param	 const char *signal
 * @param	 const QObject *receiver
 * @param	 const char *member
 * @param	 Qt::ConnectionType = Qt::AutoConnection 
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QObject, connect)
{
  ///const QObject *senders0, const char *signals1, const char *members2, Qt::ConnectionType type = Qt::AutoConnection s3
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING && Z_TYPE_P(arg_2) == IS_STRING) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'connect' is not static");
          RETURN_NULL();
        }
        /// try const QObject *senders0, const char *signals1, const char *members2,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_BOOL(selfpointer->connect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const char *)&Z_STRVAL_P(arg_2)[0]));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING && Z_TYPE_P(arg_2) == IS_STRING && Z_TYPE_P(arg_3) == IS_LONG) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'connect' is not static");
          RETURN_NULL();
        }
        /// try const QObject *senders0, const char *signals1, const char *members2, Qt::ConnectionType type = Qt::AutoConnection s3,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        RETURN_BOOL(selfpointer->
                    connect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const char *)&Z_STRVAL_P(arg_2)[0],
                            (Qt::ConnectionType) Z_LVAL_P(arg_3)));
      }
#endif

    }
  }
  ///const QObject *sender, const char *signal, const QObject *receiver, const char *member, Qt::ConnectionType = Qt::AutoConnection 
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING && Z_TYPE_P(arg_2) == IS_OBJECT && Z_TYPE_P(arg_3) == IS_STRING) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_2), 46)) {
        /// try const QObject *sender, const char *signal, const QObject *receiver, const char *member,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
        QObject *
          cpp_arg_2 = static_cast < QObject * >(php_qt_fetch(arg_2));

        if (getThis() == NULL) {
          RETURN_BOOL(QObject::
                      connect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const QObject *)cpp_arg_2,
                              (const char *)&Z_STRVAL_P(arg_3)[0]));
        } else {
          RETURN_BOOL(selfpointer->
                      connect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const QObject *)cpp_arg_2,
                              (const char *)&Z_STRVAL_P(arg_3)[0]));
      }}
#endif

#endif

    }
  }
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING && Z_TYPE_P(arg_2) == IS_OBJECT && Z_TYPE_P(arg_3) == IS_STRING &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_2), 46)) {
        /// try const QObject *sender, const char *signal, const QObject *receiver, const char *member, Qt::ConnectionType = Qt::AutoConnection ,
        QObject *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
        }
        QObject *
          cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
        QObject *
          cpp_arg_2 = static_cast < QObject * >(php_qt_fetch(arg_2));

        if (getThis() == NULL) {
          RETURN_BOOL(QObject::
                      connect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const QObject *)cpp_arg_2, (const char *)&Z_STRVAL_P(arg_3)[0],
                              (Qt::ConnectionType) Z_LVAL_P(arg_4)));
        } else {
          RETURN_BOOL(selfpointer->
                      connect((const QObject *)cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0], (const QObject *)cpp_arg_2, (const char *)&Z_STRVAL_P(arg_3)[0],
                              (Qt::ConnectionType) Z_LVAL_P(arg_4)));
      }}
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::connect(...) ");
}

/*!
 * method blockSignals
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bs0
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QObject, blockSignals)
{
  ///bool bs0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'blockSignals' is not static");
        RETURN_NULL();
      }
      /// try bool bs0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->blockSignals((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::blockSignals(...) ");
}

/*!
 * method objectName
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QObject, objectName)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'objectName' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      *return_object = static_cast < QString > (selfpointer->objectName());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::objectName(...) ");
}

/*!
 * method customEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	v
 */

/*!
 * method QObject
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *parent=0s0
 * 
 * overloaded args:
 * @param	QObjectPrivate &dd
 * @param	 QObject *parent = 0
 * 
 * overloaded args:
 * @param	const QObject &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QObject, __construct)
{
  ///QObject *parent=0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QObject_php_qt *
        selfpointer = new QObject_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QObject *parent=0s0,
      QObject *
        cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
      QObject_php_qt *
        selfpointer = new QObject_php_qt(getThis(), (QObject *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///QObjectPrivate &dd, QObject *parent = 0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObjectPrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QObjectPrivate &dd,
        QObjectPrivate *
          cpp_arg_0 = static_cast < QObjectPrivate * >(php_qt_fetch(arg_0));
        QObject_php_qt *
          selfpointer = new QObject_php_qt(getThis(), (QObjectPrivate &) * cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QObjectPrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QObjectPrivate &dd, QObject *parent = 0,
        QObjectPrivate *
          cpp_arg_0 = static_cast < QObjectPrivate * >(php_qt_fetch(arg_0));
        QObject *
          cpp_arg_1 = static_cast < QObject * >(php_qt_fetch(arg_1));
        QObject_php_qt *
          selfpointer = new QObject_php_qt(getThis(), (QObjectPrivate &) * cpp_arg_0, (QObject *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QObject &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
/// method is private, skip
        php_error(E_ERROR, "QObject::__construct(...) cannot be called with 'const QObject &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::QObject(...) ");
}

/*!
 * method startTimer
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int intervals0
 * 
 * @access	public
 * @return	int
 * @flags	
 */

ZEND_METHOD(QObject, startTimer)
{
  ///int intervals0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'startTimer' is not static");
        RETURN_NULL();
      }
      /// try int intervals0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->startTimer((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::startTimer(...) ");
}

/*!
 * method inherits
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *classnames0
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QObject, inherits)
{
  ///const char *classnames0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'inherits' is not static");
        RETURN_NULL();
      }
      /// try const char *classnames0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->inherits((const char *)&Z_STRVAL_P(arg_0)[0]));
    }
  }
  php_error(E_ERROR, "could not parse argument in QObject::inherits(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * overloaded args:
 * @param	const char *
 * @param	 const char *
 * 
 * overloaded args:
 * @param	const char *sourceText
 * @param	 const char * = 0
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QObject, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type


  ///const char *, const char *
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try const char *, const char *,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type


  ///const char *sourceText, const char * = 0
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try const char *sourceText,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try const char *sourceText, const char * = 0,
      QObject *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QObject * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QObject::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QObject::trUtf8(...) ");
}
