/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDragMoveEvent.cpp - QDragMoveEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QDragMoveEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QDragMoveEvent_php_qt:public QDragMoveEvent
{

public:
  QDragMoveEvent_php_qt(zval * zend_ptr, const QPoint & poss0, Qt::DropActions actionss1, const QMimeData * datas2, Qt::MouseButtons buttonss3,
                        Qt::KeyboardModifiers modifierss4, Type type = DragMove);


  zval *zend_ptr;
};
QDragMoveEvent_php_qt::QDragMoveEvent_php_qt(zval * zend_ptr, const QPoint & poss0, Qt::DropActions actionss1, const QMimeData * datas2,
                                             Qt::MouseButtons buttonss3, Qt::KeyboardModifiers modifierss4, Type type):
QDragMoveEvent(poss0, actionss1, datas2, buttonss3, modifierss4, type)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method ignore
 * 
 * @param: -
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect & r
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDragMoveEvent, ignore)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'ignore' is not static");
        RETURN_NULL();
      }
      /// try 
      QDragMoveEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDragMoveEvent * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->ignore());
    }
  }
  ///const QRect & r
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'ignore' is not static");
          RETURN_NULL();
        }
        /// try const QRect & r,
        QDragMoveEvent *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QDragMoveEvent * >(PHP_QT_FETCH());
        }
        QRect *cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->ignore((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QDragMoveEvent::ignore(...) ");
}

/*!
 * method answerRect
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QRect
 * @flags	c
 */

ZEND_METHOD(QDragMoveEvent, answerRect)
{
  ///
#ifdef PHP_QT_QRect             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'answerRect' is not static");
        RETURN_NULL();
      }
      /// try 
      QDragMoveEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDragMoveEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QRect *return_object = new QRect;

      *return_object = static_cast < QRect > (selfpointer->answerRect());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDragMoveEvent::answerRect(...) ");
}

/*!
 * method QDragMoveEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPoint &poss0s0
 * @param	Qt::DropActions actionss1s1
 * @param	const QMimeData   *datas2s2
 * @param	Qt::MouseButtons buttonss3s3
 * @param	Qt::KeyboardModifiers modifierss4s4
 * @param	 Type type = DragMoves5
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QDragMoveEvent, __construct)
{
  ///const QPoint &poss0s0,Qt::DropActions actionss1s1,const QMimeData   *datas2s2,Qt::MouseButtons buttonss3s3,Qt::KeyboardModifiers modifierss4s4, Type type = DragMoves5
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_OBJECT && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QPoint
#ifdef PHP_QT_QMimeData
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_2), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint &poss0s0,Qt::DropActions actionss1s1,const QMimeData   *datas2s2,Qt::MouseButtons buttonss3s3,Qt::KeyboardModifiers modifierss4s4,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QMimeData *cpp_arg_2 = static_cast < QMimeData * >(php_qt_fetch(arg_2));
        QDragMoveEvent_php_qt *selfpointer =
          new QDragMoveEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (Qt::DropActions) Z_LVAL_P(arg_1), (const QMimeData *)cpp_arg_2,
                                    (Qt::MouseButtons) Z_LVAL_P(arg_3), (Qt::KeyboardModifiers) Z_LVAL_P(arg_4));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
// notice: unknown argument  Type type = DragMoves5, skipped
  php_error(E_ERROR, "could not parse argument in QDragMoveEvent::QDragMoveEvent(...) ");
}

/*!
 * method accept
 * 
 * @param: -
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect & r
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDragMoveEvent, accept)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'accept' is not static");
        RETURN_NULL();
      }
      /// try 
      QDragMoveEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDragMoveEvent * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->accept());
    }
  }
  ///const QRect & r
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'accept' is not static");
          RETURN_NULL();
        }
        /// try const QRect & r,
        QDragMoveEvent *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QDragMoveEvent * >(PHP_QT_FETCH());
        }
        QRect *cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->accept((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QDragMoveEvent::accept(...) ");
}
