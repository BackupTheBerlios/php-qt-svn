/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QFocusEvent.cpp - QFocusEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QFocusEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QFocusEvent_php_qt:public QFocusEvent
{

public:
  QFocusEvent_php_qt(zval * zend_ptr, Type types0, Qt::FocusReason reason = Qt::OtherFocusReason);


  zval *zend_ptr;
};

QFocusEvent_php_qt::QFocusEvent_php_qt(zval * zend_ptr, Type types0, Qt::FocusReason reason):QFocusEvent(types0, reason)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method gotFocus
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QFocusEvent, gotFocus)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'gotFocus' is not static");
        RETURN_NULL();
      }
      /// try 
      QFocusEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFocusEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->gotFocus());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFocusEvent::gotFocus(...) ");
}

/*!
 * method reason
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::FocusReason
 * @flags	
 */

ZEND_METHOD(QFocusEvent, reason)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'reason' is not static");
        RETURN_NULL();
      }
      /// try 
      QFocusEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFocusEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->reason());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFocusEvent::reason(...) ");
}

/*!
 * method lostFocus
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QFocusEvent, lostFocus)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'lostFocus' is not static");
        RETURN_NULL();
      }
      /// try 
      QFocusEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFocusEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->lostFocus());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFocusEvent::lostFocus(...) ");
}

/*!
 * method QFocusEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Type types0s0
 * @param	 Qt::FocusReason reason=Qt::OtherFocusReasons1
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QFocusEvent, __construct)
{
// notice: unknown argument Type types0s0, skipped
  php_error(E_ERROR, "could not parse argument in QFocusEvent::QFocusEvent(...) ");
}
