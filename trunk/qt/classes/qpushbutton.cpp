/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPushButton.cpp - QPushButton PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QPushButton>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QPushButton_php_qt:public QPushButton
{

public:
  QPushButton_php_qt(zval * zend_ptr, QWidget * parent = 0);
  QPushButton_php_qt(zval * zend_ptr, const QString & texts0, QWidget * parent = 0);
    QPushButton_php_qt(zval * zend_ptr, const QIcon & icons0, const QString & texts1, QWidget * parent = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QPushButton_php_qt::QPushButton_php_qt(zval * zend_ptr, QWidget * parent):QPushButton(parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QPushButton",&staticMetaObject));
}
QPushButton_php_qt::QPushButton_php_qt(zval * zend_ptr, const QString & texts0, QWidget * parent):
QPushButton(texts0, parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QPushButton",&staticMetaObject));
}
QPushButton_php_qt::QPushButton_php_qt(zval * zend_ptr, const QIcon & icons0, const QString & texts1, QWidget * parent):
QPushButton(icons0, texts1, parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QPushButton",&staticMetaObject));
}

PHP_QT_MOC(QPushButton);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QPushButton, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QPushButton::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QPushButton::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPushButton::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method QPushButton
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *parent=0s0
 * 
 * overloaded args:
 * @param	const QString &texts0
 * @param	 QWidget  *parent=0
 * 
 * overloaded args:
 * @param	const QIcon & icons0
 * @param	const QString &texts1
 * @param	 QWidget *parent=0
 * 
 * overloaded args:
 * @param	const QPushButton &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QPushButton, __construct)
{
  ///QWidget *parent=0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton_php_qt *selfpointer = new QPushButton_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget *parent=0s0,
      QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QPushButton_php_qt *selfpointer = new QPushButton_php_qt(getThis(), (QWidget *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///const QString &texts0, QWidget  *parent=0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &texts0,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        QPushButton_php_qt *selfpointer = new QPushButton_php_qt(getThis(), (const QString &)*cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    arg_0 = invokeToQString(arg_0);
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &texts0, QWidget  *parent=0,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        QWidget *cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QPushButton_php_qt *selfpointer = new QPushButton_php_qt(getThis(), (const QString &)*cpp_arg_0, (QWidget *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QIcon & icons0,const QString &texts1, QWidget *parent=0
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    arg_1 = invokeToQString(arg_1);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QIcon
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QIcon & icons0,const QString &texts1,
        QIcon *cpp_arg_0 = static_cast < QIcon * >(php_qt_fetch(arg_0));
        QString *cpp_arg_1 = static_cast < QString * >(php_qt_fetch(arg_1));
        QPushButton_php_qt *selfpointer = new QPushButton_php_qt(getThis(), (const QIcon &)*cpp_arg_0, (const QString &)*cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    arg_1 = invokeToQString(arg_1);
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_OBJECT) {
#ifdef PHP_QT_QIcon
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QIcon & icons0,const QString &texts1, QWidget *parent=0,
        QIcon *cpp_arg_0 = static_cast < QIcon * >(php_qt_fetch(arg_0));
        QString *cpp_arg_1 = static_cast < QString * >(php_qt_fetch(arg_1));
        QWidget *cpp_arg_2 = static_cast < QWidget * >(php_qt_fetch(arg_2));
        QPushButton_php_qt *selfpointer = new QPushButton_php_qt(getThis(), (const QIcon &)*cpp_arg_0, (const QString &)*cpp_arg_1, (QWidget *) cpp_arg_2);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  ///const QPushButton &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QPushButton
      if (inherits(Z_OBJCE_P(arg_0), 52)) {
/// method is private, skip
        php_error(E_ERROR, "QPushButton::__construct(...) cannot be called with 'const QPushButton &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::QPushButton(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method autoDefault
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QPushButton, autoDefault)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'autoDefault' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->autoDefault());
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::autoDefault(...) ");
}

/*!
 * method setMenu
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QMenu * menus0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QPushButton, setMenu)
{
  ///QMenu * menus0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QMenu
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setMenu' is not static");
          RETURN_NULL();
        }
        /// try QMenu * menus0,
        QPushButton *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
        }
        QMenu *cpp_arg_0 = static_cast < QMenu * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setMenu((QMenu *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::setMenu(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QPushButton, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QPushButton::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPushButton::staticMetaObject(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method isDefault
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QPushButton, isDefault)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isDefault' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isDefault());
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::isDefault(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setFlat
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QPushButton, setFlat)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setFlat' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setFlat((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::setFlat(...) ");
}

/*!
 * method focusOutEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QFocusEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setDefault
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QPushButton, setDefault)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setDefault' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setDefault((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::setDefault(...) ");
}

/*!
 * method paintEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QPaintEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method showMenu
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QPushButton, showMenu)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'showMenu' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->showMenu());
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::showMenu(...) ");
}

/*!
 * method setAutoDefault
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QPushButton, setAutoDefault)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setAutoDefault' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setAutoDefault((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::setAutoDefault(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QPushButton, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPushButton::sizeHint(...) ");
}

/*!
 * method keyPressEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QKeyEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method menu
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMenu*
 * @flags	c
 */

ZEND_METHOD(QPushButton, menu)
{
  ///
#ifdef PHP_QT_QMenu             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'menu' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = static_cast < QMenu * >(selfpointer->menu());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPushButton::menu(...) ");
}

/*!
 * method focusInEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QFocusEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QPushButton, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QPushButton::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QPushButton::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPushButton::trUtf8(...) ");
}

/*!
 * method isFlat
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QPushButton, isFlat)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isFlat' is not static");
        RETURN_NULL();
      }
      /// try 
      QPushButton *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPushButton * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isFlat());
    }
  }
  php_error(E_ERROR, "could not parse argument in QPushButton::isFlat(...) ");
}
