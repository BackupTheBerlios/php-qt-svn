/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWheelEvent.cpp - QWheelEvent PHP implementation.
 * begin           : Wed Jan 11 20:29:53 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QWheelEvent>
#include "../php_qt.h"


/*********************************
 *    class     QWheelEvent */
/*
 *    function  orientation
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, orientation){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->orientation());
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  x
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, x){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->x());
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  globalX
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, globalX){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->globalX());
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  globalPos
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, globalPos){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			const QPoint & return_object = (const QPoint &) obj->globalPos();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWheelEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
//				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  y
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, y){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->y());
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  delta
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, delta){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->delta());
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  globalY
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, globalY){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->globalY());
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  pos
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, pos){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			const QPoint & return_object = (const QPoint &) obj->pos();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWheelEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
//				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QWheelEvent */
/*
 *    function  buttons
 *    flags:    c
 */
ZEND_METHOD(QWheelEvent, buttons){
	if (ZEND_NUM_ARGS() == 0){
			QWheelEvent *obj = (QWheelEvent*) PHP_QT_FETCH();
			Qt::MouseButtons return_object = (Qt::MouseButtons) obj->buttons();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QWheelEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}


PHP_QT_DESTRUCT(QWheelEvent);

