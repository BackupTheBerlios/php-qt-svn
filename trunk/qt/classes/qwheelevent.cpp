/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWheelEvent.cpp - QWheelEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QWheelEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QWheelEvent_php_qt:public QWheelEvent
{

public:
  QWheelEvent_php_qt(zval * zend_ptr, const QPoint & poss0, int deltas1, Qt::MouseButtons buttonss2, Qt::KeyboardModifiers modifierss3, Qt::Orientation orient =
                     Qt::Vertical);
    QWheelEvent_php_qt(zval * zend_ptr, const QPoint & poss0, const QPoint & globalPoss1, int deltas2, Qt::MouseButtons buttonss3,
                       Qt::KeyboardModifiers modifierss4, Qt::Orientation orient = Qt::Vertical);


  zval *zend_ptr;
};
QWheelEvent_php_qt::QWheelEvent_php_qt(zval * zend_ptr, const QPoint & poss0, int deltas1, Qt::MouseButtons buttonss2, Qt::KeyboardModifiers modifierss3,
                                       Qt::Orientation orient):
QWheelEvent(poss0, deltas1, buttonss2, modifierss3, orient)
{
  this->zend_ptr = zend_ptr;
}
QWheelEvent_php_qt::QWheelEvent_php_qt(zval * zend_ptr, const QPoint & poss0, const QPoint & globalPoss1, int deltas2, Qt::MouseButtons buttonss3,
                                       Qt::KeyboardModifiers modifierss4, Qt::Orientation orient):
QWheelEvent(poss0, globalPoss1, deltas2, buttonss3, modifierss4, orient)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method y
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, y)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'y' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->y());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::y(...) ");
}

/*!
 * method delta
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, delta)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'delta' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->delta());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::delta(...) ");
}

/*!
 * method QWheelEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPoint &poss0s0
 * @param	int deltas1s1
 * @param	Qt::MouseButtons buttonss2s2
 * @param	Qt::KeyboardModifiers modifierss3s3
 * @param	 Qt::Orientation orient = Qt::Verticals4
 * 
 * overloaded args:
 * @param	const QPoint &poss0
 * @param	const QPoint& globalPoss1
 * @param	int deltas2
 * @param	Qt::MouseButtons buttonss3
 * @param	Qt::KeyboardModifiers modifierss4
 * @param	 Qt::Orientation orient = Qt::Vertical
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QWheelEvent, __construct)
{
  ///const QPoint &poss0s0,int deltas1s1,Qt::MouseButtons buttonss2s2,Qt::KeyboardModifiers modifierss3s3, Qt::Orientation orient = Qt::Verticals4
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
#ifdef PHP_QT_QPoint
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint &poss0s0,int deltas1s1,Qt::MouseButtons buttonss2s2,Qt::KeyboardModifiers modifierss3s3,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QWheelEvent_php_qt *selfpointer =
          new QWheelEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (int)Z_LVAL_P(arg_1), (Qt::MouseButtons) Z_LVAL_P(arg_2),
                                 (Qt::KeyboardModifiers) Z_LVAL_P(arg_3));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QPoint
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint &poss0s0,int deltas1s1,Qt::MouseButtons buttonss2s2,Qt::KeyboardModifiers modifierss3s3, Qt::Orientation orient = Qt::Verticals4,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QWheelEvent_php_qt *selfpointer =
          new QWheelEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (int)Z_LVAL_P(arg_1), (Qt::MouseButtons) Z_LVAL_P(arg_2),
                                 (Qt::KeyboardModifiers) Z_LVAL_P(arg_3), (Qt::Orientation) Z_LVAL_P(arg_4));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QPoint &poss0,const QPoint& globalPoss1,int deltas2,Qt::MouseButtons buttonss3,Qt::KeyboardModifiers modifierss4, Qt::Orientation orient = Qt::Vertical
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QPoint
#ifdef PHP_QT_QPoint
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint &poss0,const QPoint& globalPoss1,int deltas2,Qt::MouseButtons buttonss3,Qt::KeyboardModifiers modifierss4,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QPoint *cpp_arg_1 = static_cast < QPoint * >(php_qt_fetch(arg_1));
        QWheelEvent_php_qt *selfpointer =
          new QWheelEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (const QPoint &)*cpp_arg_1, (int)Z_LVAL_P(arg_2), (Qt::MouseButtons) Z_LVAL_P(arg_3),
                                 (Qt::KeyboardModifiers) Z_LVAL_P(arg_4));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  if (ZEND_NUM_ARGS() == 6) {
    PHP_QT_FETCH_6_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG && Z_TYPE_P(arg_5) == IS_LONG) {
#ifdef PHP_QT_QPoint
#ifdef PHP_QT_QPoint
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint &poss0,const QPoint& globalPoss1,int deltas2,Qt::MouseButtons buttonss3,Qt::KeyboardModifiers modifierss4, Qt::Orientation orient = Qt::Vertical,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QPoint *cpp_arg_1 = static_cast < QPoint * >(php_qt_fetch(arg_1));
        QWheelEvent_php_qt *selfpointer =
          new QWheelEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (const QPoint &)*cpp_arg_1, (int)Z_LVAL_P(arg_2), (Qt::MouseButtons) Z_LVAL_P(arg_3),
                                 (Qt::KeyboardModifiers) Z_LVAL_P(arg_4), (Qt::Orientation) Z_LVAL_P(arg_5));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::QWheelEvent(...) ");
}

/*!
 * method pos
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPoint &
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, pos)
{
  ///
#ifdef PHP_QT_QPoint            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'pos' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QPoint & >(selfpointer->pos());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWheelEvent::pos(...) ");
}

/*!
 * method globalX
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, globalX)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'globalX' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->globalX());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::globalX(...) ");
}

/*!
 * method globalPos
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPoint &
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, globalPos)
{
  ///
#ifdef PHP_QT_QPoint            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'globalPos' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QPoint & >(selfpointer->globalPos());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWheelEvent::globalPos(...) ");
}

/*!
 * method buttons
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::MouseButtons
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, buttons)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'buttons' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->buttons());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::buttons(...) ");
}

/*!
 * method orientation
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientation
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, orientation)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'orientation' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->orientation());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::orientation(...) ");
}

/*!
 * method x
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, x)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'x' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->x());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::x(...) ");
}

/*!
 * method globalY
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QWheelEvent, globalY)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'globalY' is not static");
        RETURN_NULL();
      }
      /// try 
      QWheelEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWheelEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->globalY());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWheelEvent::globalY(...) ");
}
