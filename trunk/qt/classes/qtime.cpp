/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTime.cpp - QTime PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QTime>
#include "../php_qt.h"


/*********************************
 *    class     QTime */
/*
 *    function  hour
 *    flags:    c
 */
ZEND_METHOD(QTime, hour){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->hour());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  isValid
 *    flags:    c
 */
ZEND_METHOD(QTime, isValid){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isValid());
	}
		/* llll public*/

		/* int h, int m, int s, int ms,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QTime *obj = (QTime*) PHP_QT_FETCH();


			RETURN_BOOL(obj->isValid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3)));
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  elapsed
 *    flags:    c
 */
ZEND_METHOD(QTime, elapsed){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->elapsed());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  toString
 *    flags:    c
 */
ZEND_METHOD(QTime, toString){
		/* l public*/

		/* int f,  */
		/* o public*/

		/* const QString& format,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QTime *obj = (QTime*) PHP_QT_FETCH();


				QString return_object = (QString) obj->toString((Qt::DateFormat) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  msec
 *    flags:    c
 */
ZEND_METHOD(QTime, msec){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->msec());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  secsTo
 *    flags:    c
 */
ZEND_METHOD(QTime, secsTo){
		/* o public*/

		/* const QTime& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QTime") {
				RETURN_LONG(obj->secsTo((const QTime&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  restart
 *    flags:    
 */
ZEND_METHOD(QTime, restart){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->restart());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  fromString
 *    flags:    s
 */
ZEND_METHOD(QTime, fromString){
		/* ol public*/

		/* const QString& s, int f,  */
		/* oo public*/

		/* const QString& s, const QString& format,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QTime return_object = (QTime) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
					QTime return_object = (QTime) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  second
 *    flags:    c
 */
ZEND_METHOD(QTime, second){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->second());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  QTime
 *    flags:    
 */
ZEND_METHOD(QTime, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QTime *QTime_ptr = new QTime();
				PHP_QT_REGISTER(QTime_ptr);
				RETURN_NULL();
	}
		/* llll public*/

		/* int h, int m, int s, int ms,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){


			QTime *QTime_ptr = new QTime((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
				PHP_QT_REGISTER(QTime_ptr);
				RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  addSecs
 *    flags:    c
 */
ZEND_METHOD(QTime, addSecs){
		/* l public*/

		/* int secs,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QTime *obj = (QTime*) PHP_QT_FETCH();


				QTime return_object = (QTime) obj->addSecs((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  addMSecs
 *    flags:    c
 */
ZEND_METHOD(QTime, addMSecs){
		/* l public*/

		/* int ms,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QTime *obj = (QTime*) PHP_QT_FETCH();


				QTime return_object = (QTime) obj->addMSecs((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  currentTime
 *    flags:    s
 */
ZEND_METHOD(QTime, currentTime){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
				QTime return_object = (QTime) obj->currentTime();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  minute
 *    flags:    c
 */
ZEND_METHOD(QTime, minute){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->minute());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  setHMS
 *    flags:    
 */
ZEND_METHOD(QTime, setHMS){
		/* llll public*/

		/* int h, int m, int s, int ms,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QTime *obj = (QTime*) PHP_QT_FETCH();


			RETURN_BOOL(obj->setHMS((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3)));
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QTime, isNull){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  msecsTo
 *    flags:    c
 */
ZEND_METHOD(QTime, msecsTo){
		/* o public*/

		/* const QTime& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QTime") {
				RETURN_LONG(obj->msecsTo((const QTime&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QTime */
/*
 *    function  start
 *    flags:    
 */
ZEND_METHOD(QTime, start){
	if (ZEND_NUM_ARGS() == 0){
			QTime *obj = (QTime*) PHP_QT_FETCH();
			obj->start();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QTime);

