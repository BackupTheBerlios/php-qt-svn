/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QSpacerItem.cpp - QSpacerItem PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QSpacerItem>
#include <QMetaMethod>
class QSpacerItem_php_qt:public QSpacerItem
{

public:
  QSpacerItem_php_qt(zval * zend_ptr, int ws0, int hs1, QSizePolicy::Policy hData = QSizePolicy::Minimum, QSizePolicy::Policy vData = QSizePolicy::Minimum);


  zval *zend_ptr;
};
QSpacerItem_php_qt::QSpacerItem_php_qt(zval * zend_ptr, int ws0, int hs1, QSizePolicy::Policy hData, QSizePolicy::Policy vData):
QSpacerItem(ws0, hs1, hData, vData)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method spacerItem
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSpacerItem *
 * @flags	
 */

ZEND_METHOD(QSpacerItem, spacerItem)
{
  ///
#ifdef PHP_QT_QSpacerItem       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'spacerItem' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = static_cast < QSpacerItem * >(selfpointer->spacerItem());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QSpacerItem::spacerItem(...) ");
}

/*!
 * method changeSize
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ws0
 * @param	 int hs1
 * @param	 QSizePolicy::Policy hData = QSizePolicy::Minimums2
 * @param	 QSizePolicy::Policy vData = QSizePolicy::Minimums3
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QSpacerItem, changeSize)
{
  ///int ws0, int hs1, QSizePolicy::Policy hData = QSizePolicy::Minimums2, QSizePolicy::Policy vData = QSizePolicy::Minimums3
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'changeSize' is not static");
        RETURN_NULL();
      }
      /// try int ws0, int hs1,
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->changeSize((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'changeSize' is not static");
        RETURN_NULL();
      }
      /// try int ws0, int hs1, QSizePolicy::Policy hData = QSizePolicy::Minimums2,
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->changeSize((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1), (QSizePolicy::Policy) Z_LVAL_P(arg_2)));
    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'changeSize' is not static");
        RETURN_NULL();
      }
      /// try int ws0, int hs1, QSizePolicy::Policy hData = QSizePolicy::Minimums2, QSizePolicy::Policy vData = QSizePolicy::Minimums3,
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->
                  changeSize((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1), (QSizePolicy::Policy) Z_LVAL_P(arg_2), (QSizePolicy::Policy) Z_LVAL_P(arg_3)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QSpacerItem::changeSize(...) ");
}

/*!
 * method QSpacerItem
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ws0s0
 * @param	int hs1s1
 * @param	 QSizePolicy::Policy hData = QSizePolicy::Minimums2
 * @param	 QSizePolicy::Policy vData = QSizePolicy::Minimums3
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QSpacerItem, __construct)
{
  ///int ws0s0,int hs1s1, QSizePolicy::Policy hData = QSizePolicy::Minimums2, QSizePolicy::Policy vData = QSizePolicy::Minimums3
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int ws0s0,int hs1s1,
      QSpacerItem_php_qt *selfpointer = new QSpacerItem_php_qt(getThis(), (int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int ws0s0,int hs1s1, QSizePolicy::Policy hData = QSizePolicy::Minimums2,
      QSpacerItem_php_qt *selfpointer = new QSpacerItem_php_qt(getThis(), (int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1), (QSizePolicy::Policy) Z_LVAL_P(arg_2));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int ws0s0,int hs1s1, QSizePolicy::Policy hData = QSizePolicy::Minimums2, QSizePolicy::Policy vData = QSizePolicy::Minimums3,
      QSpacerItem_php_qt *selfpointer =
        new QSpacerItem_php_qt(getThis(), (int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1), (QSizePolicy::Policy) Z_LVAL_P(arg_2),
                               (QSizePolicy::Policy) Z_LVAL_P(arg_3));
      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  php_error(E_ERROR, "could not parse argument in QSpacerItem::QSpacerItem(...) ");
}

/*!
 * method expandingDirections
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientations
 * @flags	c
 */

ZEND_METHOD(QSpacerItem, expandingDirections)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'expandingDirections' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->expandingDirections());
    }
  }
  php_error(E_ERROR, "could not parse argument in QSpacerItem::expandingDirections(...) ");
}

/*!
 * method isEmpty
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QSpacerItem, isEmpty)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isEmpty' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isEmpty());
    }
  }
  php_error(E_ERROR, "could not parse argument in QSpacerItem::isEmpty(...) ");
}

/*!
 * method geometry
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QRect
 * @flags	c
 */

ZEND_METHOD(QSpacerItem, geometry)
{
  ///
#ifdef PHP_QT_QRect             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'geometry' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QRect *return_object = new QRect;

      *return_object = static_cast < QRect > (selfpointer->geometry());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QSpacerItem::geometry(...) ");
}

/*!
 * method setGeometry
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect &s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QSpacerItem, setGeometry)
{
  ///const QRect &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setGeometry' is not static");
          RETURN_NULL();
        }
        /// try const QRect &s0,
        QSpacerItem *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
        }
        QRect *cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setGeometry((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QSpacerItem::setGeometry(...) ");
}

/*!
 * method minimumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QSpacerItem, minimumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QSpacerItem::minimumSize(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QSpacerItem, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QSpacerItem::sizeHint(...) ");
}

/*!
 * method maximumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QSpacerItem, maximumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'maximumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QSpacerItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QSpacerItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->maximumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QSpacerItem::maximumSize(...) ");
}
