/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPaintDevice.cpp - QPaintDevice PHP implementation.
 * begin           : Tue Apr 11 10:33:13 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QPaintDevice>


/*		public enumPaintDeviceMetric:long {
			PdmWidth = 1,
			PaintDeviceMetric = 1,
			PaintDeviceMetric = 2,
			PaintDeviceMetric = 3,
			PaintDeviceMetric = 4,
			PaintDeviceMetric = 5,
			PaintDeviceMetric = 6,
			PaintDeviceMetric = 7,
			PaintDeviceMetric = 8,
			PaintDeviceMetric = 9
		}
*/
/*!
 *    @class     QPaintDevice
 *    @function  width
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, width)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->width());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  physicalDpiX
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, physicalDpiX)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->physicalDpiX());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  logicalDpiY
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, logicalDpiY)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->logicalDpiY());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  heightMM
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, heightMM)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->heightMM());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  paintingActive
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QPaintDevice, paintingActive)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_BOOL(obj->paintingActive());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  numColors
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, numColors)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->numColors());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  logicalDpiX
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, logicalDpiX)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->logicalDpiX());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  depth
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, depth)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->depth());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  height
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, height)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->height());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  physicalDpiY
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, physicalDpiY)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->physicalDpiY());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QPaintDevice
 *    @function  widthMM
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QPaintDevice, widthMM)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QPaintDevice *obj = (QPaintDevice *) PHP_QT_FETCH();

      RETURN_LONG(obj->widthMM());
    }                           /// 5 END getThis(), simple types
  }
}


PHP_QT_DESTRUCT(QPaintDevice);
