/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPaintDevice.cpp - QPaintDevice PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QPaintDevice>
/// DEBUG:destructor skipped.
/*!
 * method logicalDpiY
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, logicalDpiY)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::logicalDpiY(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::logicalDpiY(...) ");
}

/*!
 * method heightMM
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, heightMM)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::heightMM(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::heightMM(...) ");
}

/*!
 * method numColors
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, numColors)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::numColors(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::numColors(...) ");
}

/*!
 * method logicalDpiX
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, logicalDpiX)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::logicalDpiX(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::logicalDpiX(...) ");
}

/*!
 * method width
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, width)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::width(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::width(...) ");
}

/*!
 * method height
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, height)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::height(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::height(...) ");
}

/*!
 * method QPaintDevice
 * 
 * @param: -
 * @param: -
 * 
 * overloaded args:
 * @param	const QPaintDevice &
 * 
 * @access	protected
 * @return	
 * @flags	
 */

/*!
 * method devType
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	cv
 */

/*!
 * method widthMM
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, widthMM)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::widthMM(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::widthMM(...) ");
}

/*!
 * method depth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, depth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::depth(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::depth(...) ");
}

/*!
 * method physicalDpiY
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, physicalDpiY)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::physicalDpiY(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::physicalDpiY(...) ");
}

/*!
 * method physicalDpiX
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, physicalDpiX)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::physicalDpiX(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::physicalDpiX(...) ");
}

/*!
 * method paintEngine
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QPaintEngine *
 * @flags	cpv
 */

/*!
 * method metric
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	PaintDeviceMetric metrics0
 * 
 * @access	protected
 * @return	int
 * @flags	cv
 */

/*!
 * method paintingActive
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QPaintDevice, paintingActive)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QPaintDevice::paintingActive(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintDevice::paintingActive(...) ");
}
