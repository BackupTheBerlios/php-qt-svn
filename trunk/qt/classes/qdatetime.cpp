/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDateTime.cpp - QDateTime PHP implementation.
 * begin           : Thu Jan 19 02:44:10 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QDateTime>
#include "../php_qt.h"


/*********************************
 *    class     QDateTime */
/*
 *    function  time
 *    flags:    c
 */
ZEND_METHOD(QDateTime, time){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
				QTime return_object = (QTime) obj->time();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  date
 *    flags:    c
 */
ZEND_METHOD(QDateTime, date){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
				QDate return_object = (QDate) obj->date();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  isValid
 *    flags:    c
 */
ZEND_METHOD(QDateTime, isValid){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isValid());
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  toString
 *    flags:    c
 */
ZEND_METHOD(QDateTime, toString){
		/* l public*/

		/* int f,  */
		/* o public*/

		/* const QString& format,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


				QString return_object = (QString) obj->toString((Qt::DateFormat) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  toTime_t
 *    flags:    c
 */
ZEND_METHOD(QDateTime, toTime_t){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->toTime_t());
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  setTime_t
 *    flags:    
 */
ZEND_METHOD(QDateTime, setTime_t){
		/* l public*/

		/* unsigned int secsSince1Jan1970UTC,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


			obj->setTime_t((uint) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  addDays
 *    flags:    c
 */
ZEND_METHOD(QDateTime, addDays){
		/* l public*/

		/* int days,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


				QDateTime return_object = (QDateTime) obj->addDays((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  secsTo
 *    flags:    c
 */
ZEND_METHOD(QDateTime, secsTo){
		/* o public*/

		/* const QDateTime& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QDateTime") {
				RETURN_LONG(obj->secsTo((const QDateTime&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  toTimeSpec
 *    flags:    c
 */
ZEND_METHOD(QDateTime, toTimeSpec){
		/* l public*/

		/* int spec,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


				QDateTime return_object = (QDateTime) obj->toTimeSpec((Qt::TimeSpec) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  fromString
 *    flags:    s
 */
ZEND_METHOD(QDateTime, fromString){
		/* ol public*/

		/* const QString& s, int f,  */
		/* oo public*/

		/* const QString& s, const QString& format,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
					QDateTime return_object = (QDateTime) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(1 == 1 && 1 == 1) {
					QDateTime return_object = (QDateTime) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  timeSpec
 *    flags:    c
 */
ZEND_METHOD(QDateTime, timeSpec){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			RETURN_LONG(obj->timeSpec());
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  setTime
 *    flags:    
 */
ZEND_METHOD(QDateTime, setTime){
		/* o public*/

		/* const QTime& time,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QTime") {
				obj->setTime((const QTime&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  addMonths
 *    flags:    c
 */
ZEND_METHOD(QDateTime, addMonths){
		/* l public*/

		/* int months,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


				QDateTime return_object = (QDateTime) obj->addMonths((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  QDateTime
 *    flags:    
 */
ZEND_METHOD(QDateTime, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *QDateTime_ptr = new QDateTime();
				PHP_QT_REGISTER(QDateTime_ptr);
				RETURN_NULL();
	}
		/* o public*/

		/* const QDate& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QDate") {
				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) obj_z_0);
				PHP_QT_REGISTER(QDateTime_ptr);
				RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QDateTime") {
				QDateTime *QDateTime_ptr = new QDateTime((const QDateTime&) obj_z_0);
				PHP_QT_REGISTER(QDateTime_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* ool public*/

		/* const QDate& , const QTime& , int spec,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QDate" && Z_OBJCE_P(z_1)->name == "QTime") {
				QDateTime *QDateTime_ptr = new QDateTime((const QDate&) obj_z_0, (const QTime&) obj_z_1, (Qt::TimeSpec) Z_LVAL_P(z_2));
				PHP_QT_REGISTER(QDateTime_ptr);
				RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  addSecs
 *    flags:    c
 */
ZEND_METHOD(QDateTime, addSecs){
		/* l public*/

		/* int secs,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


				QDateTime return_object = (QDateTime) obj->addSecs((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  setDate
 *    flags:    
 */
ZEND_METHOD(QDateTime, setDate){
		/* o public*/

		/* const QDate& date,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QDate") {
				obj->setDate((const QDate&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  currentDateTime
 *    flags:    s
 */
ZEND_METHOD(QDateTime, currentDateTime){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
				QDateTime return_object = (QDateTime) obj->currentDateTime();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  daysTo
 *    flags:    c
 */
ZEND_METHOD(QDateTime, daysTo){
		/* o public*/

		/* const QDateTime& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QDateTime") {
				RETURN_LONG(obj->daysTo((const QDateTime&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  addYears
 *    flags:    c
 */
ZEND_METHOD(QDateTime, addYears){
		/* l public*/

		/* int years,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


				QDateTime return_object = (QDateTime) obj->addYears((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QDateTime, isNull){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  toUTC
 *    flags:    c
 */
ZEND_METHOD(QDateTime, toUTC){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
				QDateTime return_object = (QDateTime) obj->toUTC();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  toLocalTime
 *    flags:    c
 */
ZEND_METHOD(QDateTime, toLocalTime){
	if (ZEND_NUM_ARGS() == 0){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();
				QDateTime return_object = (QDateTime) obj->toLocalTime();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDateTime_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDateTime */
/*
 *    function  setTimeSpec
 *    flags:    
 */
ZEND_METHOD(QDateTime, setTimeSpec){
		/* l public*/

		/* int spec,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDateTime *obj = (QDateTime*) PHP_QT_FETCH();


			obj->setTimeSpec((Qt::TimeSpec) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}


PHP_QT_DESTRUCT(QDateTime);

