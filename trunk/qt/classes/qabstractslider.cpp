/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QAbstractSlider.cpp - QAbstractSlider PHP implementation.
 * begin           : Thu Feb 23 16:30:02 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;
#include "../php_qt.h"


#include <QAbstractSlider>


/*		public enumSliderAction:long {
			SliderAction = 0,
			SliderAction = 1,
			SliderAction = 2,
			SliderAction = 3,
			SliderAction = 4,
			SliderAction = 5,
			SliderAction = 6,
			SliderAction = 7
		}
*/

/*		protected enumSliderChange:long {
			SliderChange = 0,
			SliderChange = 1,
			SliderChange = 2,
			SliderChange = 3
		}
*/
/*********************************
 *    class     QAbstractSlider
 *    function  tr
 *    flags:    s
 *    access:    public
 *    return:    QString
 *    params:     const char *, const char * = 0 
 */
ZEND_METHOD(QAbstractSlider, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QAbstractSlider::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setMaximum
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QAbstractSlider, setMaximum){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setMaximum((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setInvertedAppearance
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    bool
 */
ZEND_METHOD(QAbstractSlider, setInvertedAppearance){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setInvertedAppearance((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  value
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, value){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->value());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setSliderDown
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    bool
 */
ZEND_METHOD(QAbstractSlider, setSliderDown){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setSliderDown((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  triggerAction
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    SliderAction action
 */
ZEND_METHOD(QAbstractSlider, triggerAction){
		/* l public*/

		/* int action,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->triggerAction((QAbstractSlider::SliderAction) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setRange
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int min, int max
 */
ZEND_METHOD(QAbstractSlider, setRange){
		/* ll public*/

		/* int min, int max,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setRange((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  singleStep
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, singleStep){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->singleStep());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  repeatAction
 *    flags:    c
 *    access:    protected
 *    return:    SliderAction
 *    params:    
 */
// method repeatAction is protected, skipped.

/*********************************
 *    class     QAbstractSlider
 *    function  setTracking
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    bool enable
 */
ZEND_METHOD(QAbstractSlider, setTracking){
		/* l public*/

		/* int enable,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setTracking((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  QAbstractSlider
 *    flags:    t
 *    access:    public
 *    return:    
 *    params:    QWidget *parent=0
 */
ZEND_METHOD(QAbstractSlider, __construct){
//qt_QWidget*
		/* o public*/

		/* qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				QAbstractSlider *QAbstractSlider_ptr = new QAbstractSlider((QWidget*) obj_z_0);
				PHP_QT_REGISTER(QAbstractSlider_ptr);
				RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  sliderPosition
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, sliderPosition){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->sliderPosition());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setMinimum
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QAbstractSlider, setMinimum){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setMinimum((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  minimum
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, minimum){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->minimum());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setPageStep
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QAbstractSlider, setPageStep){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setPageStep((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setSliderPosition
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QAbstractSlider, setSliderPosition){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setSliderPosition((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  invertedAppearance
 *    flags:    c
 *    access:    public
 *    return:    bool
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, invertedAppearance){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_BOOL(obj->invertedAppearance());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  maximum
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, maximum){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->maximum());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  orientation
 *    flags:    c
 *    access:    public
 *    return:    Qt::Orientation
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, orientation){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->orientation());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setValue
 *    flags:    l
 *    access:    public_slots
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QAbstractSlider, setValue){
		/* l public_slots*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setValue((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  staticMetaObject
 *    flags:    s
 *    access:    public
 *    return:    QMetaObject*
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, staticMetaObject){
}

/*********************************
 *    class     QAbstractSlider
 *    function  qObject
 *    flags:    
 *    access:    public
 *    return:    QObject*
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, qObject){
}

/*********************************
 *    class     QAbstractSlider
 *    function  setRepeatAction
 *    flags:    
 *    access:    protected
 *    return:    void
 *    params:    SliderAction action, int thresholdTime = 500, int repeatTime = 50
 */
// method setRepeatAction is protected, skipped.

/*********************************
 *    class     QAbstractSlider
 *    function  invertedControls
 *    flags:    c
 *    access:    public
 *    return:    bool
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, invertedControls){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_BOOL(obj->invertedControls());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setSingleStep
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QAbstractSlider, setSingleStep){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setSingleStep((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  isSliderDown
 *    flags:    c
 *    access:    public
 *    return:    bool
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, isSliderDown){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSliderDown());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setOrientation
 *    flags:    l
 *    access:    public_slots
 *    return:    void
 *    params:    Qt::Orientation
 */
ZEND_METHOD(QAbstractSlider, setOrientation){
		/* l public_slots*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setOrientation((Qt::Orientation) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  pageStep
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, pageStep){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->pageStep());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  hasTracking
 *    flags:    c
 *    access:    public
 *    return:    bool
 *    params:    
 */
ZEND_METHOD(QAbstractSlider, hasTracking){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasTracking());
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  setInvertedControls
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    bool
 */
ZEND_METHOD(QAbstractSlider, setInvertedControls){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			obj->setInvertedControls((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QAbstractSlider
 *    function  trUtf8
 *    flags:    s
 *    access:    public
 *    return:    QString
 *    params:     const char *, const char * = 0 
 */
ZEND_METHOD(QAbstractSlider, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QAbstractSlider *obj = (QAbstractSlider*) PHP_QT_FETCH();


			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QAbstractSlider::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}


PHP_QT_DESTRUCT(QAbstractSlider);

