/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QAbstractSlider.cpp - QAbstractSlider PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QAbstractSlider>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QAbstractSlider_php_qt:public QAbstractSlider
{

public:
  QAbstractSlider_php_qt(zval * zend_ptr, QWidget * parent = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QAbstractSlider_php_qt::QAbstractSlider_php_qt(zval * zend_ptr, QWidget * parent):QAbstractSlider(parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QAbstractSlider",&staticMetaObject));
}

PHP_QT_MOC(QAbstractSlider);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QAbstractSlider, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QAbstractSlider::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QAbstractSlider::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QAbstractSlider::tr(...) ");
}

/*!
 * method wheelEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWheelEvent *es0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method rangeChanged
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int mins0
 * @param	 int maxs1
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method setMaximum
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setMaximum)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setMaximum' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setMaximum((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setMaximum(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method sliderMoved
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int positions0
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method setInvertedAppearance
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setInvertedAppearance)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setInvertedAppearance' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setInvertedAppearance((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setInvertedAppearance(...) ");
}

/*!
 * method sliderChange
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	SliderChange changes0
 * 
 * @access	protected
 * @return	void
 * @flags	v
 */

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method value
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, value)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'value' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->value());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::value(...) ");
}

/*!
 * method setSliderDown
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setSliderDown)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setSliderDown' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setSliderDown((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setSliderDown(...) ");
}

/*!
 * method triggerAction
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	SliderAction actions0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, triggerAction)
{
// notice: unknown argument SliderAction actions0, skipped
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::triggerAction(...) ");
}

/*!
 * method valueChanged
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int values0
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method singleStep
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, singleStep)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'singleStep' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->singleStep());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::singleStep(...) ");
}

/*!
 * method setRange
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int mins0
 * @param	 int maxs1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setRange)
{
  ///int mins0, int maxs1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setRange' is not static");
        RETURN_NULL();
      }
      /// try int mins0, int maxs1,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setRange((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setRange(...) ");
}

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method repeatAction
 * 
 * @param: -
 * @param: -
 * 
 * @access	protected
 * @return	SliderAction
 * @flags	c
 */

/*!
 * method setTracking
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool enables0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setTracking)
{
  ///bool enables0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setTracking' is not static");
        RETURN_NULL();
      }
      /// try bool enables0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setTracking((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setTracking(...) ");
}

/*!
 * method QAbstractSlider
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *parent=0s0
 * 
 * overloaded args:
 * @param	QAbstractSliderPrivate &dd
 * @param	 QWidget *parent=0
 * 
 * overloaded args:
 * @param	const QAbstractSlider &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QAbstractSlider, __construct)
{
  ///QWidget *parent=0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider_php_qt *
        selfpointer = new QAbstractSlider_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget *parent=0s0,
      QWidget *
        cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QAbstractSlider_php_qt *
        selfpointer = new QAbstractSlider_php_qt(getThis(), (QWidget *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///QAbstractSliderPrivate &dd, QWidget *parent=0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QAbstractSliderPrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QAbstractSliderPrivate &dd,
        QAbstractSliderPrivate *
          cpp_arg_0 = static_cast < QAbstractSliderPrivate * >(php_qt_fetch(arg_0));
        QAbstractSlider_php_qt *
          selfpointer = new QAbstractSlider_php_qt(getThis(), (QAbstractSliderPrivate &) * cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QAbstractSliderPrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QAbstractSliderPrivate &dd, QWidget *parent=0,
        QAbstractSliderPrivate *
          cpp_arg_0 = static_cast < QAbstractSliderPrivate * >(php_qt_fetch(arg_0));
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QAbstractSlider_php_qt *
          selfpointer = new QAbstractSlider_php_qt(getThis(), (QAbstractSliderPrivate &) * cpp_arg_0, (QWidget *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QAbstractSlider &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QAbstractSlider
      if (inherits(Z_OBJCE_P(arg_0), 2)) {
/// method is private, skip
        php_error(E_ERROR, "QAbstractSlider::__construct(...) cannot be called with 'const QAbstractSlider &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::QAbstractSlider(...) ");
}

/*!
 * method sliderPosition
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, sliderPosition)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sliderPosition' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->sliderPosition());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::sliderPosition(...) ");
}

/*!
 * method invertedAppearance
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, invertedAppearance)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'invertedAppearance' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->invertedAppearance());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::invertedAppearance(...) ");
}

/*!
 * method setSliderPosition
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setSliderPosition)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setSliderPosition' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setSliderPosition((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setSliderPosition(...) ");
}

/*!
 * method setPageStep
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setPageStep)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setPageStep' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setPageStep((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setPageStep(...) ");
}

/*!
 * method minimum
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, minimum)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimum' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->minimum());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::minimum(...) ");
}

/*!
 * method setMinimum
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setMinimum)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setMinimum' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setMinimum((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setMinimum(...) ");
}

/*!
 * method changeEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *es0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method maximum
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, maximum)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'maximum' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->maximum());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::maximum(...) ");
}

/*!
 * method timerEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QTimerEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setValue
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QAbstractSlider, setValue)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setValue' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setValue((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setValue(...) ");
}

/*!
 * method orientation
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientation
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, orientation)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'orientation' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->orientation());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::orientation(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QAbstractSlider, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QAbstractSlider::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QAbstractSlider::staticMetaObject(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method setRepeatAction
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	SliderAction actions0
 * @param	 int thresholdTime = 500s1
 * @param	 int repeatTime = 50s2
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method invertedControls
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, invertedControls)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'invertedControls' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->invertedControls());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::invertedControls(...) ");
}

/*!
 * method isSliderDown
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, isSliderDown)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isSliderDown' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isSliderDown());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::isSliderDown(...) ");
}

/*!
 * method setSingleStep
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setSingleStep)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setSingleStep' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setSingleStep((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setSingleStep(...) ");
}

/*!
 * method keyPressEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QKeyEvent *evs0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setOrientation
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::Orientation Qt::Orientations0
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QAbstractSlider, setOrientation)
{
  ///Qt::Orientation Qt::Orientations0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setOrientation' is not static");
        RETURN_NULL();
      }
      /// try Qt::Orientation Qt::Orientations0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setOrientation((Qt::Orientation) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setOrientation(...) ");
}

/*!
 * method pageStep
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, pageStep)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'pageStep' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->pageStep());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::pageStep(...) ");
}

/*!
 * method sliderPressed
 * 
 * @param: -
 * @param: -
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method hasTracking
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QAbstractSlider, hasTracking)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'hasTracking' is not static");
        RETURN_NULL();
      }
      /// try 
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->hasTracking());
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::hasTracking(...) ");
}

/*!
 * method sliderReleased
 * 
 * @param: -
 * @param: -
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method setInvertedControls
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QAbstractSlider, setInvertedControls)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setInvertedControls' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setInvertedControls((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QAbstractSlider::setInvertedControls(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QAbstractSlider, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QAbstractSlider::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QAbstractSlider *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QAbstractSlider * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QAbstractSlider::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QAbstractSlider::trUtf8(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method actionTriggered
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int actions0
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */
