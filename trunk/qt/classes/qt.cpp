/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Qt.cpp - Qt PHP implementation.
 * begin           : Wed Jan 11 20:29:53 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <Qt>
#include "../php_qt.h"



/*		public enumGlobalColor:long {
			GlobalColor = 0,
			GlobalColor = 1,
			GlobalColor = 2,
			GlobalColor = 3,
			GlobalColor = 4,
			GlobalColor = 5,
			GlobalColor = 6,
			GlobalColor = 7,
			GlobalColor = 8,
			GlobalColor = 9,
			GlobalColor = 10,
			GlobalColor = 11,
			GlobalColor = 12,
			GlobalColor = 13,
			GlobalColor = 14,
			GlobalColor = 15,
			GlobalColor = 16,
			GlobalColor = 17,
			GlobalColor = 18,
			GlobalColor = 19
		}
*/

/*		public enumKeyboardModifier:long {
			NoModifier = 0x00000000,
			ShiftModifier = 0x02000000,
			ControlModifier = 0x04000000,
			AltModifier = 0x08000000,
			MetaModifier = 0x10000000,
			KeypadModifier = 0x20000000,
			KeyboardModifierMask = 0xfe000000
		}
*/

/*		public enumModifier:long {
			META = Qt.MetaModifier,
			SHIFT = Qt.ShiftModifier,
			CTRL = Qt.ControlModifier,
			ALT = Qt.AltModifier,
			MODIFIER_MASK = KeyboardModifierMask,
			UNICODE_ACCEL = 0x00000000
		}
*/

/*		public enumMouseButton:long {
			NoButton = 0x00000000,
			LeftButton = 0x00000001,
			RightButton = 0x00000002,
			MidButton = 0x00000004,
			XButton1 = 0x00000008,
			XButton2 = 0x00000010,
			MouseButtonMask = 0x000000ff
		}
*/

/*		public enumOrientation:long {
			Horizontal = 0x1,
			Vertical = 0x2
		}
*/

/*		public enumFocusPolicy:long {
			NoFocus = 0,
			TabFocus = 0x1,
			ClickFocus = 0x2,
			StrongFocus = TabFocus|ClickFocus|0x8,
			WheelFocus = StrongFocus|0x4
		}
*/

/*		public enumSortOrder:long {
			SortOrder = 0,
			SortOrder = 1
		}
*/

/*		public enumAlignmentFlag:long {
			AlignLeft = 0x0001,
			AlignLeading = AlignLeft,
			AlignRight = 0x0002,
			AlignTrailing = AlignRight,
			AlignHCenter = 0x0004,
			AlignJustify = 0x0008,
			AlignAbsolute = 0x0010,
			AlignHorizontal_Mask = AlignLeft|AlignRight|AlignHCenter|AlignJustify|AlignAbsolute,
			AlignTop = 0x0020,
			AlignBottom = 0x0040,
			AlignVCenter = 0x0080,
			AlignVertical_Mask = AlignTop|AlignBottom|AlignVCenter,
			AlignCenter = AlignVCenter|AlignHCenter
		}
*/

/*		public enumTextFlag:long {
			TextSingleLine = 0x0100,
			TextDontClip = 0x0200,
			TextExpandTabs = 0x0400,
			TextShowMnemonic = 0x0800,
			TextWordWrap = 0x1000,
			TextWrapAnywhere = 0x2000,
			TextDontPrint = 0x4000,
			TextIncludeTrailingSpaces = 0x08000000,
			TextHideMnemonic = 0x8000
		}
*/

/*		public enumTextElideMode:long {
			TextElideMode = 0,
			TextElideMode = 1,
			TextElideMode = 2
		}
*/

/*		public enumWindowType:long {
			Widget = 0x00000000,
			Window = 0x00000001,
			Dialog = 0x00000002|Window,
			Sheet = 0x00000004|Window,
			Drawer = 0x00000006|Window,
			Popup = 0x00000008|Window,
			Tool = 0x0000000a|Window,
			ToolTip = 0x0000000c|Window,
			SplashScreen = 0x0000000e|Window,
			Desktop = 0x00000010|Window,
			SubWindow = 0x00000012,
			WindowType_Mask = 0x000000ff,
			MSWindowsFixedSizeDialogHint = 0x00000100,
			MSWindowsOwnDC = 0x00000200,
			X11BypassWindowManagerHint = 0x00000400,
			FramelessWindowHint = 0x00000800,
			WindowTitleHint = 0x00001000,
			WindowSystemMenuHint = 0x00002000,
			WindowMinimizeButtonHint = 0x00004000,
			WindowMaximizeButtonHint = 0x00008000,
			WindowMinMaxButtonsHint = WindowMinimizeButtonHint|WindowMaximizeButtonHint,
			WindowContextHelpButtonHint = 0x00010000,
			WindowShadeButtonHint = 0x00020000,
			WindowStaysOnTopHint = 0x00040000
		}
*/

/*		public enumWindowState:long {
			WindowNoState = 0x00000000,
			WindowMinimized = 0x00000001,
			WindowMaximized = 0x00000002,
			WindowFullScreen = 0x00000004,
			WindowActive = 0x00000008
		}
*/

/*		public enumWidgetAttribute:long {
			WA_Disabled = 0,
			WA_UnderMouse = 1,
			WA_MouseTracking = 2,
			WA_ContentsPropagated = 3,
			WA_OpaquePaintEvent = 4,
			WA_NoBackground = WA_OpaquePaintEvent,
			WA_StaticContents = 5,
			WA_LaidOut = 7,
			WA_PaintOnScreen = 8,
			WA_NoSystemBackground = 9,
			WA_UpdatesDisabled = 10,
			WA_Mapped = 11,
			WA_MacNoClickThrough = 12,
			WA_PaintOutsidePaintEvent = 13,
			WA_InputMethodEnabled = 14,
			WA_WState_Visible = 15,
			WA_WState_Hidden = 16,
			WA_ForceDisabled = 32,
			WA_KeyCompression = 33,
			WA_PendingMoveEvent = 34,
			WA_PendingResizeEvent = 35,
			WA_SetPalette = 36,
			WA_SetFont = 37,
			WA_SetCursor = 38,
			WA_NoChildEventsFromChildren = 39,
			WA_WindowModified = 41,
			WA_Resized = 42,
			WA_Moved = 43,
			WA_PendingUpdate = 44,
			WA_InvalidSize = 45,
			WA_MacMetalStyle = 46,
			WA_CustomWhatsThis = 47,
			WA_LayoutOnEntireRect = 48,
			WA_OutsideWSRange = 49,
			WA_GrabbedShortcut = 50,
			WA_TransparentForMouseEvents = 51,
			WA_PaintUnclipped = 52,
			WA_SetWindowIcon = 53,
			WA_NoMouseReplay = 54,
			WA_DeleteOnClose = 55,
			WA_RightToLeft = 56,
			WA_SetLayoutDirection = 57,
			WA_NoChildEventsForParent = 58,
			WA_ForceUpdatesDisabled = 59,
			WA_WState_Created = 60,
			WA_WState_CompressKeys = 61,
			WA_WState_InPaintEvent = 62,
			WA_WState_Reparented = 63,
			WA_WState_ConfigPending = 64,
			WA_WState_Polished = 66,
			WA_WState_DND = 67,
			WA_WState_OwnSizePolicy = 68,
			WA_WState_ExplicitShowHide = 69,
			WA_ShowModal = 70,
			WA_MouseNoMask = 71,
			WA_GroupLeader = 72,
			WA_NoMousePropagation = 73,
			WA_Hover = 74,
			WA_InputMethodTransparent = 75,
			WA_QuitOnClose = 76,
			WA_KeyboardFocusChange = 77,
			WA_AcceptDrops = 78,
			WA_DropSiteRegistered = 79,
			WA_ForceAcceptDrops = WA_DropSiteRegistered,
			WA_WindowPropagation = 80,
			WA_NoX11EventCompression = 81,
			WA_TintedBackground = 82,
			WidgetAttribute = 67
		}
*/

/*		public enumImageConversionFlag:long {
			ColorMode_Mask = 0x00000003,
			AutoColor = 0x00000000,
			ColorOnly = 0x00000003,
			MonoOnly = 0x00000002,
			AlphaDither_Mask = 0x0000000c,
			ThresholdAlphaDither = 0x00000000,
			OrderedAlphaDither = 0x00000004,
			DiffuseAlphaDither = 0x00000008,
			NoAlpha = 0x0000000c,
			Dither_Mask = 0x00000030,
			DiffuseDither = 0x00000000,
			OrderedDither = 0x00000010,
			ThresholdDither = 0x00000020,
			DitherMode_Mask = 0x000000c0,
			AutoDither = 0x00000000,
			PreferDither = 0x00000040,
			AvoidDither = 0x00000080
		}
*/

/*		public enumBGMode:long {
			BGMode = 0,
			BGMode = 1
		}
*/

/*		public enumKey:long {
			Key_Escape = 0x01000000,
			Key_Tab = 0x01000001,
			Key_Backtab = 0x01000002,
			Key_Backspace = 0x01000003,
			Key_Return = 0x01000004,
			Key_Enter = 0x01000005,
			Key_Insert = 0x01000006,
			Key_Delete = 0x01000007,
			Key_Pause = 0x01000008,
			Key_Print = 0x01000009,
			Key_SysReq = 0x0100000a,
			Key_Clear = 0x0100000b,
			Key_Home = 0x01000010,
			Key_End = 0x01000011,
			Key_Left = 0x01000012,
			Key_Up = 0x01000013,
			Key_Right = 0x01000014,
			Key_Down = 0x01000015,
			Key_PageUp = 0x01000016,
			Key_PageDown = 0x01000017,
			Key_Shift = 0x01000020,
			Key_Control = 0x01000021,
			Key_Meta = 0x01000022,
			Key_Alt = 0x01000023,
			Key_CapsLock = 0x01000024,
			Key_NumLock = 0x01000025,
			Key_ScrollLock = 0x01000026,
			Key_F1 = 0x01000030,
			Key_F2 = 0x01000031,
			Key_F3 = 0x01000032,
			Key_F4 = 0x01000033,
			Key_F5 = 0x01000034,
			Key_F6 = 0x01000035,
			Key_F7 = 0x01000036,
			Key_F8 = 0x01000037,
			Key_F9 = 0x01000038,
			Key_F10 = 0x01000039,
			Key_F11 = 0x0100003a,
			Key_F12 = 0x0100003b,
			Key_F13 = 0x0100003c,
			Key_F14 = 0x0100003d,
			Key_F15 = 0x0100003e,
			Key_F16 = 0x0100003f,
			Key_F17 = 0x01000040,
			Key_F18 = 0x01000041,
			Key_F19 = 0x01000042,
			Key_F20 = 0x01000043,
			Key_F21 = 0x01000044,
			Key_F22 = 0x01000045,
			Key_F23 = 0x01000046,
			Key_F24 = 0x01000047,
			Key_F25 = 0x01000048,
			Key_F26 = 0x01000049,
			Key_F27 = 0x0100004a,
			Key_F28 = 0x0100004b,
			Key_F29 = 0x0100004c,
			Key_F30 = 0x0100004d,
			Key_F31 = 0x0100004e,
			Key_F32 = 0x0100004f,
			Key_F33 = 0x01000050,
			Key_F34 = 0x01000051,
			Key_F35 = 0x01000052,
			Key_Super_L = 0x01000053,
			Key_Super_R = 0x01000054,
			Key_Menu = 0x01000055,
			Key_Hyper_L = 0x01000056,
			Key_Hyper_R = 0x01000057,
			Key_Help = 0x01000058,
			Key_Direction_L = 0x01000059,
			Key_Direction_R = 0x01000060,
			Key_Space = 0x20,
			Key_Any = Key_Space,
			Key_Exclam = 0x21,
			Key_QuoteDbl = 0x22,
			Key_NumberSign = 0x23,
			Key_Dollar = 0x24,
			Key_Percent = 0x25,
			Key_Ampersand = 0x26,
			Key_Apostrophe = 0x27,
			Key_ParenLeft = 0x28,
			Key_ParenRight = 0x29,
			Key_Asterisk = 0x2a,
			Key_Plus = 0x2b,
			Key_Comma = 0x2c,
			Key_Minus = 0x2d,
			Key_Period = 0x2e,
			Key_Slash = 0x2f,
			Key_0 = 0x30,
			Key_1 = 0x31,
			Key_2 = 0x32,
			Key_3 = 0x33,
			Key_4 = 0x34,
			Key_5 = 0x35,
			Key_6 = 0x36,
			Key_7 = 0x37,
			Key_8 = 0x38,
			Key_9 = 0x39,
			Key_Colon = 0x3a,
			Key_Semicolon = 0x3b,
			Key_Less = 0x3c,
			Key_Equal = 0x3d,
			Key_Greater = 0x3e,
			Key_Question = 0x3f,
			Key_At = 0x40,
			Key_A = 0x41,
			Key_B = 0x42,
			Key_C = 0x43,
			Key_D = 0x44,
			Key_E = 0x45,
			Key_F = 0x46,
			Key_G = 0x47,
			Key_H = 0x48,
			Key_I = 0x49,
			Key_J = 0x4a,
			Key_K = 0x4b,
			Key_L = 0x4c,
			Key_M = 0x4d,
			Key_N = 0x4e,
			Key_O = 0x4f,
			Key_P = 0x50,
			Key_Q = 0x51,
			Key_R = 0x52,
			Key_S = 0x53,
			Key_T = 0x54,
			Key_U = 0x55,
			Key_V = 0x56,
			Key_W = 0x57,
			Key_X = 0x58,
			Key_Y = 0x59,
			Key_Z = 0x5a,
			Key_BracketLeft = 0x5b,
			Key_Backslash = 0x5c,
			Key_BracketRight = 0x5d,
			Key_AsciiCircum = 0x5e,
			Key_Underscore = 0x5f,
			Key_QuoteLeft = 0x60,
			Key_BraceLeft = 0x7b,
			Key_Bar = 0x7c,
			Key_BraceRight = 0x7d,
			Key_AsciiTilde = 0x7e,
			Key_nobreakspace = 0x0a0,
			Key_exclamdown = 0x0a1,
			Key_cent = 0x0a2,
			Key_sterling = 0x0a3,
			Key_currency = 0x0a4,
			Key_yen = 0x0a5,
			Key_brokenbar = 0x0a6,
			Key_section = 0x0a7,
			Key_diaeresis = 0x0a8,
			Key_copyright = 0x0a9,
			Key_ordfeminine = 0x0aa,
			Key_guillemotleft = 0x0ab,
			Key_notsign = 0x0ac,
			Key_hyphen = 0x0ad,
			Key_registered = 0x0ae,
			Key_macron = 0x0af,
			Key_degree = 0x0b0,
			Key_plusminus = 0x0b1,
			Key_twosuperior = 0x0b2,
			Key_threesuperior = 0x0b3,
			Key_acute = 0x0b4,
			Key_mu = 0x0b5,
			Key_paragraph = 0x0b6,
			Key_periodcentered = 0x0b7,
			Key_cedilla = 0x0b8,
			Key_onesuperior = 0x0b9,
			Key_masculine = 0x0ba,
			Key_guillemotright = 0x0bb,
			Key_onequarter = 0x0bc,
			Key_onehalf = 0x0bd,
			Key_threequarters = 0x0be,
			Key_questiondown = 0x0bf,
			Key_Agrave = 0x0c0,
			Key_Aacute = 0x0c1,
			Key_Acircumflex = 0x0c2,
			Key_Atilde = 0x0c3,
			Key_Adiaeresis = 0x0c4,
			Key_Aring = 0x0c5,
			Key_AE = 0x0c6,
			Key_Ccedilla = 0x0c7,
			Key_Egrave = 0x0c8,
			Key_Eacute = 0x0c9,
			Key_Ecircumflex = 0x0ca,
			Key_Ediaeresis = 0x0cb,
			Key_Igrave = 0x0cc,
			Key_Iacute = 0x0cd,
			Key_Icircumflex = 0x0ce,
			Key_Idiaeresis = 0x0cf,
			Key_ETH = 0x0d0,
			Key_Ntilde = 0x0d1,
			Key_Ograve = 0x0d2,
			Key_Oacute = 0x0d3,
			Key_Ocircumflex = 0x0d4,
			Key_Otilde = 0x0d5,
			Key_Odiaeresis = 0x0d6,
			Key_multiply = 0x0d7,
			Key_Ooblique = 0x0d8,
			Key_Ugrave = 0x0d9,
			Key_Uacute = 0x0da,
			Key_Ucircumflex = 0x0db,
			Key_Udiaeresis = 0x0dc,
			Key_Yacute = 0x0dd,
			Key_THORN = 0x0de,
			Key_ssharp = 0x0df,
			Key_division = 0x0f7,
			Key_ydiaeresis = 0x0ff,
			Key_AltGr = 0x01001103,
			Key_Multi_key = 0x01001120,
			Key_Codeinput = 0x01001137,
			Key_SingleCandidate = 0x0100113c,
			Key_MultipleCandidate = 0x0100113d,
			Key_PreviousCandidate = 0x0100113e,
			Key_Mode_switch = 0x0100117e,
			Key_Kanji = 0x01001121,
			Key_Muhenkan = 0x01001122,
			Key_Henkan = 0x01001123,
			Key_Romaji = 0x01001124,
			Key_Hiragana = 0x01001125,
			Key_Katakana = 0x01001126,
			Key_Hiragana_Katakana = 0x01001127,
			Key_Zenkaku = 0x01001128,
			Key_Hankaku = 0x01001129,
			Key_Zenkaku_Hankaku = 0x0100112a,
			Key_Touroku = 0x0100112b,
			Key_Massyo = 0x0100112c,
			Key_Kana_Lock = 0x0100112d,
			Key_Kana_Shift = 0x0100112e,
			Key_Eisu_Shift = 0x0100112f,
			Key_Eisu_toggle = 0x01001130,
			Key_Hangul = 0x01001131,
			Key_Hangul_Start = 0x01001132,
			Key_Hangul_End = 0x01001133,
			Key_Hangul_Hanja = 0x01001134,
			Key_Hangul_Jamo = 0x01001135,
			Key_Hangul_Romaja = 0x01001136,
			Key_Hangul_Jeonja = 0x01001138,
			Key_Hangul_Banja = 0x01001139,
			Key_Hangul_PreHanja = 0x0100113a,
			Key_Hangul_PostHanja = 0x0100113b,
			Key_Hangul_Special = 0x0100113f,
			Key_Dead_Grave = 0x01001250,
			Key_Dead_Acute = 0x01001251,
			Key_Dead_Circumflex = 0x01001252,
			Key_Dead_Tilde = 0x01001253,
			Key_Dead_Macron = 0x01001254,
			Key_Dead_Breve = 0x01001255,
			Key_Dead_Abovedot = 0x01001256,
			Key_Dead_Diaeresis = 0x01001257,
			Key_Dead_Abovering = 0x01001258,
			Key_Dead_Doubleacute = 0x01001259,
			Key_Dead_Caron = 0x0100125a,
			Key_Dead_Cedilla = 0x0100125b,
			Key_Dead_Ogonek = 0x0100125c,
			Key_Dead_Iota = 0x0100125d,
			Key_Dead_Voiced_Sound = 0x0100125e,
			Key_Dead_Semivoiced_Sound = 0x0100125f,
			Key_Dead_Belowdot = 0x01001260,
			Key_Dead_Hook = 0x01001261,
			Key_Dead_Horn = 0x01001262,
			Key_Back = 0x01000061,
			Key_Forward = 0x01000062,
			Key_Stop = 0x01000063,
			Key_Refresh = 0x01000064,
			Key_VolumeDown = 0x01000070,
			Key_VolumeMute = 0x01000071,
			Key_VolumeUp = 0x01000072,
			Key_BassBoost = 0x01000073,
			Key_BassUp = 0x01000074,
			Key_BassDown = 0x01000075,
			Key_TrebleUp = 0x01000076,
			Key_TrebleDown = 0x01000077,
			Key_MediaPlay = 0x01000080,
			Key_MediaStop = 0x01000081,
			Key_MediaPrevious = 0x01000082,
			Key_MediaNext = 0x01000083,
			Key_MediaRecord = 0x01000084,
			Key_HomePage = 0x01000090,
			Key_Favorites = 0x01000091,
			Key_Search = 0x01000092,
			Key_Standby = 0x01000093,
			Key_OpenUrl = 0x01000094,
			Key_LaunchMail = 0x010000a0,
			Key_LaunchMedia = 0x010000a1,
			Key_Launch0 = 0x010000a2,
			Key_Launch1 = 0x010000a3,
			Key_Launch2 = 0x010000a4,
			Key_Launch3 = 0x010000a5,
			Key_Launch4 = 0x010000a6,
			Key_Launch5 = 0x010000a7,
			Key_Launch6 = 0x010000a8,
			Key_Launch7 = 0x010000a9,
			Key_Launch8 = 0x010000aa,
			Key_Launch9 = 0x010000ab,
			Key_LaunchA = 0x010000ac,
			Key_LaunchB = 0x010000ad,
			Key_LaunchC = 0x010000ae,
			Key_LaunchD = 0x010000af,
			Key_LaunchE = 0x010000b0,
			Key_LaunchF = 0x010000b1,
			Key_MediaLast = 0x0100ffff,
			Key_Select = 0x01010000,
			Key_Yes = 0x01010001,
			Key_No = 0x01010002,
			Key_Context1 = 0x01100000,
			Key_Context2 = 0x01100001,
			Key_Context3 = 0x01100002,
			Key_Context4 = 0x01100003,
			Key_Call = 0x01100004,
			Key_Hangup = 0x01100005,
			Key_Flip = 0x01100006,
			Key_unknown = 0x01ffffff
		}
*/

/*		public enumArrowType:long {
			ArrowType = 0,
			ArrowType = 1,
			ArrowType = 2,
			ArrowType = 3,
			ArrowType = 4
		}
*/

/*		public enumPenStyle:long {
			PenStyle = 0,
			PenStyle = 1,
			PenStyle = 2,
			PenStyle = 3,
			PenStyle = 4,
			PenStyle = 5,
			PenStyle = 6,
			MPenStyle = 0x0f
		}
*/

/*		public enumPenCapStyle:long {
			FlatCap = 0x00,
			SquareCap = 0x10,
			RoundCap = 0x20,
			MPenCapStyle = 0x30
		}
*/

/*		public enumPenJoinStyle:long {
			MiterJoin = 0x00,
			BevelJoin = 0x40,
			RoundJoin = 0x80,
			MPenJoinStyle = 0xc0
		}
*/

/*		public enumBrushStyle:long {
			BrushStyle = 0,
			BrushStyle = 1,
			BrushStyle = 2,
			BrushStyle = 3,
			BrushStyle = 4,
			BrushStyle = 5,
			BrushStyle = 6,
			BrushStyle = 7,
			BrushStyle = 8,
			BrushStyle = 9,
			BrushStyle = 10,
			BrushStyle = 11,
			BrushStyle = 12,
			BrushStyle = 13,
			BrushStyle = 14,
			BrushStyle = 15,
			BrushStyle = 16,
			BrushStyle = 17,
			TexturePattern = 24
		}
*/

/*		public enumUIEffect:long {
			UIEffect = 0,
			UIEffect = 1,
			UIEffect = 2,
			UIEffect = 3,
			UIEffect = 4,
			UIEffect = 5,
			UIEffect = 6
		}
*/

/*		public enumCursorShape:long {
			CursorShape = 0,
			CursorShape = 1,
			CursorShape = 2,
			CursorShape = 3,
			CursorShape = 4,
			CursorShape = 5,
			CursorShape = 6,
			CursorShape = 7,
			CursorShape = 8,
			CursorShape = 9,
			CursorShape = 10,
			CursorShape = 11,
			CursorShape = 12,
			CursorShape = 13,
			CursorShape = 14,
			CursorShape = 15,
			CursorShape = 16,
			LastCursor = BusyCursor,
			BitmapCursor = 24
		}
*/

/*		public enumTextFormat:long {
			TextFormat = 0,
			TextFormat = 1,
			TextFormat = 2,
			TextFormat = 3
		}
*/

/*		public enumAspectRatioMode:long {
			AspectRatioMode = 0,
			AspectRatioMode = 1,
			AspectRatioMode = 2
		}
*/

/*		public enumAnchorAttribute:long {
			AnchorAttribute = 0,
			AnchorAttribute = 1
		}
*/

/*		public enumDockWidgetArea:long {
			LeftDockWidgetArea = 0x1,
			RightDockWidgetArea = 0x2,
			TopDockWidgetArea = 0x4,
			BottomDockWidgetArea = 0x8,
			DockWidgetArea_Mask = 0xf,
			AllDockWidgetAreas = DockWidgetArea_Mask
		}
*/

/*		public enum:long {
			NDockWidgetAreas = 4
		}
*/

/*		public enumToolBarArea:long {
			LeftToolBarArea = 0x1,
			RightToolBarArea = 0x2,
			TopToolBarArea = 0x4,
			BottomToolBarArea = 0x8,
			ToolBarArea_Mask = 0xf,
			AllToolBarAreas = ToolBarArea_Mask
		}
*/

/*		public enum:long {
			NToolBarAreas = 4
		}
*/

/*		public enumDateFormat:long {
			DateFormat = 0,
			DateFormat = 1,
			DateFormat = 2
		}
*/

/*		public enumTimeSpec:long {
			TimeSpec = 0,
			TimeSpec = 1
		}
*/

/*		public enumDayOfWeek:long {
			Monday = 1,
			Tuesday = 2,
			Wednesday = 3,
			Thursday = 4,
			Friday = 5,
			Saturday = 6,
			Sunday = 7
		}
*/

/*		public enumScrollBarPolicy:long {
			ScrollBarPolicy = 0,
			ScrollBarPolicy = 1,
			ScrollBarPolicy = 2
		}
*/

/*		public enumCaseSensitivity:long {
			CaseSensitivity = 0,
			CaseSensitivity = 1
		}
*/

/*		public enumCorner:long {
			TopLeftCorner = 0x00000,
			TopRightCorner = 0x00001,
			BottomLeftCorner = 0x00002,
			BottomRightCorner = 0x00003
		}
*/

/*		public enumConnectionType:long {
			ConnectionType = 0,
			ConnectionType = 1,
			ConnectionType = 2,
			ConnectionType = 3
		}
*/

/*		public enumShortcutContext:long {
			ShortcutContext = 0,
			ShortcutContext = 1,
			ShortcutContext = 2
		}
*/

/*		public enumFillRule:long {
			FillRule = 0,
			FillRule = 1
		}
*/

/*		public enumClipOperation:long {
			ClipOperation = 0,
			ClipOperation = 1,
			ClipOperation = 2,
			ClipOperation = 3
		}
*/

/*		public enumTransformationMode:long {
			TransformationMode = 0,
			TransformationMode = 1
		}
*/

/*		public enumFocusReason:long {
			FocusReason = 0,
			FocusReason = 1,
			FocusReason = 2,
			FocusReason = 3,
			FocusReason = 4,
			FocusReason = 5,
			FocusReason = 6,
			FocusReason = 7,
			FocusReason = 8
		}
*/

/*		public enumContextMenuPolicy:long {
			ContextMenuPolicy = 0,
			ContextMenuPolicy = 1,
			ContextMenuPolicy = 2,
			ContextMenuPolicy = 3
		}
*/

/*		public enumInputMethodQuery:long {
			InputMethodQuery = 0,
			InputMethodQuery = 1,
			InputMethodQuery = 2,
			InputMethodQuery = 3,
			InputMethodQuery = 4
		}
*/

/*		public enumToolButtonStyle:long {
			ToolButtonStyle = 0,
			ToolButtonStyle = 1,
			ToolButtonStyle = 2,
			ToolButtonStyle = 3
		}
*/

/*		public enumLayoutDirection:long {
			LayoutDirection = 0,
			LayoutDirection = 1
		}
*/

/*		public enumDropAction:long {
			CopyAction = 0x1,
			MoveAction = 0x2,
			LinkAction = 0x4,
			ActionMask = 0xff,
			TargetMoveAction = 0x8002,
			IgnoreAction = 0x0
		}
*/

/*		public enumCheckState:long {
			CheckState = 0,
			CheckState = 1,
			CheckState = 2
		}
*/

/*		public enumItemDataRole:long {
			DisplayRole = 0,
			DecorationRole = 1,
			EditRole = 2,
			ToolTipRole = 3,
			StatusTipRole = 4,
			WhatsThisRole = 5,
			FontRole = 6,
			TextAlignmentRole = 7,
			BackgroundColorRole = 8,
			TextColorRole = 9,
			CheckStateRole = 10,
			AccessibleTextRole = 11,
			AccessibleDescriptionRole = 12,
			SizeHintRole = 13,
			UserRole = 32
		}
*/

/*		public enumItemFlag:long {
			ItemIsSelectable = 1,
			ItemIsEditable = 2,
			ItemIsDragEnabled = 4,
			ItemIsDropEnabled = 8,
			ItemIsUserCheckable = 16,
			ItemIsEnabled = 32,
			ItemIsTristate = 64
		}
*/

/*		public enumMatchFlag:long {
			MatchExactly = 0,
			MatchContains = 1,
			MatchStartsWith = 2,
			MatchEndsWith = 3,
			MatchRegExp = 4,
			MatchWildcard = 5,
			MatchCaseSensitive = 16,
			MatchWrap = 32,
			MatchRecursive = 64
		}
*/

/*		public enumWindowModality:long {
			WindowModality = 0,
			WindowModality = 1,
			WindowModality = 2
		}
*/
/*********************************
 *    class     Qt */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(Qt, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			Qt *obj = (Qt*) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, Qt_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(Qt, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		/* const char* , const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			Qt *obj = (Qt*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, Qt_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(Qt, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int , QUObject* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			Qt *obj = (Qt*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(Qt, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
			Qt *obj = (Qt*) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, Qt_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(Qt, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int , QUObject* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			Qt *obj = (Qt*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(Qt, className){
	if (ZEND_NUM_ARGS() == 0){
			Qt *obj = (Qt*) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, Qt_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(Qt, qObject){
	if (ZEND_NUM_ARGS() == 0){
			Qt *obj = (Qt*) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, Qt_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(Qt, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		/* const char* , const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			Qt *obj = (Qt*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, Qt_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(Qt, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		/* int , int , QVariant* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			Qt *obj = (Qt*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "QVariant*") {
				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
			}
		}
	}
}

/*********************************
 *    class     Qt */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(Qt, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		/* const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			Qt *obj = (Qt*) PHP_QT_FETCH();

			
			obj->qt_cast( (const char*) var_s_0);
			RETURN_NULL();
		}
	}
}


PHP_QT_DESTRUCT(Qt);

