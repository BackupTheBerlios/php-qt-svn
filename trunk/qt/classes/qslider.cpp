/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QSlider.cpp - QSlider PHP implementation.
 * begin           : Thu Feb 23 10:18:44 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;
#include "../php_qt.h"


#include <QSlider>


/*		public enumTickPosition:long {
			NoTicks = 0,
			TicksAbove = 1,
			TicksLeft = TicksAbove,
			TicksBelow = 2,
			TicksRight = TicksBelow,
			TicksBothSides = 3
		}
*/
/*********************************
 *    class     QSlider */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QSlider, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();


			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QSlider::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QSlider, qt_invoke){
}

/*********************************
 *    class     QSlider */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QSlider, staticMetaObject){
}

/*********************************
 *    class     QSlider */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QSlider, qObject){
}

/*********************************
 *    class     QSlider */
/*
 *    function  QSlider
 *    flags:    t
 */
ZEND_METHOD(QSlider, __construct){
		/* o public*/

		/* qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				QSlider *QSlider_ptr = new QSlider((QWidget*) obj_z_0);
				PHP_QT_REGISTER(QSlider_ptr);
				RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
		/* lo public*/

		/* int orientation, qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QWidget")) {
				QSlider *QSlider_ptr = new QSlider((Qt::Orientation) Z_LVAL_P(z_0), (QWidget*) obj_z_1);
				PHP_QT_REGISTER(QSlider_ptr);
				RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  minimumSizeHint
 *    flags:    c
 */
ZEND_METHOD(QSlider, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();
			QSize* return_object = new QSize;
			// static?
			if(getThis() != NULL){
				*return_object = (QSize) obj->minimumSizeHint();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QSlider, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();
			QSize* return_object = new QSize;
			// static?
			if(getThis() != NULL){
				*return_object = (QSize) obj->sizeHint();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QSlider, qt_cast){
}

/*********************************
 *    class     QSlider */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QSlider, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();
			QMetaObject ** return_object = new QMetaObject *;
			// static?
			if(getThis() != NULL){
				*return_object = (QMetaObject *) obj->metaObject();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  tickInterval
 *    flags:    c
 */
ZEND_METHOD(QSlider, tickInterval){
	if (ZEND_NUM_ARGS() == 0){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();
			RETURN_LONG(obj->tickInterval());
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  setTickInterval
 *    flags:    
 */
ZEND_METHOD(QSlider, setTickInterval){
		/* l public*/

		/* int ti,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();


			obj->setTickInterval((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  tickPosition
 *    flags:    c
 */
ZEND_METHOD(QSlider, tickPosition){
	if (ZEND_NUM_ARGS() == 0){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();
			obj->tickPosition();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QSlider, qt_emit){
}

/*********************************
 *    class     QSlider */
/*
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QSlider, event){
		/* o public*/

		/* qt_QEvent* event,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QEvent")) {
				RETURN_BOOL(obj->event((QEvent*) obj_z_0));
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QSlider, className){
}

/*********************************
 *    class     QSlider */
/*
 *    function  setTickPosition
 *    flags:    
 */
ZEND_METHOD(QSlider, setTickPosition){
		/* l public*/

		/* int position,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();


			obj->setTickPosition((QSlider::TickPosition) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QSlider, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QSlider *obj = (QSlider*) PHP_QT_FETCH();


			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QSlider::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QSlider_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QSlider */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QSlider, qt_property){
}


PHP_QT_DESTRUCT(QSlider);

