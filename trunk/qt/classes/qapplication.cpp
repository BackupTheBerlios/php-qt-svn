/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QApplication.cpp - QApplication PHP implementation.
 * begin           : Thu Feb 23 12:34:50 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;
#include "../php_qt.h"


#include <QApplication>
#include <QPalette>
#include <QFontMetrics>
#include <QIcon>

int argc__;
char *argv__[1];


/*		public enumType:long {
			Type = 0,
			Type = 1,
			Type = 2
		}
*/

/*		public enumColorSpec:long {
			NormalColor = 0,
			CustomColor = 1,
			ManyColor = 2
		}
*/
/*********************************
 *    class     QApplication
 *    function  sessionKey
 *    flags:    c
 */
ZEND_METHOD(QApplication, sessionKey){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->sessionKey();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QApplication, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QApplication::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  clipboard
 *    flags:    s
 */
ZEND_METHOD(QApplication, clipboard){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QClipboard ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QClipboard *) obj->clipboard();
			} else {
				*return_object = (QClipboard *) QApplication::clipboard();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  startDragTime
 *    flags:    s
 */
ZEND_METHOD(QApplication, startDragTime){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->startDragTime());
	}
}

/*********************************
 *    class     QApplication
 *    function  sessionId
 *    flags:    c
 */
ZEND_METHOD(QApplication, sessionId){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->sessionId();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  isSessionRestored
 *    flags:    c
 */
ZEND_METHOD(QApplication, isSessionRestored){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSessionRestored());
	}
}

/*********************************
 *    class     QApplication
 *    function  setColorSpec
 *    flags:    s
 */
ZEND_METHOD(QApplication, setColorSpec){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setColorSpec((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setStartDragDistance
 *    flags:    s
 */
ZEND_METHOD(QApplication, setStartDragDistance){
		/* l public*/

		/* int l,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setStartDragDistance((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setLayoutDirection
 *    flags:    s
 */
ZEND_METHOD(QApplication, setLayoutDirection){
		/* l public*/

		/* int direction,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  keyboardInputInterval
 *    flags:    s
 */
ZEND_METHOD(QApplication, keyboardInputInterval){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->keyboardInputInterval());
	}
}

/*********************************
 *    class     QApplication
 *    function  allWidgets
 *    flags:    s
 */
ZEND_METHOD(QApplication, allWidgets){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QWidgetList* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidgetList) obj->allWidgets();
			} else {
				*return_object = (QWidgetList) QApplication::allWidgets();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  setCursorFlashTime
 *    flags:    s
 */
ZEND_METHOD(QApplication, setCursorFlashTime){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setCursorFlashTime((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setWheelScrollLines
 *    flags:    s
 */
ZEND_METHOD(QApplication, setWheelScrollLines){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setWheelScrollLines((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setEffectEnabled
 *    flags:    s
 */
ZEND_METHOD(QApplication, setEffectEnabled){
		/* ll public*/

		/* int , int enable,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setEffectEnabled((Qt::UIEffect) Z_LVAL_P(z_0) ,(bool) Z_LVAL_P(z_1));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setStyle
 *    flags:    s
 */
ZEND_METHOD(QApplication, setStyle){
//qt_QStyle*
		/* o public*/

		/* qt_QStyle* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QStyle")) {
				obj->setStyle((QStyle*) obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  isRightToLeft
 *    flags:    s
 */
ZEND_METHOD(QApplication, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRightToLeft());
	}
}

/*********************************
 *    class     QApplication
 *    function  setDesktopSettingsAware
 *    flags:    s
 */
ZEND_METHOD(QApplication, setDesktopSettingsAware){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setDesktopSettingsAware((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  inputContext
 *    flags:    c
 */
ZEND_METHOD(QApplication, inputContext){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QInputContext ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QInputContext *) obj->inputContext();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  palette
 *    flags:    s
 */
ZEND_METHOD(QApplication, palette){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QPalette* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QPalette) obj->palette();
			} else {
				*return_object = (QPalette) QApplication::palette();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  desktopSettingsAware
 *    flags:    s
 */
ZEND_METHOD(QApplication, desktopSettingsAware){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_BOOL(obj->desktopSettingsAware());
	}
}

/*********************************
 *    class     QApplication
 *    function  fontMetrics
 *    flags:    s
 */
ZEND_METHOD(QApplication, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QFontMetrics* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QFontMetrics) obj->fontMetrics();
			} else {
				*return_object = (QFontMetrics) QApplication::fontMetrics();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  desktop
 *    flags:    s
 */
ZEND_METHOD(QApplication, desktop){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QDesktopWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QDesktopWidget *) obj->desktop();
			} else {
				*return_object = (QDesktopWidget *) QApplication::desktop();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QApplication, staticMetaObject){
}

/*********************************
 *    class     QApplication
 *    function  colorSpec
 *    flags:    s
 */
ZEND_METHOD(QApplication, colorSpec){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->colorSpec());
	}
}

/*********************************
 *    class     QApplication
 *    function  quitOnLastWindowClosed
 *    flags:    s
 */
ZEND_METHOD(QApplication, quitOnLastWindowClosed){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_BOOL(obj->quitOnLastWindowClosed());
	}
}

/*********************************
 *    class     QApplication
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QApplication, qObject){
}

/*********************************
 *    class     QApplication
 *    function  wheelScrollLines
 *    flags:    s
 */
ZEND_METHOD(QApplication, wheelScrollLines){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->wheelScrollLines());
	}
}

/*********************************
 *    class     QApplication
 *    function  mouseButtons
 *    flags:    s
 */
ZEND_METHOD(QApplication, mouseButtons){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->mouseButtons();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  topLevelWidgets
 *    flags:    s
 */
ZEND_METHOD(QApplication, topLevelWidgets){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QWidgetList* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidgetList) obj->topLevelWidgets();
			} else {
				*return_object = (QWidgetList) QApplication::topLevelWidgets();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  QApplication
 *    flags:    
 */
ZEND_METHOD(QApplication, __construct){
		/* ll public*/

		/* int argc, char* * argv,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){

//			QApplication *QApplication_ptr = new QApplication((int&) Z_LVAL_P(z_0) ,(char* *) Z_LVAL_P(z_1));
				QApplication *QApplication_ptr = new QApplication(argc__, argv__);

				PHP_QT_REGISTER(QApplication_ptr);
				RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  aboutQt
 *    flags:    sl
 */
ZEND_METHOD(QApplication, aboutQt){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->aboutQt();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  layoutDirection
 *    flags:    s
 */
ZEND_METHOD(QApplication, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->layoutDirection());
	}
}

/*********************************
 *    class     QApplication
 *    function  windowIcon
 *    flags:    s
 */
ZEND_METHOD(QApplication, windowIcon){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->windowIcon();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  style
 *    flags:    s
 */
ZEND_METHOD(QApplication, style){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QStyle ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QStyle *) obj->style();
			} else {
				*return_object = (QStyle *) QApplication::style();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  activeModalWidget
 *    flags:    s
 */
ZEND_METHOD(QApplication, activeModalWidget){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidget *) obj->activeModalWidget();
			} else {
				*return_object = (QWidget *) QApplication::activeModalWidget();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  setKeyboardInputInterval
 *    flags:    s
 */
ZEND_METHOD(QApplication, setKeyboardInputInterval){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setKeyboardInputInterval((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  restoreOverrideCursor
 *    flags:    s
 */
ZEND_METHOD(QApplication, restoreOverrideCursor){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->restoreOverrideCursor();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  setDoubleClickInterval
 *    flags:    s
 */
ZEND_METHOD(QApplication, setDoubleClickInterval){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setDoubleClickInterval((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  activeWindow
 *    flags:    s
 */
ZEND_METHOD(QApplication, activeWindow){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidget *) obj->activeWindow();
			} else {
				*return_object = (QWidget *) QApplication::activeWindow();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  setActiveWindow
 *    flags:    s
 */
ZEND_METHOD(QApplication, setActiveWindow){
//qt_QWidget*
		/* o public*/

		/* qt_QWidget* act,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				obj->setActiveWindow((QWidget*) obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  widgetAt
 *    flags:    s
 */
ZEND_METHOD(QApplication, widgetAt){
		/* l public*/

		/* const QPoint& p,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			QWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidget *) obj->widgetAt((const QPoint&) Z_LVAL_P(z_0));
			} else {
				*return_object = (QWidget *) QApplication::widgetAt((const QPoint&) Z_LVAL_P(z_0));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  isEffectEnabled
 *    flags:    s
 */
ZEND_METHOD(QApplication, isEffectEnabled){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			RETURN_BOOL(obj->isEffectEnabled((Qt::UIEffect) Z_LVAL_P(z_0)));
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setPalette
 *    flags:    s
 */
ZEND_METHOD(QApplication, setPalette){
//const QPalette&
		/* os public*/

		/* const QPalette& , const char* className,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_STRING){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QPalette")) {
				obj->setPalette((const QPalette&) *obj_z_0, (const char*) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  doubleClickInterval
 *    flags:    s
 */
ZEND_METHOD(QApplication, doubleClickInterval){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->doubleClickInterval());
	}
}

/*********************************
 *    class     QApplication
 *    function  font
 *    flags:    s
 */
ZEND_METHOD(QApplication, font){
//const QWidget*
		/* o public*/

		/* const QWidget* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				QFont* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QFont) obj->font((const QWidget*) obj_z_0);
			} else {
				*return_object = (QFont) QApplication::font((const QWidget*) obj_z_0);
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  globalStrut
 *    flags:    s
 */
ZEND_METHOD(QApplication, globalStrut){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QSize* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QSize) obj->globalStrut();
			} else {
				*return_object = (QSize) QApplication::globalStrut();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  setGlobalStrut
 *    flags:    s
 */
ZEND_METHOD(QApplication, setGlobalStrut){
//const QSize&
		/* o public*/

		/* const QSize& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QSize")) {
				obj->setGlobalStrut((const QSize&) *obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  exec
 *    flags:    s
 */
ZEND_METHOD(QApplication, exec){
	if (ZEND_NUM_ARGS() == 0){
//			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(QApplication::exec());
	}
}

/*********************************
 *    class     QApplication
 *    function  changeOverrideCursor
 *    flags:    s
 */
ZEND_METHOD(QApplication, changeOverrideCursor){
//const QCursor&
		/* o public*/

		/* const QCursor& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QCursor")) {
				obj->changeOverrideCursor((const QCursor&) *obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setWindowIcon
 *    flags:    s
 */
ZEND_METHOD(QApplication, setWindowIcon){
//const QIcon&
		/* o public*/

		/* const QIcon& icon,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QIcon")) {
				obj->setWindowIcon((const QIcon&) *obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  keyboardModifiers
 *    flags:    s
 */
ZEND_METHOD(QApplication, keyboardModifiers){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->keyboardModifiers();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QApplication, event){
		/* o protected*/
}

/*********************************
 *    class     QApplication
 *    function  beep
 *    flags:    s
 */
ZEND_METHOD(QApplication, beep){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->beep();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  overrideCursor
 *    flags:    s
 */
ZEND_METHOD(QApplication, overrideCursor){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QCursor ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QCursor *) obj->overrideCursor();
			} else {
				*return_object = (QCursor *) QApplication::overrideCursor();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  isLeftToRight
 *    flags:    s
 */
ZEND_METHOD(QApplication, isLeftToRight){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isLeftToRight());
	}
}

/*********************************
 *    class     QApplication
 *    function  syncX
 *    flags:    s
 */
ZEND_METHOD(QApplication, syncX){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->syncX();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  type
 *    flags:    s
 */
ZEND_METHOD(QApplication, type){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->type());
	}
}

/*********************************
 *    class     QApplication
 *    function  setOverrideCursor
 *    flags:    s
 */
ZEND_METHOD(QApplication, setOverrideCursor){
//const QCursor&
		/* o public*/

		/* const QCursor& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QCursor")) {
				obj->setOverrideCursor((const QCursor&) *obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  focusWidget
 *    flags:    s
 */
ZEND_METHOD(QApplication, focusWidget){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidget *) obj->focusWidget();
			} else {
				*return_object = (QWidget *) QApplication::focusWidget();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  topLevelAt
 *    flags:    s
 */
ZEND_METHOD(QApplication, topLevelAt){
		/* l public*/

		/* const QPoint& p,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			QWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidget *) obj->topLevelAt((const QPoint&) Z_LVAL_P(z_0));
			} else {
				*return_object = (QWidget *) QApplication::topLevelAt((const QPoint&) Z_LVAL_P(z_0));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  cursorFlashTime
 *    flags:    s
 */
ZEND_METHOD(QApplication, cursorFlashTime){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->cursorFlashTime());
	}
}

/*********************************
 *    class     QApplication
 *    function  startDragDistance
 *    flags:    s
 */
ZEND_METHOD(QApplication, startDragDistance){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			RETURN_LONG(obj->startDragDistance());
	}
}

/*********************************
 *    class     QApplication
 *    function  closeAllWindows
 *    flags:    sl
 */
ZEND_METHOD(QApplication, closeAllWindows){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			obj->closeAllWindows();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QApplication
 *    function  setFont
 *    flags:    s
 */
ZEND_METHOD(QApplication, setFont){
//const QFont&
		/* os public*/

		/* const QFont& , const char* className,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_STRING){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QFont")) {
				obj->setFont((const QFont&) *obj_z_0, (const char*) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  notify
 *    flags:    
 */
ZEND_METHOD(QApplication, notify){
//qt_QObject*
//qt_QEvent*
		/* oo public*/

		/* qt_QObject* , qt_QEvent* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_0->inherits("QObject") && !strcmp(Z_OBJCE_P(z_1)->name,"QEvent")) {
				RETURN_BOOL(obj->notify((QObject*) obj_z_0, (QEvent*) obj_z_1));
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setStartDragTime
 *    flags:    s
 */
ZEND_METHOD(QApplication, setStartDragTime){
		/* l public*/

		/* int ms,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setStartDragTime((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  activePopupWidget
 *    flags:    s
 */
ZEND_METHOD(QApplication, activePopupWidget){
	if (ZEND_NUM_ARGS() == 0){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QWidget ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QWidget *) obj->activePopupWidget();
			} else {
				*return_object = (QWidget *) QApplication::activePopupWidget();
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QApplication
 *    function  setInputContext
 *    flags:    
 */
ZEND_METHOD(QApplication, setInputContext){
//QInputContext*
		/* o public*/

		/* QInputContext* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QInputContext")) {
				obj->setInputContext((QInputContext*) obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  setQuitOnLastWindowClosed
 *    flags:    s
 */
ZEND_METHOD(QApplication, setQuitOnLastWindowClosed){
		/* l public*/

		/* int quit,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			obj->setQuitOnLastWindowClosed((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QApplication
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QApplication, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QApplication *obj = (QApplication*) PHP_QT_FETCH();


			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QApplication::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QApplication_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}


PHP_QT_DESTRUCT(QApplication);

