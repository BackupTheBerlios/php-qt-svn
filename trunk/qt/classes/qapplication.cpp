/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QApplication.cpp - QApplication PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QApplication>
#include <QPalette>
#include <QFontMetrics>
#include <QIcon>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QApplication_php_qt:public QApplication
{

public:
  QApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1);
    QApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1, bool GUIenableds2);
    QApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1, Type s2);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};
QApplication_php_qt::QApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1):
QApplication(argcs0, argvs1)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QApplication",&staticMetaObject));
}
QApplication_php_qt::QApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1, bool GUIenableds2):
QApplication(argcs0, argvs1, GUIenableds2)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QApplication",&staticMetaObject));
}
QApplication_php_qt::QApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1, Type s2):
QApplication(argcs0, argvs1, s2)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QApplication",&staticMetaObject));
}

PHP_QT_MOC(QApplication);

/*!
 * method sessionKey
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QApplication, sessionKey)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sessionKey' is not static");
        RETURN_NULL();
      }
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      *return_object = static_cast < QString > (selfpointer->sessionKey());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::sessionKey(...) ");
}

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QApplication, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QApplication::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QApplication::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::tr(...) ");
}

/*!
 * method clipboard
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QClipboard *
 * @flags	s
 */

ZEND_METHOD(QApplication, clipboard)
{
  ///
#ifdef PHP_QT_QClipboard        // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QClipboard * >(QApplication::clipboard());
      } else {
        le.ptr = static_cast < QClipboard * >(selfpointer->clipboard());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::clipboard(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method commitData
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QSessionManager & sms0
 * 
 * @access	public
 * @return	void
 * @flags	v
 */

/*!
 * method startDragTime
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, startDragTime)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::startDragTime());
      } else {
        RETURN_LONG(selfpointer->startDragTime());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::startDragTime(...) ");
}

/*!
 * method sessionId
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QApplication, sessionId)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sessionId' is not static");
        RETURN_NULL();
      }
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      *return_object = static_cast < QString > (selfpointer->sessionId());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::sessionId(...) ");
}

/*!
 * method isSessionRestored
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QApplication, isSessionRestored)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isSessionRestored' is not static");
        RETURN_NULL();
      }
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isSessionRestored());
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::isSessionRestored(...) ");
}

/*!
 * method setColorSpec
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setColorSpec)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int ints0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setColorSpec((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setColorSpec((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setColorSpec(...) ");
}

/*!
 * method setStartDragDistance
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ls0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setStartDragDistance)
{
  ///int ls0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int ls0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setStartDragDistance((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setStartDragDistance((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setStartDragDistance(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method setLayoutDirection
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::LayoutDirection directions0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setLayoutDirection)
{
  ///Qt::LayoutDirection directions0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try Qt::LayoutDirection directions0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(arg_0)));
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setLayoutDirection(...) ");
}

/*!
 * method keyboardInputInterval
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, keyboardInputInterval)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::keyboardInputInterval());
      } else {
        RETURN_LONG(selfpointer->keyboardInputInterval());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::keyboardInputInterval(...) ");
}

/*!
 * method allWidgets
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidgetList
 * @flags	s
 */

ZEND_METHOD(QApplication, allWidgets)
{
  ///
#ifdef PHP_QT_QWidgetList       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QWidgetList *return_object = new QWidgetList;

      if (getThis() == NULL) {
        *return_object = static_cast < QWidgetList > (QApplication::allWidgets());
      } else {
        *return_object = static_cast < QWidgetList > (selfpointer->allWidgets());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::allWidgets(...) ");
}

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method setCursorFlashTime
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setCursorFlashTime)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int ints0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setCursorFlashTime((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setCursorFlashTime((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setCursorFlashTime(...) ");
}

/*!
 * method setWheelScrollLines
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setWheelScrollLines)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int ints0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setWheelScrollLines((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setWheelScrollLines((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setWheelScrollLines(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setEffectEnabled
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::UIEffect Qt::UIEffects0
 * @param	 bool enable = trues1
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setEffectEnabled)
{
  ///Qt::UIEffect Qt::UIEffects0, bool enable = trues1
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try Qt::UIEffect Qt::UIEffects0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setEffectEnabled((Qt::UIEffect) Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setEffectEnabled((Qt::UIEffect) Z_LVAL_P(arg_0)));
      }
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_BOOL) {
      /// try Qt::UIEffect Qt::UIEffects0, bool enable = trues1,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setEffectEnabled((Qt::UIEffect) Z_LVAL_P(arg_0), (bool) Z_LVAL_P(arg_1)));
      } else {
        RETURN_VOID(selfpointer->setEffectEnabled((Qt::UIEffect) Z_LVAL_P(arg_0), (bool) Z_LVAL_P(arg_1)));
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setEffectEnabled(...) ");
}

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method setStyle
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QStyle *s0
 * 
 * overloaded args:
 * @param	const QString&
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setStyle)
{
  ///QStyle *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QStyle
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try QStyle *s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QStyle *cpp_arg_0 = static_cast < QStyle * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setStyle((QStyle *) cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setStyle((QStyle *) cpp_arg_0));
        }
      }
#endif

    }
  }
  ///const QString&
#ifdef PHP_QT_QStyle            // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        /// try const QString&,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        zend_class_entry *ce;

        object_init_ex(return_value, QString_ce_ptr);
        zend_rsrc_list_entry le;

        if (getThis() == NULL) {
          le.ptr = static_cast < QStyle * >(QApplication::setStyle((const QString &)*cpp_arg_0));
        } else {
          le.ptr = static_cast < QStyle * >(selfpointer->setStyle((const QString &)*cpp_arg_0));
        } php_qt_register(return_value, le);
        return;
      }
#endif

    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::setStyle(...) ");
}

/*!
 * method isRightToLeft
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QApplication, isRightToLeft)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QApplication::isRightToLeft());
      } else {
        RETURN_BOOL(selfpointer->isRightToLeft());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::isRightToLeft(...) ");
}

/*!
 * method setDesktopSettingsAware
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setDesktopSettingsAware)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      /// try bool bools0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setDesktopSettingsAware((bool) Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setDesktopSettingsAware((bool) Z_LVAL_P(arg_0)));
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setDesktopSettingsAware(...) ");
}

/*!
 * method palette
 * 
 * @param: -
 * @param: -
 * 
 * overloaded args:
 * @param	const QWidget *
 * 
 * overloaded args:
 * @param	const char *className
 * 
 * @access	public
 * @return	QPalette
 * @flags	s
 */

ZEND_METHOD(QApplication, palette)
{
  ///
#ifdef PHP_QT_QPalette          // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QPalette *return_object = new QPalette;

      if (getThis() == NULL) {
        *return_object = static_cast < QPalette > (QApplication::palette());
      } else {
        *return_object = static_cast < QPalette > (selfpointer->palette());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type


  ///const QWidget *
#ifdef PHP_QT_QPalette          // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        /// try const QWidget *,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
        zend_class_entry *ce;

        object_init_ex(return_value, QString_ce_ptr);
        zend_rsrc_list_entry le;
        QPalette *return_object = new QPalette;

        if (getThis() == NULL) {
          *return_object = static_cast < QPalette > (QApplication::palette((const QWidget *)cpp_arg_0));
        } else {
          *return_object = static_cast < QPalette > (selfpointer->palette((const QWidget *)cpp_arg_0));
        } le.ptr = (void *)return_object;
        php_qt_register(return_value, le);
        return;
      }
#endif

    }
  }
#endif // return type


  ///const char *className
#ifdef PHP_QT_QPalette          // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try const char *className,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QPalette *return_object = new QPalette;

      if (getThis() == NULL) {
        *return_object = static_cast < QPalette > (QApplication::palette((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QPalette > (selfpointer->palette((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::palette(...) ");
}

/*!
 * method inputContext
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QInputContext *
 * @flags	c
 */

ZEND_METHOD(QApplication, inputContext)
{
  ///
#ifdef PHP_QT_QInputContext     // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'inputContext' is not static");
        RETURN_NULL();
      }
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = static_cast < QInputContext * >(selfpointer->inputContext());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::inputContext(...) ");
}

/*!
 * method desktopSettingsAware
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QApplication, desktopSettingsAware)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QApplication::desktopSettingsAware());
      } else {
        RETURN_BOOL(selfpointer->desktopSettingsAware());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::desktopSettingsAware(...) ");
}

/*!
 * method fontMetrics
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QFontMetrics
 * @flags	s
 */

ZEND_METHOD(QApplication, fontMetrics)
{
  ///
#ifdef PHP_QT_QFontMetrics      // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QFontMetrics *return_object = new QFontMetrics;

      if (getThis() == NULL) {
        *return_object = static_cast < QFontMetrics > (QApplication::fontMetrics());
      } else {
        *return_object = static_cast < QFontMetrics > (selfpointer->fontMetrics());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::fontMetrics(...) ");
}

/*!
 * method desktop
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QDesktopWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, desktop)
{
  ///
#ifdef PHP_QT_QDesktopWidget    // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QDesktopWidget * >(QApplication::desktop());
      } else {
        le.ptr = static_cast < QDesktopWidget * >(selfpointer->desktop());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::desktop(...) ");
}

/*!
 * method colorSpec
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, colorSpec)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::colorSpec());
      } else {
        RETURN_LONG(selfpointer->colorSpec());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::colorSpec(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QApplication, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QApplication::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::staticMetaObject(...) ");
}

/*!
 * method quitOnLastWindowClosed
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QApplication, quitOnLastWindowClosed)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QApplication::quitOnLastWindowClosed());
      } else {
        RETURN_BOOL(selfpointer->quitOnLastWindowClosed());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::quitOnLastWindowClosed(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method wheelScrollLines
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, wheelScrollLines)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::wheelScrollLines());
      } else {
        RETURN_LONG(selfpointer->wheelScrollLines());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::wheelScrollLines(...) ");
}

/*!
 * method mouseButtons
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::MouseButtons
 * @flags	s
 */

ZEND_METHOD(QApplication, mouseButtons)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::mouseButtons());
      } else {
        RETURN_LONG(selfpointer->mouseButtons());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::mouseButtons(...) ");
}

/*!
 * method topLevelWidgets
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidgetList
 * @flags	s
 */

ZEND_METHOD(QApplication, topLevelWidgets)
{
  ///
#ifdef PHP_QT_QWidgetList       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QWidgetList *return_object = new QWidgetList;

      if (getThis() == NULL) {
        *return_object = static_cast < QWidgetList > (QApplication::topLevelWidgets());
      } else {
        *return_object = static_cast < QWidgetList > (selfpointer->topLevelWidgets());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::topLevelWidgets(...) ");
}

/*!
 * method QApplication
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int &argcs0s0
 * @param	char   **argvs1s1
 * 
 * overloaded args:
 * @param	int &argcs0
 * @param	char  **argvs1
 * @param	bool GUIenableds2
 * 
 * overloaded args:
 * @param	int &argcs0
 * @param	char  **argvs1
 * @param	 Type s2
 * 
 * overloaded args:
 * @param	const QApplication &
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QApplication, __construct)
{
  ///int &argcs0s0,char   **argvs1s1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_ARRAY) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int &argcs0s0,char   **argvs1s1,
      QApplication_php_qt *selfpointer = new QApplication_php_qt(getThis(), (int &)Z_LVAL_P(arg_0), new char *[1]);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///int &argcs0,char  **argvs1,bool GUIenableds2
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_ARRAY && Z_TYPE_P(arg_2) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int &argcs0,char  **argvs1,bool GUIenableds2,
      QApplication_php_qt *selfpointer = new QApplication_php_qt(getThis(), (int &)Z_LVAL_P(arg_0), new char *[1], (bool) Z_LVAL_P(arg_1));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
// notice: unknown argument  Type s2, skipped

  ///const QApplication &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QApplication
      if (inherits(Z_OBJCE_P(arg_0), 4)) {
/// method is private, skip
        php_error(E_ERROR, "QApplication::__construct(...) cannot be called with 'const QApplication &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::QApplication(...) ");
}

/*!
 * method aboutQt
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	sl
 */

ZEND_METHOD(QApplication, aboutQt)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::aboutQt());
      } else {
        RETURN_VOID(selfpointer->aboutQt());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::aboutQt(...) ");
}

/*!
 * method layoutDirection
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::LayoutDirection
 * @flags	s
 */

ZEND_METHOD(QApplication, layoutDirection)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::layoutDirection());
      } else {
        RETURN_LONG(selfpointer->layoutDirection());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::layoutDirection(...) ");
}

/*!
 * method windowIcon
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QIcon
 * @flags	s
 */

ZEND_METHOD(QApplication, windowIcon)
{
  ///
#ifdef PHP_QT_QIcon             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QIcon *return_object = new QIcon;

      if (getThis() == NULL) {
        *return_object = static_cast < QIcon > (QApplication::windowIcon());
      } else {
        *return_object = static_cast < QIcon > (selfpointer->windowIcon());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::windowIcon(...) ");
}

/*!
 * method style
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QStyle *
 * @flags	s
 */

ZEND_METHOD(QApplication, style)
{
  ///
#ifdef PHP_QT_QStyle            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QStyle * >(QApplication::style());
      } else {
        le.ptr = static_cast < QStyle * >(selfpointer->style());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::style(...) ");
}

/*!
 * method activeModalWidget
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, activeModalWidget)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QWidget * >(QApplication::activeModalWidget());
      } else {
        le.ptr = static_cast < QWidget * >(selfpointer->activeModalWidget());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::activeModalWidget(...) ");
}

/*!
 * method setKeyboardInputInterval
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setKeyboardInputInterval)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int ints0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setKeyboardInputInterval((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setKeyboardInputInterval((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setKeyboardInputInterval(...) ");
}

/*!
 * method restoreOverrideCursor
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, restoreOverrideCursor)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::restoreOverrideCursor());
      } else {
        RETURN_VOID(selfpointer->restoreOverrideCursor());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::restoreOverrideCursor(...) ");
}

/*!
 * method lastWindowClosed
 * 
 * @param: -
 * @param: -
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setDoubleClickInterval
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setDoubleClickInterval)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int ints0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setDoubleClickInterval((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setDoubleClickInterval((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setDoubleClickInterval(...) ");
}

/*!
 * method activeWindow
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, activeWindow)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QWidget * >(QApplication::activeWindow());
      } else {
        le.ptr = static_cast < QWidget * >(selfpointer->activeWindow());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::activeWindow(...) ");
}

/*!
 * method setActiveWindow
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget * acts0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setActiveWindow)
{
  ///QWidget * acts0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        /// try QWidget * acts0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setActiveWindow((QWidget *) cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setActiveWindow((QWidget *) cpp_arg_0));
        }
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setActiveWindow(...) ");
}

/*!
 * method widgetAt
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPoint &ps0
 * 
 * overloaded args:
 * @param	int x
 * @param	 int y
 * 
 * @access	public
 * @return	QWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, widgetAt)
{
  ///const QPoint &ps0
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QPoint
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QPoint &ps0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        zend_class_entry *ce;

        object_init_ex(return_value, QString_ce_ptr);
        zend_rsrc_list_entry le;

        if (getThis() == NULL) {
          le.ptr = static_cast < QWidget * >(QApplication::widgetAt((const QPoint &)*cpp_arg_0));
        } else {
          le.ptr = static_cast < QWidget * >(selfpointer->widgetAt((const QPoint &)*cpp_arg_0));
        } php_qt_register(return_value, le);
        return;
      }
#endif

    }
  }
#endif // return type


  ///int x, int y
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      /// try int x, int y,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QWidget * >(QApplication::widgetAt((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
      } else {
        le.ptr = static_cast < QWidget * >(selfpointer->widgetAt((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
      } php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::widgetAt(...) ");
}

/*!
 * method isEffectEnabled
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::UIEffect Qt::UIEffects0
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QApplication, isEffectEnabled)
{
  ///Qt::UIEffect Qt::UIEffects0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try Qt::UIEffect Qt::UIEffects0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QApplication::isEffectEnabled((Qt::UIEffect) Z_LVAL_P(arg_0)));
      } else {
        RETURN_BOOL(selfpointer->isEffectEnabled((Qt::UIEffect) Z_LVAL_P(arg_0)));
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::isEffectEnabled(...) ");
}

/*!
 * method setPalette
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPalette &s0
 * @param	 const char * className = 0s1
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setPalette)
{
  ///const QPalette &s0, const char * className = 0s1
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QPalette
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QPalette &s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QPalette *cpp_arg_0 = static_cast < QPalette * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setPalette((const QPalette &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setPalette((const QPalette &)*cpp_arg_0));
      }}
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING) {
#ifdef PHP_QT_QPalette
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QPalette &s0, const char * className = 0s1,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QPalette *cpp_arg_0 = static_cast < QPalette * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setPalette((const QPalette &)*cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0]));
        } else {
          RETURN_VOID(selfpointer->setPalette((const QPalette &)*cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0]));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setPalette(...) ");
}

/*!
 * method doubleClickInterval
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, doubleClickInterval)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::doubleClickInterval());
      } else {
        RETURN_LONG(selfpointer->doubleClickInterval());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::doubleClickInterval(...) ");
}

/*!
 * method font
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QWidget * = 0s0
 * 
 * @access	public
 * @return	QFont
 * @flags	s
 */

ZEND_METHOD(QApplication, font)
{
  ///const QWidget * = 0s0
#ifdef PHP_QT_QFont             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QFont *return_object = new QFont;

      if (getThis() == NULL) {
        *return_object = static_cast < QFont > (QApplication::font());
      } else {
        *return_object = static_cast < QFont > (selfpointer->font());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      /// try const QWidget * = 0s0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QFont *return_object = new QFont;

      if (getThis() == NULL) {
        *return_object = static_cast < QFont > (QApplication::font((const QWidget *)cpp_arg_0));
      } else {
        *return_object = static_cast < QFont > (selfpointer->font((const QWidget *)cpp_arg_0));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::font(...) ");
}

/*!
 * method globalStrut
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	s
 */

ZEND_METHOD(QApplication, globalStrut)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      if (getThis() == NULL) {
        *return_object = static_cast < QSize > (QApplication::globalStrut());
      } else {
        *return_object = static_cast < QSize > (selfpointer->globalStrut());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::globalStrut(...) ");
}

/*!
 * method setGlobalStrut
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QSize &s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setGlobalStrut)
{
  ///const QSize &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QSize
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QSize &s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QSize *cpp_arg_0 = static_cast < QSize * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setGlobalStrut((const QSize &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setGlobalStrut((const QSize &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setGlobalStrut(...) ");
}

/*!
 * method exec
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, exec)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::exec());
      } else {
        RETURN_LONG(selfpointer->exec());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::exec(...) ");
}

/*!
 * method changeOverrideCursor
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QCursor &s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, changeOverrideCursor)
{
  ///const QCursor &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QCursor
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QCursor &s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QCursor *cpp_arg_0 = static_cast < QCursor * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::changeOverrideCursor((const QCursor &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->changeOverrideCursor((const QCursor &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::changeOverrideCursor(...) ");
}

/*!
 * method setWindowIcon
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QIcon &icons0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setWindowIcon)
{
  ///const QIcon &icons0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QIcon
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QIcon &icons0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QIcon *cpp_arg_0 = static_cast < QIcon * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setWindowIcon((const QIcon &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setWindowIcon((const QIcon &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setWindowIcon(...) ");
}

/*!
 * method keyboardModifiers
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::KeyboardModifiers
 * @flags	s
 */

ZEND_METHOD(QApplication, keyboardModifiers)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::keyboardModifiers());
      } else {
        RETURN_LONG(selfpointer->keyboardModifiers());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::keyboardModifiers(...) ");
}

/*!
 * method event
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	bool
 * @flags	
 */

/*!
 * method beep
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, beep)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::beep());
      } else {
        RETURN_VOID(selfpointer->beep());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::beep(...) ");
}

/*!
 * method overrideCursor
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QCursor *
 * @flags	s
 */

ZEND_METHOD(QApplication, overrideCursor)
{
  ///
#ifdef PHP_QT_QCursor           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QCursor * >(QApplication::overrideCursor());
      } else {
        le.ptr = static_cast < QCursor * >(selfpointer->overrideCursor());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::overrideCursor(...) ");
}

/*!
 * method isLeftToRight
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QApplication, isLeftToRight)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QApplication::isLeftToRight());
      } else {
        RETURN_BOOL(selfpointer->isLeftToRight());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::isLeftToRight(...) ");
}

/*!
 * method syncX
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, syncX)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::syncX());
      } else {
        RETURN_VOID(selfpointer->syncX());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::syncX(...) ");
}

/*!
 * method type
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Type
 * @flags	s
 */

ZEND_METHOD(QApplication, type)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type Type");
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::type(...) ");
}

/*!
 * method setOverrideCursor
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QCursor &s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setOverrideCursor)
{
  ///const QCursor &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QCursor
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QCursor &s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QCursor *cpp_arg_0 = static_cast < QCursor * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setOverrideCursor((const QCursor &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setOverrideCursor((const QCursor &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setOverrideCursor(...) ");
}

/*!
 * method focusWidget
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, focusWidget)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QWidget * >(QApplication::focusWidget());
      } else {
        le.ptr = static_cast < QWidget * >(selfpointer->focusWidget());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::focusWidget(...) ");
}

/*!
 * method topLevelAt
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPoint &ps0
 * 
 * overloaded args:
 * @param	int x
 * @param	 int y
 * 
 * @access	public
 * @return	QWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, topLevelAt)
{
  ///const QPoint &ps0
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QPoint
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QPoint &ps0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        zend_class_entry *ce;

        object_init_ex(return_value, QString_ce_ptr);
        zend_rsrc_list_entry le;

        if (getThis() == NULL) {
          le.ptr = static_cast < QWidget * >(QApplication::topLevelAt((const QPoint &)*cpp_arg_0));
        } else {
          le.ptr = static_cast < QWidget * >(selfpointer->topLevelAt((const QPoint &)*cpp_arg_0));
        } php_qt_register(return_value, le);
        return;
      }
#endif

    }
  }
#endif // return type


  ///int x, int y
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      /// try int x, int y,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QWidget * >(QApplication::topLevelAt((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
      } else {
        le.ptr = static_cast < QWidget * >(selfpointer->topLevelAt((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
      } php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::topLevelAt(...) ");
}

/*!
 * method cursorFlashTime
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, cursorFlashTime)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::cursorFlashTime());
      } else {
        RETURN_LONG(selfpointer->cursorFlashTime());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::cursorFlashTime(...) ");
}

/*!
 * method startDragDistance
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QApplication, startDragDistance)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QApplication::startDragDistance());
      } else {
        RETURN_LONG(selfpointer->startDragDistance());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::startDragDistance(...) ");
}

/*!
 * method closeAllWindows
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	sl
 */

ZEND_METHOD(QApplication, closeAllWindows)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::closeAllWindows());
      } else {
        RETURN_VOID(selfpointer->closeAllWindows());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::closeAllWindows(...) ");
}

/*!
 * method setFont
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QFont &s0
 * @param	 const char * className = 0s1
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setFont)
{
  ///const QFont &s0, const char * className = 0s1
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QFont
      if (inherits(Z_OBJCE_P(arg_0), 24)) {
        /// try const QFont &s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QFont *cpp_arg_0 = static_cast < QFont * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setFont((const QFont &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setFont((const QFont &)*cpp_arg_0));
      }}
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_STRING) {
#ifdef PHP_QT_QFont
      if (inherits(Z_OBJCE_P(arg_0), 24)) {
        /// try const QFont &s0, const char * className = 0s1,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QFont *cpp_arg_0 = static_cast < QFont * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QApplication::setFont((const QFont &)*cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0]));
        } else {
          RETURN_VOID(selfpointer->setFont((const QFont &)*cpp_arg_0, (const char *)&Z_STRVAL_P(arg_1)[0]));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setFont(...) ");
}

/*!
 * method notify
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * @param	 QEvent *s1
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QApplication, notify)
{
  ///QObject *s0, QEvent *s1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QEvent
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_1), 21)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'notify' is not static");
          RETURN_NULL();
        }
        /// try QObject *s0, QEvent *s1,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QObject *cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
        QEvent *cpp_arg_1 = static_cast < QEvent * >(php_qt_fetch(arg_1));

        RETURN_BOOL(selfpointer->notify((QObject *) cpp_arg_0, (QEvent *) cpp_arg_1));
      }
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::notify(...) ");
}

/*!
 * method setStartDragTime
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int mss0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setStartDragTime)
{
  ///int mss0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int mss0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setStartDragTime((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setStartDragTime((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setStartDragTime(...) ");
}

/*!
 * method activePopupWidget
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	s
 */

ZEND_METHOD(QApplication, activePopupWidget)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QWidget * >(QApplication::activePopupWidget());
      } else {
        le.ptr = static_cast < QWidget * >(selfpointer->activePopupWidget());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::activePopupWidget(...) ");
}

/*!
 * method setInputContext
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QInputContext *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QApplication, setInputContext)
{
  ///QInputContext *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QInputContext
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setInputContext' is not static");
          RETURN_NULL();
        }
        /// try QInputContext *s0,
        QApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
        }
        QInputContext *cpp_arg_0 = static_cast < QInputContext * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setInputContext((QInputContext *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setInputContext(...) ");
}

/*!
 * method compressEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * @param	 QObject *receivers1
 * @param	 QPostEventList *s2
 * 
 * @access	protected
 * @return	bool
 * @flags	
 */

/*!
 * method setQuitOnLastWindowClosed
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool quits0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QApplication, setQuitOnLastWindowClosed)
{
  ///bool quits0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      /// try bool quits0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QApplication::setQuitOnLastWindowClosed((bool) Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->setQuitOnLastWindowClosed((bool) Z_LVAL_P(arg_0)));
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QApplication::setQuitOnLastWindowClosed(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QApplication, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QApplication::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QApplication::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QApplication::trUtf8(...) ");
}

/*!
 * method saveState
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QSessionManager & sms0
 * 
 * @access	public
 * @return	void
 * @flags	v
 */
