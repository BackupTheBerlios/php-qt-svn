/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QString.cpp - QString PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QString>
#include "../php_qt.h"


ZEND_METHOD(QString,__toString){

  QString *QString_ptr = (QString *) PHP_QT_FETCH();

  int l = QString_ptr->size();
  char* c = (char*) (QString_ptr->toAscii()).constData();
  RETURN_STRING(c,l);
}


/*		public enumSectionFlag:long {
			SectionDefault = 0x00,
			SectionSkipEmpty = 0x01,
			SectionIncludeLeadingSep = 0x02,
			SectionIncludeTrailingSep = 0x04,
			SectionCaseInsensitiveSeps = 0x08
		}
*/

/*		public enumSplitBehavior:long {
			SplitBehavior = 0,
			SplitBehavior = 1
		}
*/

/*		public enumNormalizationForm:long {
			NormalizationForm = 0,
			NormalizationForm = 1,
			NormalizationForm = 2,
			NormalizationForm = 3
		}
*/
/*********************************
 *    class     QString */
/*
 *    function  compare
 *    flags:    c
 */
ZEND_METHOD(QString, compare){
		/* o public*/

		/* const QString& s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_LONG(obj->compare((const QString&) obj_z_0));
			}
			}
		}
	}
		/* oo public*/

		/* const QString& s1, const QString& s2,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
				RETURN_LONG(obj->compare((const QString&) obj_z_0, (const QString&) obj_z_1));
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  utf16
 *    flags:    c
 */
ZEND_METHOD(QString, utf16){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				const ushort * return_object = (const ushort *) obj->utf16();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constData
 *    flags:    c
 */
ZEND_METHOD(QString, constData){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				const QChar * return_object = (const QChar *) obj->constData();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  insert
 *    flags:    
 */
ZEND_METHOD(QString, insert){
		/* ll public*/

		/* int i, char c,  */
		/* lo public*/

		/* int i, const QString& s,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_1)->name == "QString") {
					QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0), (const QString&) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* lol public*/

		/* int i, const QChar* uc, int len,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_1)->name == "char") {
					QString & return_object = (QString &) obj->insert((int) Z_LVAL_P(z_0), (const QChar*) obj_z_1, (int) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  clear
 *    flags:    
 */
ZEND_METHOD(QString, clear){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setUtf16
 *    flags:    
 */
ZEND_METHOD(QString, setUtf16){
		/* ol public*/

		/* const ushort* utf16, int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->setUtf16((const ushort*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  prepend
 *    flags:    
 */
ZEND_METHOD(QString, prepend){
		/* l public*/

		/* char c,  */
		/* s public*/

		/* const char* s,  */
		/* o public*/

		/* const QString& s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->prepend((char) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_STRING){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->prepend( (const char*) Z_STRVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString & return_object = (QString &) obj->prepend((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_0)->name == "QByteArray") {
					QString & return_object = (QString &) obj->prepend((const QByteArray&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  trimmed
 *    flags:    c
 */
ZEND_METHOD(QString, trimmed){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				QString return_object = (QString) obj->trimmed();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  chop
 *    flags:    
 */
ZEND_METHOD(QString, chop){
		/* l public*/

		/* int n,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->chop((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  leftJustified
 *    flags:    c
 */
ZEND_METHOD(QString, leftJustified){
		/* lll public*/

		/* int width, char fill, int trunc,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->leftJustified((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(bool) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  squeeze
 *    flags:    
 */
ZEND_METHOD(QString, squeeze){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->squeeze();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  count
 *    flags:    c
 */
ZEND_METHOD(QString, count){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
	}
		/* o public*/

		/* const QRegExp& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
				RETURN_LONG(obj->count((const QRegExp&) obj_z_0));
			}
			}
		}
	}
		/* ol public*/

		/* const QString& s, int cs,  */
		/* ll public*/

		/* char c, int cs,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_LONG(obj->count((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->count((char) Z_LVAL_P(z_0) ,(Qt::CaseSensitivity) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromAscii
 *    flags:    s
 */
ZEND_METHOD(QString, fromAscii){
		/* sl public*/

		/* const char* , int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->fromAscii( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLongLong
 *    flags:    c
 */
ZEND_METHOD(QString, toLongLong){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->toLongLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUpper
 *    flags:    c
 */
ZEND_METHOD(QString, toUpper){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				QString return_object = (QString) obj->toUpper();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  QString
 *    flags:    
 */
ZEND_METHOD(QString, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QString *QString_ptr = new QString();
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
	}
		/* l public*/

		/* char c,  */
		/* s public*/

		/* const char* ch,  */
		/* o public*/

		/* const QLatin1String& latin1,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){


			QString *QString_ptr = new QString((char) Z_LVAL_P(z_0));
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_STRING){


			QString *QString_ptr = new QString( (const char*) Z_STRVAL_P(z_0));
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QLatin1String")) {
				QString *QString_ptr = new QString((const QLatin1String&) obj_z_0);
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QString") {
				QString *QString_ptr = new QString((const QString&) obj_z_0);
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QByteArray") {
				QString *QString_ptr = new QString((const QByteArray&) obj_z_0);
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			if(obj_z_0->inherits("Null")) {
				QString *QString_ptr = new QString((const Null&) obj_z_0);
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* ol public*/

		/* const QChar* unicode, int size,  */
		/* ll public*/

		/* int size, char c,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "char") {
				QString *QString_ptr = new QString((const QChar*) obj_z_0, (int) Z_LVAL_P(z_1));
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){


			QString *QString_ptr = new QString((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1));
				PHP_QT_REGISTER(QString_ptr);
				RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  normalized
 *    flags:    c
 */
ZEND_METHOD(QString, normalized){
		/* o public*/

		/* QString::NormalizationForm mode,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->normalized((QString::NormalizationForm) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
		/* ol public*/

		/* QString::NormalizationForm mode, int version,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->normalized((QString::NormalizationForm) Z_LVAL_P(z_0) ,(QChar::UnicodeVersion) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromUtf16
 *    flags:    s
 */
ZEND_METHOD(QString, fromUtf16){
		/* ol public*/

		/* const ushort* , int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->fromUtf16((const ushort*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isRightToLeft
 *    flags:    c
 */
ZEND_METHOD(QString, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRightToLeft());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setNum
 *    flags:    
 */
ZEND_METHOD(QString, setNum){
		/* ol public*/

		/* short , int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->setNum((short) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
		/* oll public*/

		/* float , char f, int prec,  */
		/* lll public*/

		/* double , char f, int prec,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->setNum((float) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->setNum((double) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  endsWith
 *    flags:    c
 */
ZEND_METHOD(QString, endsWith){
		/* ol public*/

		/* const QString& s, int cs,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_BOOL(obj->endsWith((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
			}
			if(Z_OBJCE_P(z_0)->name == "char") {
				RETURN_BOOL(obj->endsWith((const QChar&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  number
 *    flags:    s
 */
ZEND_METHOD(QString, number){
		/* ol public*/

		/* unsigned long , int base,  */
		/* ll public*/

		/* int , int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->number((ulong) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->number((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
		/* lll public*/

		/* double , char f, int prec,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->number((double) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  localeAwareCompare
 *    flags:    c
 */
ZEND_METHOD(QString, localeAwareCompare){
		/* o public*/

		/* const QString& s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_LONG(obj->localeAwareCompare((const QString&) obj_z_0));
			}
			}
		}
	}
		/* oo public*/

		/* const QString& s1, const QString& s2,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
				RETURN_LONG(obj->localeAwareCompare((const QString&) obj_z_0, (const QString&) obj_z_1));
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  section
 *    flags:    c
 */
ZEND_METHOD(QString, section){
		/* lllo public*/

		/* char sep, int start, int end, QString::SectionFlags flags,  */
		/* ollo public*/

		/* const QString& in_sep, int start, int end, QString::SectionFlags flags,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->section((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(QString::SectionFlags) Z_LVAL_P(z_3));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString return_object = (QString) obj->section((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (QString::SectionFlags) Z_LVAL_P(z_3));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
					QString return_object = (QString) obj->section((const QRegExp&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (QString::SectionFlags) Z_LVAL_P(z_3));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isSimpleText
 *    flags:    c
 */
ZEND_METHOD(QString, isSimpleText){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSimpleText());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  size
 *    flags:    c
 */
ZEND_METHOD(QString, size){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->size());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  simplified
 *    flags:    c
 */
ZEND_METHOD(QString, simplified){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				QString return_object = (QString) obj->simplified();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUInt
 *    flags:    c
 */
ZEND_METHOD(QString, toUInt){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->toUInt((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUShort
 *    flags:    c
 */
ZEND_METHOD(QString, toUShort){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->toUShort((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  truncate
 *    flags:    
 */
ZEND_METHOD(QString, truncate){
		/* l public*/

		/* int pos,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->truncate((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toAscii
 *    flags:    c
 */
ZEND_METHOD(QString, toAscii){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_STRING((char*) obj->toAscii(), 1);
	}
}

/*********************************
 *    class     QString */
/*
 *    function  length
 *    flags:    c
 */
ZEND_METHOD(QString, length){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->length());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  right
 *    flags:    c
 */
ZEND_METHOD(QString, right){
		/* l public*/

		/* int len,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->right((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  push_front
 *    flags:    
 */
ZEND_METHOD(QString, push_front){
		/* l public*/

		/* char c,  */
		/* o public*/

		/* const QString& s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->push_front((char) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->push_front((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUtf8
 *    flags:    c
 */
ZEND_METHOD(QString, toUtf8){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_STRING((char*) obj->toUtf8(), 1);
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toULongLong
 *    flags:    c
 */
ZEND_METHOD(QString, toULongLong){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->toULongLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  indexOf
 *    flags:    c
 */
ZEND_METHOD(QString, indexOf){
		/* ol public*/

		/* const QRegExp& , int from,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
				RETURN_LONG(obj->indexOf((const QRegExp&) obj_z_0, (int) Z_LVAL_P(z_1)));
			}
			}
		}
	}
		/* oll public*/

		/* const QString& s, int from, int cs,  */
		/* lll public*/

		/* char c, int from, int cs,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_LONG(obj->indexOf((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (Qt::CaseSensitivity) Z_LVAL_P(z_2)));
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->indexOf((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::CaseSensitivity) Z_LVAL_P(z_2)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromRawData
 *    flags:    s
 */
ZEND_METHOD(QString, fromRawData){
		/* ol public*/

		/* const QChar* , int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "char") {
					QString return_object = (QString) obj->fromRawData((const QChar*) obj_z_0, (int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constEnd
 *    flags:    c
 */
ZEND_METHOD(QString, constEnd){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->constEnd();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  left
 *    flags:    c
 */
ZEND_METHOD(QString, left){
		/* l public*/

		/* int len,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->left((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromLocal8Bit
 *    flags:    s
 */
ZEND_METHOD(QString, fromLocal8Bit){
		/* sl public*/

		/* const char* , int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->fromLocal8Bit( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  startsWith
 *    flags:    c
 */
ZEND_METHOD(QString, startsWith){
		/* ol public*/

		/* const QString& s, int cs,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_BOOL(obj->startsWith((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
			}
			if(Z_OBJCE_P(z_0)->name == "char") {
				RETURN_BOOL(obj->startsWith((const QChar&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1)));
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  remove
 *    flags:    
 */
ZEND_METHOD(QString, remove){
		/* o public*/

		/* const QRegExp& rx,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
					QString & return_object = (QString &) obj->remove((const QRegExp&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* ol public*/

		/* const QString& s, int cs,  */
		/* ll public*/

		/* int i, int len,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString & return_object = (QString &) obj->remove((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->remove((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isEmpty
 *    flags:    c
 */
ZEND_METHOD(QString, isEmpty){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEmpty());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  arg
 *    flags:    c
 */
ZEND_METHOD(QString, arg){
		/* oo public*/

		/* const QString& a1, const QString& a2,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (const QString&) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* ooo public*/

		/* const QString& a1, const QString& a2, const QString& a3,  */
		/* olo public*/

		/* const QString& a, int fieldWidth, const QChar& fillChar,  */
		/* llo public*/

		/* char a, int fieldWidth, const QChar& fillChar,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString" && Z_OBJCE_P(z_2)->name == "QString") {
					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (const QString&) obj_z_1, (const QString&) obj_z_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_2)->name == "char") {
					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (const QChar&) obj_z_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_2)->name == "char") {
					QString return_object = (QString) obj->arg((char) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QChar&) obj_z_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* lllo public*/

		/* int a, int fieldWidth, int base, const QChar& fillChar,  */
		/* ollo public*/

		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
		/* oooo public*/

		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);


			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);


			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((qlonglong) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((qulonglong) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((long) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((ulong) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((short) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_3)->name == "char") {
					QString return_object = (QString) obj->arg((ushort) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (const QChar&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString" && Z_OBJCE_P(z_2)->name == "QString" && Z_OBJCE_P(z_3)->name == "QString") {
					QString return_object = (QString) obj->arg((const QString&) obj_z_0, (const QString&) obj_z_1, (const QString&) obj_z_2, (const QString&) obj_z_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* llllo public*/

		/* double a, int fieldWidth, char fmt, int prec, const QChar& fillChar,  */

	if (ZEND_NUM_ARGS() == 5){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);


			if(Z_OBJCE_P(z_4)->name == "char") {
					QString return_object = (QString) obj->arg((double) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (char) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QChar&) obj_z_4);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  vsprintf
 *    flags:    
 */
ZEND_METHOD(QString, vsprintf){
		/* so public*/

		/* const char* format, va_list ap,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("va_list")) {
					QString & return_object = (QString &) obj->vsprintf((const char*) Z_LVAL_P(z_0), (va_list) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toFloat
 *    flags:    c
 */
ZEND_METHOD(QString, toFloat){
		/* l public*/

		/* int* ok,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_FLOAT(obj->toFloat((bool*) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isDetached
 *    flags:    c
 */
ZEND_METHOD(QString, isDetached){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isDetached());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  reserve
 *    flags:    
 */
ZEND_METHOD(QString, reserve){
		/* l public*/

		/* int size,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->reserve((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toULong
 *    flags:    c
 */
ZEND_METHOD(QString, toULong){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_ULONG(obj->toULong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toShort
 *    flags:    c
 */
ZEND_METHOD(QString, toShort){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_SHORT(obj->toShort((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  split
 *    flags:    c
 */
ZEND_METHOD(QString, split){
		/* oo public*/

		/* const QRegExp& sep, QString::SplitBehavior behavior,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
					QStringList return_object = (QStringList) obj->split((const QRegExp&) obj_z_0, (QString::SplitBehavior) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* ool public*/

		/* const QString& sep, QString::SplitBehavior behavior, int cs,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QStringList return_object = (QStringList) obj->split((const QString&) obj_z_0, (QString::SplitBehavior) Z_LVAL_P(z_1), (Qt::CaseSensitivity) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setUnicode
 *    flags:    
 */
ZEND_METHOD(QString, setUnicode){
		/* ol public*/

		/* const QChar* unicode, int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "char") {
					QString & return_object = (QString &) obj->setUnicode((const QChar*) obj_z_0, (int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromLatin1
 *    flags:    s
 */
ZEND_METHOD(QString, fromLatin1){
		/* sl public*/

		/* const char* , int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->fromLatin1( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  data
 *    flags:    
 */
ZEND_METHOD(QString, data){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				QChar * return_object = (QChar *) obj->data();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLatin1
 *    flags:    c
 */
ZEND_METHOD(QString, toLatin1){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_STRING((char*) obj->toLatin1(), 1);
	}
}

/*********************************
 *    class     QString */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QString, end){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_INTPTR(obj->end());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  contains
 *    flags:    c
 */
ZEND_METHOD(QString, contains){
		/* o public*/

		/* const QRegExp& rx,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
				obj->contains((const QRegExp&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* ol public*/

		/* const QString& s, int cs,  */
		/* ll public*/

		/* char c, int cs,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->contains((const QString&) obj_z_0, (Qt::CaseSensitivity) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->contains((char) Z_LVAL_P(z_0) ,(Qt::CaseSensitivity) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  resize
 *    flags:    
 */
ZEND_METHOD(QString, resize){
		/* l public*/

		/* int size,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->resize((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  replace
 *    flags:    
 */
ZEND_METHOD(QString, replace){
		/* oo public*/

		/* const QRegExp& rx, const QString& after,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QRegExp" && Z_OBJCE_P(z_1)->name == "QString") {
					QString & return_object = (QString &) obj->replace((const QRegExp&) obj_z_0, (const QString&) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* ool public*/

		/* const QString& before, const QString& after, int cs,  */
		/* lol public*/

		/* char c, const QString& after, int cs,  */
		/* lll public*/

		/* int i, int len, char after,  */
		/* llo public*/

		/* int i, int len, const QString& after,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
					QString & return_object = (QString &) obj->replace((const QString&) obj_z_0, (const QString&) obj_z_1, (Qt::CaseSensitivity) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_1)->name == "QString") {
					QString & return_object = (QString &) obj->replace((char) Z_LVAL_P(z_0), (const QString&) obj_z_1, (Qt::CaseSensitivity) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(char) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_2)->name == "QString") {
					QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* llol public*/

		/* int i, int len, const QChar* s, int slen,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_2)->name == "char") {
					QString & return_object = (QString &) obj->replace((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QChar*) obj_z_2, (int) Z_LVAL_P(z_3));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromUtf8
 *    flags:    s
 */
ZEND_METHOD(QString, fromUtf8){
		/* sl public*/

		/* const char* , int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->fromUtf8( (const char*) Z_STRVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLong
 *    flags:    c
 */
ZEND_METHOD(QString, toLong){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->toLong((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  detach
 *    flags:    
 */
ZEND_METHOD(QString, detach){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->detach();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  append
 *    flags:    
 */
ZEND_METHOD(QString, append){
		/* l public*/

		/* char c,  */
		/* s public*/

		/* const char* s,  */
		/* o public*/

		/* const QString& s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->append((char) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_STRING){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->append( (const char*) Z_STRVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString & return_object = (QString &) obj->append((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_OBJCE_P(z_0)->name == "QByteArray") {
					QString & return_object = (QString &) obj->append((const QByteArray&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  mid
 *    flags:    c
 */
ZEND_METHOD(QString, mid){
		/* ll public*/

		/* int i, int len,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->mid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toDouble
 *    flags:    c
 */
ZEND_METHOD(QString, toDouble){
		/* l public*/

		/* int* ok,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_DOUBLE(obj->toDouble((bool*) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fill
 *    flags:    
 */
ZEND_METHOD(QString, fill){
		/* ll public*/

		/* char c, int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString & return_object = (QString &) obj->fill((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  rightJustified
 *    flags:    c
 */
ZEND_METHOD(QString, rightJustified){
		/* lll public*/

		/* int width, char fill, int trunc,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


				QString return_object = (QString) obj->rightJustified((int) Z_LVAL_P(z_0) ,(char) Z_LVAL_P(z_1) ,(bool) Z_LVAL_P(z_2));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLower
 *    flags:    c
 */
ZEND_METHOD(QString, toLower){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				QString return_object = (QString) obj->toLower();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  lastIndexOf
 *    flags:    c
 */
ZEND_METHOD(QString, lastIndexOf){
		/* ol public*/

		/* const QRegExp& , int from,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRegExp") {
				RETURN_LONG(obj->lastIndexOf((const QRegExp&) obj_z_0, (int) Z_LVAL_P(z_1)));
			}
			}
		}
	}
		/* oll public*/

		/* const QString& s, int from, int cs,  */
		/* lll public*/

		/* char c, int from, int cs,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_LONG(obj->lastIndexOf((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (Qt::CaseSensitivity) Z_LVAL_P(z_2)));
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->lastIndexOf((char) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::CaseSensitivity) Z_LVAL_P(z_2)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  unicode
 *    flags:    c
 */
ZEND_METHOD(QString, unicode){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
				const QChar * return_object = (const QChar *) obj->unicode();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  at
 *    flags:    c
 */
ZEND_METHOD(QString, at){
		/* l public*/

		/* int i,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->at((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  begin
 *    flags:    
 */
ZEND_METHOD(QString, begin){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_INTPTR(obj->begin());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  push_back
 *    flags:    
 */
ZEND_METHOD(QString, push_back){
		/* l public*/

		/* char c,  */
		/* o public*/

		/* const QString& s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			obj->push_back((char) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->push_back((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  capacity
 *    flags:    c
 */
ZEND_METHOD(QString, capacity){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->capacity());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constBegin
 *    flags:    c
 */
ZEND_METHOD(QString, constBegin){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->constBegin();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLocal8Bit
 *    flags:    c
 */
ZEND_METHOD(QString, toLocal8Bit){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_STRING((char*) obj->toLocal8Bit(), 1);
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toInt
 *    flags:    c
 */
ZEND_METHOD(QString, toInt){
		/* ll public*/

		/* int* ok, int base,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QString *obj = (QString*) PHP_QT_FETCH();


			RETURN_LONG(obj->toInt((bool*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1)));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QString, isNull){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
	}
}


PHP_QT_DESTRUCT(QString);

