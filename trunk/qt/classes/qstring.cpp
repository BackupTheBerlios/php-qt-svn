/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QString.cpp - QString PHP implementation.
 * begin           : Wed Jan 11 20:29:53 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QString>
#include "../php_qt.h"



/*		public enumSectionFlag:long {
			SectionDefault = 0x00,
			SectionSkipEmpty = 0x01,
			SectionIncludeLeadingSep = 0x02,
			SectionIncludeTrailingSep = 0x04,
			SectionCaseInsensitiveSeps = 0x08
		}
*/

/*		public enumSplitBehavior:long {
			SplitBehavior = 0,
			SplitBehavior = 1
		}
*/

/*		public enumNormalizationForm:long {
			NormalizationForm = 0,
			NormalizationForm = 1,
			NormalizationForm = 2,
			NormalizationForm = 3
		}
*/
/*********************************
 *    class     QString */
/*
 *    function  compare
 *    flags:    c
 */
ZEND_METHOD(QString, compare){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QString& s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				RETURN_LONG(obj->compare((const QString&) var_o_0));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QString& s1, const QString& s2,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
				RETURN_LONG(obj->compare((const QString&) var_oo_0, (const QString&) var_oo_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  utf16
 *    flags:    c
 */
ZEND_METHOD(QString, utf16){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			const ushort * return_object = (const ushort *) obj->utf16();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constData
 *    flags:    c
 */
ZEND_METHOD(QString, constData){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			const QChar * return_object = (const QChar *) obj->constData();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  insert
 *    flags:    
 */
ZEND_METHOD(QString, insert){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int i, QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QChar") {
				QString & return_object = (QString &) obj->insert((int) var_lo_0, (QChar) var_lo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_lo_0 == "const QString&") {
				QString & return_object = (QString &) obj->insert((int) var_lo_2, (const QString&) var_lo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* lol */
		long var_lol_0;    // default: 
		zval* z_var_lol_1;   // default: 
		long var_lol_2;    // default: 

		/* int i, const QChar* uc, int len,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lol", &var_lol_0, &z_var_lol_1, &var_lol_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_lol_1 = (QObject*) php_qt_fetch(z_var_lol_1);

			QString tmp_lol_0(var_lol_1->metaObject()->className());
			
			if(tmp_lol_0 == "const QChar*") {
				QString & return_object = (QString &) obj->insert((int) var_lol_0, (const QChar*) var_lol_1, (int) var_lol_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  clear
 *    flags:    
 */
ZEND_METHOD(QString, clear){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setUtf16
 *    flags:    
 */
ZEND_METHOD(QString, setUtf16){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* const ushort* utf16, int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const ushort*") {
				QString & return_object = (QString &) obj->setUtf16((const ushort*) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  prepend
 *    flags:    
 */
ZEND_METHOD(QString, prepend){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		/* const char* s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString & return_object = (QString &) obj->prepend( (const char*) var_s_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
		/* o */
		zval* z_var_o_1;   // default: 

		/* QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);

			QString tmp_o_0(var_o_1->metaObject()->className());
			
			if(tmp_o_0 == "QChar") {
				QString & return_object = (QString &) obj->prepend((QChar) var_o_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_o_0 == "const QString&") {
				QString & return_object = (QString &) obj->prepend((const QString&) var_o_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_o_0 == "const QByteArray&") {
				QString & return_object = (QString &) obj->prepend((const QByteArray&) var_o_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  trimmed
 *    flags:    c
 */
ZEND_METHOD(QString, trimmed){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			QString return_object = (QString) obj->trimmed();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  chop
 *    flags:    
 */
ZEND_METHOD(QString, chop){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int n,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->chop((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  leftJustified
 *    flags:    c
 */
ZEND_METHOD(QString, leftJustified){

	if (ZEND_NUM_ARGS() == 3){
		/* lob */
		long var_lob_0;    // default: 
		zval* z_var_lob_1;   // default: QLatin1Char(' ')
		bool var_lob_2;   // _default: false

		/* int width, QChar fill, bool trunc,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &z_var_lob_1, &var_lob_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_lob_1 = (QObject*) php_qt_fetch(z_var_lob_1);

			QString tmp_lob_0(var_lob_1->metaObject()->className());
			
			if(tmp_lob_0 == "QChar") {
				QString return_object = (QString) obj->leftJustified((int) var_lob_0, (QChar) var_lob_1, (bool) var_lob_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  squeeze
 *    flags:    
 */
ZEND_METHOD(QString, squeeze){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->squeeze();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  count
 *    flags:    c
 */
ZEND_METHOD(QString, count){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
	}

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRegExp& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRegExp&") {
				RETURN_LONG(obj->count((const QRegExp&) var_o_0));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::CaseSensitive

		/* QChar c, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QChar") {
				RETURN_LONG(obj->count((QChar) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
			}			
			if(tmp_ol_0 == "const QString&") {
				RETURN_LONG(obj->count((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_3));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromAscii
 *    flags:    s
 */
ZEND_METHOD(QString, fromAscii){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int len_sl_0;

		long var_sl_1;    // default: -1

		/* const char* , int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->fromAscii( (const char*) var_sl_0 ,(int) var_sl_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLongLong
 *    flags:    c
 */
ZEND_METHOD(QString, toLongLong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->toLongLong((bool*) var_bl_0 ,(int) var_bl_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUpper
 *    flags:    c
 */
ZEND_METHOD(QString, toUpper){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			QString return_object = (QString) obj->toUpper();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  QString
 *    flags:    
 */
ZEND_METHOD(QString, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QString *QString_ptr = new QString();
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
	}

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		/* const char* ch,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString *QString_ptr = new QString( (const char*) var_s_0);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
		}
		/* o */
		zval* z_var_o_1;   // default: 

		/* QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);

			QString tmp_o_0(var_o_1->metaObject()->className());
			
			if(tmp_o_0 == "QChar") {
				QString *QString_ptr = new QString((QChar) var_o_1);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QLatin1String&") {
				QString *QString_ptr = new QString((const QLatin1String&) var_o_1);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QString&") {
				QString *QString_ptr = new QString((const QString&) var_o_1);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QByteArray&") {
				QString *QString_ptr = new QString((const QByteArray&) var_o_1);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const Null&") {
				QString *QString_ptr = new QString((const Null&) var_o_1);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* const QChar* unicode, int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QChar*") {
				QString *QString_ptr = new QString((const QChar*) var_ol_0, (int) var_ol_1);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}
		}
		/* lo */
		long var_lo_2;    // default: 
		zval* z_var_lo_3;   // default: 

		/* int size, QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_2, &z_var_lo_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_lo_3 = (QObject*) php_qt_fetch(z_var_lo_3);

			QString tmp_lo_0(var_lo_3->metaObject()->className());
			
			if(tmp_lo_0 == "QChar") {
				QString *QString_ptr = new QString((int) var_lo_2, (QChar) var_lo_3);
			PHP_QT_REGISTER(QString_ptr);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  normalized
 *    flags:    c
 */
ZEND_METHOD(QString, normalized){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* NormalizationForm mode,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "NormalizationForm") {
				QString return_object = (QString) obj->normalized((NormalizationForm) var_o_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* NormalizationForm mode, QChar::UnicodeVersion version,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "NormalizationForm" && tmp_oo_1 == "QChar::UnicodeVersion") {
				QString return_object = (QString) obj->normalized((NormalizationForm) var_oo_0, (QChar::UnicodeVersion) var_oo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromUtf16
 *    flags:    s
 */
ZEND_METHOD(QString, fromUtf16){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: -1

		/* const ushort* , int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const ushort*") {
				QString return_object = (QString) obj->fromUtf16((const ushort*) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isRightToLeft
 *    flags:    c
 */
ZEND_METHOD(QString, isRightToLeft){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRightToLeft());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setNum
 *    flags:    
 */
ZEND_METHOD(QString, setNum){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 10

		/* short , int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "short") {
				QString & return_object = (QString &) obj->setNum((short) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "ushort") {
				QString & return_object = (QString &) obj->setNum((ushort) var_ol_0, (int) var_ol_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "ulong") {
				QString & return_object = (QString &) obj->setNum((ulong) var_ol_0, (int) var_ol_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "qlonglong") {
				QString & return_object = (QString &) obj->setNum((qlonglong) var_ol_0, (int) var_ol_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "qulonglong") {
				QString & return_object = (QString &) obj->setNum((qulonglong) var_ol_0, (int) var_ol_9);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* ll */
		long var_ll_10;    // default: 
		long var_ll_11;    // default: 10

		/* int , int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_10, &var_ll_11) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString & return_object = (QString &) obj->setNum((int) var_ll_10 ,(int) var_ll_11);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 'g'
		long var_oll_2;    // default: 6

		/* float , char f, int prec,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "float") {
				QString & return_object = (QString &) obj->setNum((float) var_oll_0, (char) var_oll_1, (int) var_oll_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_oll_0 == "double") {
				QString & return_object = (QString &) obj->setNum((double) var_oll_0, (char) var_oll_4, (int) var_oll_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  endsWith
 *    flags:    c
 */
ZEND_METHOD(QString, endsWith){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::CaseSensitive

		/* const QString& s, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QString&") {
				RETURN_BOOL(obj->endsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
			}			
			if(tmp_ol_0 == "const QChar&") {
				RETURN_BOOL(obj->endsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_3));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  number
 *    flags:    s
 */
ZEND_METHOD(QString, number){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 10

		/* ulong , int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "ulong") {
				QString return_object = (QString) obj->number((ulong) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "qlonglong") {
				QString return_object = (QString) obj->number((qlonglong) var_ol_0, (int) var_ol_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "qulonglong") {
				QString return_object = (QString) obj->number((qulonglong) var_ol_0, (int) var_ol_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* ll */
		long var_ll_6;    // default: 
		long var_ll_7;    // default: 10

		/* int , int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_6, &var_ll_7) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->number((int) var_ll_6 ,(int) var_ll_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 'g'
		long var_oll_2;    // default: 6

		/* double , char f, int prec,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "double") {
				QString return_object = (QString) obj->number((double) var_oll_0, (char) var_oll_1, (int) var_oll_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  localeAwareCompare
 *    flags:    c
 */
ZEND_METHOD(QString, localeAwareCompare){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QString& s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QString&") {
				RETURN_LONG(obj->localeAwareCompare((const QString&) var_o_0));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QString& s1, const QString& s2,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
				RETURN_LONG(obj->localeAwareCompare((const QString&) var_oo_0, (const QString&) var_oo_1));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  section
 *    flags:    c
 */
ZEND_METHOD(QString, section){

	if (ZEND_NUM_ARGS() == 4){
		/* ollo */
		zval* z_var_ollo_0;   // default: 
		long var_ollo_1;    // default: 
		long var_ollo_2;    // default: -1
		zval* z_var_ollo_3;   // default: SectionDefault

		/* QChar sep, int start, int end, SectionFlags flags,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oll|o|", &z_var_ollo_0, &var_ollo_1, &var_ollo_2, &z_var_ollo_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ollo_0 = (QObject*) php_qt_fetch(z_var_ollo_0);
			QObject* var_ollo_3 = (QObject*) php_qt_fetch(z_var_ollo_3);

			QString tmp_ollo_0(var_ollo_0->metaObject()->className());
			QString tmp_ollo_1(var_ollo_3->metaObject()->className());
			
			if(tmp_ollo_0 == "QChar" && tmp_ollo_1 == "SectionFlags") {
				QString return_object = (QString) obj->section((QChar) var_ollo_0, (int) var_ollo_1, (int) var_ollo_2, (SectionFlags) var_ollo_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "const QString&" && tmp_ollo_1 == "SectionFlags") {
				QString return_object = (QString) obj->section((const QString&) var_ollo_0, (int) var_ollo_5, (int) var_ollo_6, (SectionFlags) var_ollo_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "const QRegExp&" && tmp_ollo_1 == "SectionFlags") {
				QString return_object = (QString) obj->section((const QRegExp&) var_ollo_0, (int) var_ollo_9, (int) var_ollo_10, (SectionFlags) var_ollo_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isSimpleText
 *    flags:    c
 */
ZEND_METHOD(QString, isSimpleText){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isSimpleText());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  size
 *    flags:    c
 */
ZEND_METHOD(QString, size){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->size());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  simplified
 *    flags:    c
 */
ZEND_METHOD(QString, simplified){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			QString return_object = (QString) obj->simplified();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUInt
 *    flags:    c
 */
ZEND_METHOD(QString, toUInt){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->toUInt((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUShort
 *    flags:    c
 */
ZEND_METHOD(QString, toUShort){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_USHORT(obj->toUShort((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  truncate
 *    flags:    
 */
ZEND_METHOD(QString, truncate){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int pos,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->truncate((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toAscii
 *    flags:    c
 */
ZEND_METHOD(QString, toAscii){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toAscii());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  length
 *    flags:    c
 */
ZEND_METHOD(QString, length){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->length());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  right
 *    flags:    c
 */
ZEND_METHOD(QString, right){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int len,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->right((int) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  push_front
 *    flags:    
 */
ZEND_METHOD(QString, push_front){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QChar") {
				obj->push_front((QChar) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QString&") {
				obj->push_front((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toUtf8
 *    flags:    c
 */
ZEND_METHOD(QString, toUtf8){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toUtf8());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toULongLong
 *    flags:    c
 */
ZEND_METHOD(QString, toULongLong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->toULongLong((bool*) var_bl_0 ,(int) var_bl_1);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  indexOf
 *    flags:    c
 */
ZEND_METHOD(QString, indexOf){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 0

		/* const QRegExp& , int from,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QRegExp&") {
				RETURN_LONG(obj->indexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: 0
		long var_oll_2;    // default: Qt::CaseSensitive

		/* QChar c, int from, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "QChar") {
				RETURN_LONG(obj->indexOf((QChar) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
			}			
			if(tmp_oll_0 == "const QString&") {
				RETURN_LONG(obj->indexOf((const QString&) var_oll_0, (int) var_oll_4, (Qt::CaseSensitivity) var_oll_5));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromRawData
 *    flags:    s
 */
ZEND_METHOD(QString, fromRawData){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* const QChar* , int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QChar*") {
				QString return_object = (QString) obj->fromRawData((const QChar*) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constEnd
 *    flags:    c
 */
ZEND_METHOD(QString, constEnd){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->constEnd();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  left
 *    flags:    c
 */
ZEND_METHOD(QString, left){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int len,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->left((int) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromLocal8Bit
 *    flags:    s
 */
ZEND_METHOD(QString, fromLocal8Bit){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int len_sl_0;

		long var_sl_1;    // default: -1

		/* const char* , int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->fromLocal8Bit( (const char*) var_sl_0 ,(int) var_sl_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  startsWith
 *    flags:    c
 */
ZEND_METHOD(QString, startsWith){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::CaseSensitive

		/* const QString& s, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QString&") {
				RETURN_BOOL(obj->startsWith((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_1));
			}			
			if(tmp_ol_0 == "const QChar&") {
				RETURN_BOOL(obj->startsWith((const QChar&) var_ol_0, (Qt::CaseSensitivity) var_ol_3));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  remove
 *    flags:    
 */
ZEND_METHOD(QString, remove){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRegExp& rx,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRegExp&") {
				QString & return_object = (QString &) obj->remove((const QRegExp&) var_o_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::CaseSensitive

		/* QChar c, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QChar") {
				QString & return_object = (QString &) obj->remove((QChar) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ol_0 == "const QString&") {
				QString & return_object = (QString &) obj->remove((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* ll */
		long var_ll_4;    // default: 
		long var_ll_5;    // default: 

		/* int i, int len,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll", &var_ll_4, &var_ll_5) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString & return_object = (QString &) obj->remove((int) var_ll_4 ,(int) var_ll_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isEmpty
 *    flags:    c
 */
ZEND_METHOD(QString, isEmpty){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEmpty());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  arg
 *    flags:    c
 */
ZEND_METHOD(QString, arg){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QString& a1, const QString& a2,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QString&" && tmp_oo_1 == "const QString&") {
				QString return_object = (QString) obj->arg((const QString&) var_oo_0, (const QString&) var_oo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ooo */
		zval* z_var_ooo_0;   // default: 
		zval* z_var_ooo_1;   // default: 
		zval* z_var_ooo_2;   // default: 

		/* const QString& a1, const QString& a2, const QString& a3,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ooo", &z_var_ooo_0, &z_var_ooo_1, &z_var_ooo_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ooo_0 = (QObject*) php_qt_fetch(z_var_ooo_0);
			QObject* var_ooo_1 = (QObject*) php_qt_fetch(z_var_ooo_1);
			QObject* var_ooo_2 = (QObject*) php_qt_fetch(z_var_ooo_2);

			QString tmp_ooo_0(var_ooo_0->metaObject()->className());
			QString tmp_ooo_1(var_ooo_1->metaObject()->className());
			QString tmp_ooo_2(var_ooo_2->metaObject()->className());
			
			if(tmp_ooo_0 == "const QString&" && tmp_ooo_1 == "const QString&" && tmp_ooo_2 == "const QString&") {
				QString return_object = (QString) obj->arg((const QString&) var_ooo_0, (const QString&) var_ooo_1, (const QString&) var_ooo_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* olo */
		zval* z_var_olo_3;   // default: 
		long var_olo_4;    // default: 0
		zval* z_var_olo_5;   // default: QLatin1Char(' ')

		/* QChar a, int fieldWidth, const QChar& fillChar,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|o|", &z_var_olo_3, &var_olo_4, &z_var_olo_5) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_olo_3 = (QObject*) php_qt_fetch(z_var_olo_3);
			QObject* var_olo_5 = (QObject*) php_qt_fetch(z_var_olo_5);

			QString tmp_olo_0(var_olo_3->metaObject()->className());
			QString tmp_olo_1(var_olo_5->metaObject()->className());
			
			if(tmp_olo_0 == "QChar" && tmp_olo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((QChar) var_olo_3, (int) var_olo_4, (const QChar&) var_olo_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_olo_0 == "const QString&" && tmp_olo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((const QString&) var_olo_3, (int) var_olo_7, (const QChar&) var_olo_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* llo */
		long var_llo_9;    // default: 
		long var_llo_10;    // default: 0
		zval* z_var_llo_11;   // default: QLatin1Char(' ')

		/* char a, int fieldWidth, const QChar& fillChar,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|o|", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);

			QString tmp_llo_0(var_llo_11->metaObject()->className());
			
			if(tmp_llo_0 == "const QChar&") {
				QString return_object = (QString) obj->arg((char) var_llo_9, (int) var_llo_10, (const QChar&) var_llo_11);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* lllo */
		long var_lllo_0;    // default: 
		long var_lllo_1;    // default: 0
		long var_lllo_2;    // default: 10
		zval* z_var_lllo_3;   // default: QLatin1Char(' ')

		/* int a, int fieldWidth, int base, const QChar& fillChar,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|l|o|", &var_lllo_0, &var_lllo_1, &var_lllo_2, &z_var_lllo_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_lllo_3 = (QObject*) php_qt_fetch(z_var_lllo_3);

			QString tmp_lllo_0(var_lllo_3->metaObject()->className());
			
			if(tmp_lllo_0 == "const QChar&") {
				QString return_object = (QString) obj->arg((int) var_lllo_0, (int) var_lllo_1, (int) var_lllo_2, (const QChar&) var_lllo_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* ollo */
		zval* z_var_ollo_4;   // default: 
		long var_ollo_5;    // default: 0
		long var_ollo_6;    // default: 10
		zval* z_var_ollo_7;   // default: QLatin1Char(' ')

		/* qlonglong a, int fieldwidth, int base, const QChar& fillChar,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|o|", &z_var_ollo_4, &var_ollo_5, &var_ollo_6, &z_var_ollo_7) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ollo_4 = (QObject*) php_qt_fetch(z_var_ollo_4);
			QObject* var_ollo_7 = (QObject*) php_qt_fetch(z_var_ollo_7);

			QString tmp_ollo_0(var_ollo_4->metaObject()->className());
			QString tmp_ollo_1(var_ollo_7->metaObject()->className());
			
			if(tmp_ollo_0 == "qlonglong" && tmp_ollo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((qlonglong) var_ollo_4, (int) var_ollo_5, (int) var_ollo_6, (const QChar&) var_ollo_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "qulonglong" && tmp_ollo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((qulonglong) var_ollo_4, (int) var_ollo_9, (int) var_ollo_10, (const QChar&) var_ollo_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "long" && tmp_ollo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((long) var_ollo_4, (int) var_ollo_13, (int) var_ollo_14, (const QChar&) var_ollo_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "ulong" && tmp_ollo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((ulong) var_ollo_4, (int) var_ollo_17, (int) var_ollo_18, (const QChar&) var_ollo_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "short" && tmp_ollo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((short) var_ollo_4, (int) var_ollo_21, (int) var_ollo_22, (const QChar&) var_ollo_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ollo_0 == "ushort" && tmp_ollo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((ushort) var_ollo_4, (int) var_ollo_25, (int) var_ollo_26, (const QChar&) var_ollo_7);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* oooo */
		zval* z_var_oooo_28;   // default: 
		zval* z_var_oooo_29;   // default: 
		zval* z_var_oooo_30;   // default: 
		zval* z_var_oooo_31;   // default: 

		/* const QString& a1, const QString& a2, const QString& a3, const QString& a4,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oooo", &z_var_oooo_28, &z_var_oooo_29, &z_var_oooo_30, &z_var_oooo_31) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oooo_28 = (QObject*) php_qt_fetch(z_var_oooo_28);
			QObject* var_oooo_29 = (QObject*) php_qt_fetch(z_var_oooo_29);
			QObject* var_oooo_30 = (QObject*) php_qt_fetch(z_var_oooo_30);
			QObject* var_oooo_31 = (QObject*) php_qt_fetch(z_var_oooo_31);

			QString tmp_oooo_0(var_oooo_28->metaObject()->className());
			QString tmp_oooo_1(var_oooo_29->metaObject()->className());
			QString tmp_oooo_2(var_oooo_30->metaObject()->className());
			QString tmp_oooo_3(var_oooo_31->metaObject()->className());
			
			if(tmp_oooo_0 == "const QString&" && tmp_oooo_1 == "const QString&" && tmp_oooo_2 == "const QString&" && tmp_oooo_3 == "const QString&") {
				QString return_object = (QString) obj->arg((const QString&) var_oooo_28, (const QString&) var_oooo_29, (const QString&) var_oooo_30, (const QString&) var_oooo_31);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 5){
		/* olllo */
		zval* z_var_olllo_0;   // default: 
		long var_olllo_1;    // default: 0
		long var_olllo_2;    // default: 'g'
		long var_olllo_3;    // default: -1
		zval* z_var_olllo_4;   // default: QLatin1Char(' ')

		/* double a, int fieldWidth, char fmt, int prec, const QChar& fillChar,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|l|o|", &z_var_olllo_0, &var_olllo_1, &var_olllo_2, &var_olllo_3, &z_var_olllo_4) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_olllo_0 = (QObject*) php_qt_fetch(z_var_olllo_0);
			QObject* var_olllo_4 = (QObject*) php_qt_fetch(z_var_olllo_4);

			QString tmp_olllo_0(var_olllo_0->metaObject()->className());
			QString tmp_olllo_1(var_olllo_4->metaObject()->className());
			
			if(tmp_olllo_0 == "double" && tmp_olllo_1 == "const QChar&") {
				QString return_object = (QString) obj->arg((double) var_olllo_0, (int) var_olllo_1, (char) var_olllo_2, (int) var_olllo_3, (const QChar&) var_olllo_4);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  vsprintf
 *    flags:    
 */
ZEND_METHOD(QString, vsprintf){

	if (ZEND_NUM_ARGS() == 2){
		/* so */
		char* var_so_0;   // default: 
		int len_so_0;

		zval* z_var_so_1;   // default: 

		/* const char* format, va_list ap,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"so", &var_so_0, len_so_0, &z_var_so_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_so_1 = (QObject*) php_qt_fetch(z_var_so_1);

			QString tmp_so_0(var_so_1->metaObject()->className());
			
			if(tmp_so_0 == "va_list") {
				QString & return_object = (QString &) obj->vsprintf((const char*) var_so_0, (va_list) var_so_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toFloat
 *    flags:    c
 */
ZEND_METHOD(QString, toFloat){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 0

		/* bool* ok,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_FLOAT(obj->toFloat((bool*) var_b_0));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isDetached
 *    flags:    c
 */
ZEND_METHOD(QString, isDetached){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isDetached());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  reserve
 *    flags:    
 */
ZEND_METHOD(QString, reserve){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->reserve((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toULong
 *    flags:    c
 */
ZEND_METHOD(QString, toULong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_ULONG(obj->toULong((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toShort
 *    flags:    c
 */
ZEND_METHOD(QString, toShort){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_SHORT(obj->toShort((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  split
 *    flags:    c
 */
ZEND_METHOD(QString, split){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: KeepEmptyParts

		/* const QRegExp& sep, SplitBehavior behavior,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QRegExp&" && tmp_oo_1 == "SplitBehavior") {
				QStringList return_object = (QStringList) obj->split((const QRegExp&) var_oo_0, (SplitBehavior) var_oo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ool */
		zval* z_var_ool_0;   // default: 
		zval* z_var_ool_1;   // default: KeepEmptyParts
		long var_ool_2;    // default: Qt::CaseSensitive

		/* const QString& sep, SplitBehavior behavior, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo|l|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);

			QString tmp_ool_0(var_ool_0->metaObject()->className());
			QString tmp_ool_1(var_ool_1->metaObject()->className());
			
			if(tmp_ool_0 == "const QString&" && tmp_ool_1 == "SplitBehavior") {
				QStringList return_object = (QStringList) obj->split((const QString&) var_ool_0, (SplitBehavior) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  setUnicode
 *    flags:    
 */
ZEND_METHOD(QString, setUnicode){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* const QChar* unicode, int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QChar*") {
				QString & return_object = (QString &) obj->setUnicode((const QChar*) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromLatin1
 *    flags:    s
 */
ZEND_METHOD(QString, fromLatin1){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int len_sl_0;

		long var_sl_1;    // default: -1

		/* const char* , int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->fromLatin1( (const char*) var_sl_0 ,(int) var_sl_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  data
 *    flags:    
 */
ZEND_METHOD(QString, data){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			QChar * return_object = (QChar *) obj->data();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLatin1
 *    flags:    c
 */
ZEND_METHOD(QString, toLatin1){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toLatin1());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QString, end){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_INTPTR(obj->end());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  contains
 *    flags:    c
 */
ZEND_METHOD(QString, contains){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRegExp& rx,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRegExp&") {
				obj->contains((const QRegExp&) var_o_0);
			RETURN_NULL();
			}
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: Qt::CaseSensitive

		/* QChar c, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QChar") {
				obj->contains((QChar) var_ol_0, (Qt::CaseSensitivity) var_ol_1);
			RETURN_NULL();
			}			
			if(tmp_ol_0 == "const QString&") {
				obj->contains((const QString&) var_ol_0, (Qt::CaseSensitivity) var_ol_3);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  resize
 *    flags:    
 */
ZEND_METHOD(QString, resize){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->resize((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  replace
 *    flags:    
 */
ZEND_METHOD(QString, replace){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QRegExp& rx, const QString& after,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QRegExp&" && tmp_oo_1 == "const QString&") {
				QString & return_object = (QString &) obj->replace((const QRegExp&) var_oo_0, (const QString&) var_oo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* ool */
		zval* z_var_ool_0;   // default: 
		zval* z_var_ool_1;   // default: 
		long var_ool_2;    // default: Qt::CaseSensitive

		/* QChar before, QChar after, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ool|", &z_var_ool_0, &z_var_ool_1, &var_ool_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ool_0 = (QObject*) php_qt_fetch(z_var_ool_0);
			QObject* var_ool_1 = (QObject*) php_qt_fetch(z_var_ool_1);

			QString tmp_ool_0(var_ool_0->metaObject()->className());
			QString tmp_ool_1(var_ool_1->metaObject()->className());
			
			if(tmp_ool_0 == "QChar" && tmp_ool_1 == "QChar") {
				QString & return_object = (QString &) obj->replace((QChar) var_ool_0, (QChar) var_ool_1, (Qt::CaseSensitivity) var_ool_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ool_0 == "QChar" && tmp_ool_1 == "const QString&") {
				QString & return_object = (QString &) obj->replace((QChar) var_ool_0, (const QString&) var_ool_1, (Qt::CaseSensitivity) var_ool_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_ool_0 == "const QString&" && tmp_ool_1 == "const QString&") {
				QString & return_object = (QString &) obj->replace((const QString&) var_ool_0, (const QString&) var_ool_1, (Qt::CaseSensitivity) var_ool_8);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
		/* llo */
		long var_llo_9;    // default: 
		long var_llo_10;    // default: 
		zval* z_var_llo_11;   // default: 

		/* int i, int len, QChar after,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_9, &var_llo_10, &z_var_llo_11) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_llo_11 = (QObject*) php_qt_fetch(z_var_llo_11);

			QString tmp_llo_0(var_llo_11->metaObject()->className());
			
			if(tmp_llo_0 == "QChar") {
				QString & return_object = (QString &) obj->replace((int) var_llo_9, (int) var_llo_10, (QChar) var_llo_11);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_llo_0 == "const QString&") {
				QString & return_object = (QString &) obj->replace((int) var_llo_12, (int) var_llo_13, (const QString&) var_llo_11);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}

	if (ZEND_NUM_ARGS() == 4){
		/* llol */
		long var_llol_0;    // default: 
		long var_llol_1;    // default: 
		zval* z_var_llol_2;   // default: 
		long var_llol_3;    // default: 

		/* int i, int len, const QChar* s, int slen,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llol", &var_llol_0, &var_llol_1, &z_var_llol_2, &var_llol_3) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_llol_2 = (QObject*) php_qt_fetch(z_var_llol_2);

			QString tmp_llol_0(var_llol_2->metaObject()->className());
			
			if(tmp_llol_0 == "const QChar*") {
				QString & return_object = (QString &) obj->replace((int) var_llol_0, (int) var_llol_1, (const QChar*) var_llol_2, (int) var_llol_3);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fromUtf8
 *    flags:    s
 */
ZEND_METHOD(QString, fromUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* sl */
		char* var_sl_0;   // default: 
		int len_sl_0;

		long var_sl_1;    // default: -1

		/* const char* , int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"sl|", &var_sl_0, len_sl_0, &var_sl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->fromUtf8( (const char*) var_sl_0 ,(int) var_sl_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLong
 *    flags:    c
 */
ZEND_METHOD(QString, toLong){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->toLong((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  detach
 *    flags:    
 */
ZEND_METHOD(QString, detach){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->detach();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  append
 *    flags:    
 */
ZEND_METHOD(QString, append){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		/* const char* s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString & return_object = (QString &) obj->append( (const char*) var_s_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
		/* o */
		zval* z_var_o_1;   // default: 

		/* QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_1 = (QObject*) php_qt_fetch(z_var_o_1);

			QString tmp_o_0(var_o_1->metaObject()->className());
			
			if(tmp_o_0 == "QChar") {
				QString & return_object = (QString &) obj->append((QChar) var_o_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_o_0 == "const QString&") {
				QString & return_object = (QString &) obj->append((const QString&) var_o_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}			
			if(tmp_o_0 == "const QByteArray&") {
				QString & return_object = (QString &) obj->append((const QByteArray&) var_o_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  mid
 *    flags:    c
 */
ZEND_METHOD(QString, mid){

	if (ZEND_NUM_ARGS() == 2){
		/* ll */
		long var_ll_0;    // default: 
		long var_ll_1;    // default: -1

		/* int i, int len,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ll|", &var_ll_0, &var_ll_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->mid((int) var_ll_0 ,(int) var_ll_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toDouble
 *    flags:    c
 */
ZEND_METHOD(QString, toDouble){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 0

		/* bool* ok,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|", &var_b_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_DOUBLE(obj->toDouble((bool*) var_b_0));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  fill
 *    flags:    
 */
ZEND_METHOD(QString, fill){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: -1

		/* QChar c, int size,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QChar") {
				QString & return_object = (QString &) obj->fill((QChar) var_ol_0, (int) var_ol_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  rightJustified
 *    flags:    c
 */
ZEND_METHOD(QString, rightJustified){

	if (ZEND_NUM_ARGS() == 3){
		/* lob */
		long var_lob_0;    // default: 
		zval* z_var_lob_1;   // default: QLatin1Char(' ')
		bool var_lob_2;   // _default: false

		/* int width, QChar fill, bool trunc,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo|b|", &var_lob_0, &z_var_lob_1, &var_lob_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_lob_1 = (QObject*) php_qt_fetch(z_var_lob_1);

			QString tmp_lob_0(var_lob_1->metaObject()->className());
			
			if(tmp_lob_0 == "QChar") {
				QString return_object = (QString) obj->rightJustified((int) var_lob_0, (QChar) var_lob_1, (bool) var_lob_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLower
 *    flags:    c
 */
ZEND_METHOD(QString, toLower){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			QString return_object = (QString) obj->toLower();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  lastIndexOf
 *    flags:    c
 */
ZEND_METHOD(QString, lastIndexOf){

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: -1

		/* const QRegExp& , int from,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "const QRegExp&") {
				RETURN_LONG(obj->lastIndexOf((const QRegExp&) var_ol_0, (int) var_ol_1));
			}
		}
	}

	if (ZEND_NUM_ARGS() == 3){
		/* oll */
		zval* z_var_oll_0;   // default: 
		long var_oll_1;    // default: -1
		long var_oll_2;    // default: Qt::CaseSensitive

		/* QChar c, int from, int cs,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol|l|", &z_var_oll_0, &var_oll_1, &var_oll_2) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_oll_0 = (QObject*) php_qt_fetch(z_var_oll_0);

			QString tmp_oll_0(var_oll_0->metaObject()->className());
			
			if(tmp_oll_0 == "QChar") {
				RETURN_LONG(obj->lastIndexOf((QChar) var_oll_0, (int) var_oll_1, (Qt::CaseSensitivity) var_oll_2));
			}			
			if(tmp_oll_0 == "const QString&") {
				RETURN_LONG(obj->lastIndexOf((const QString&) var_oll_0, (int) var_oll_4, (Qt::CaseSensitivity) var_oll_5));
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  unicode
 *    flags:    c
 */
ZEND_METHOD(QString, unicode){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			const QChar * return_object = (const QChar *) obj->unicode();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QString_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QString */
/*
 *    function  at
 *    flags:    c
 */
ZEND_METHOD(QString, at){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int i,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			obj->at((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  begin
 *    flags:    
 */
ZEND_METHOD(QString, begin){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_INTPTR(obj->begin());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  push_back
 *    flags:    
 */
ZEND_METHOD(QString, push_back){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QChar c,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QChar") {
				obj->push_back((QChar) var_o_0);
			RETURN_NULL();
			}			
			if(tmp_o_0 == "const QString&") {
				obj->push_back((const QString&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  capacity
 *    flags:    c
 */
ZEND_METHOD(QString, capacity){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_LONG(obj->capacity());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  constBegin
 *    flags:    c
 */
ZEND_METHOD(QString, constBegin){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			obj->constBegin();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toLocal8Bit
 *    flags:    c
 */
ZEND_METHOD(QString, toLocal8Bit){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BYTE[](obj->toLocal8Bit());
	}
}

/*********************************
 *    class     QString */
/*
 *    function  toInt
 *    flags:    c
 */
ZEND_METHOD(QString, toInt){

	if (ZEND_NUM_ARGS() == 2){
		/* bl */
		bool var_bl_0;   // _default: 0
		long var_bl_1;    // default: 10

		/* bool* ok, int base,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b|l|", &var_bl_0, &var_bl_1) == SUCCESS) {
			QString *obj = (QString*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->toInt((bool*) var_bl_0 ,(int) var_bl_1));
		}
	}
}

/*********************************
 *    class     QString */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QString, isNull){
	if (ZEND_NUM_ARGS() == 0){
			QString *obj = (QString*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
	}
}


PHP_QT_DESTRUCT(QString);

