/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDialog.cpp - QDialog PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QDialog>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QDialog_php_qt:public QDialog
{

public:
  QDialog_php_qt(zval * zend_ptr, QWidget * parent = 0, Qt::WFlags f = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
  bool event(QEvent* event);
};

QDialog_php_qt::QDialog_php_qt(zval * zend_ptr, QWidget * parent, Qt::WFlags f):QDialog(parent, f)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QDialog",&staticMetaObject));
}

bool QDialog_php_qt::event ( QEvent * event ){
    return true;
}

PHP_QT_MOC(QDialog);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QDialog, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QDialog::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QDialog::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDialog::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setModal
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool modals0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, setModal)
{
  ///bool modals0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setModal' is not static");
        RETURN_NULL();
      }
      /// try bool modals0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setModal((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::setModal(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method isSizeGripEnabled
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QDialog, isSizeGripEnabled)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isSizeGripEnabled' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isSizeGripEnabled());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::isSizeGripEnabled(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method adjustPosition
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method setExtension
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget * extensions0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, setExtension)
{
  ///QWidget * extensions0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setExtension' is not static");
          RETURN_NULL();
        }
        /// try QWidget * extensions0,
        QDialog *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setExtension((QWidget *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::setExtension(...) ");
}

/*!
 * method result
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QDialog, result)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'result' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->result());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::result(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QDialog, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QDialog::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDialog::staticMetaObject(...) ");
}

/*!
 * method QDialog
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *parent = 0s0
 * @param	 Qt::WFlags f = 0s1
 * 
 * overloaded args:
 * @param	QDialogPrivate &
 * @param	 QWidget *parent
 * @param	 Qt::WFlags f = 0
 * 
 * overloaded args:
 * @param	const QDialog &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QDialog, __construct)
{
  ///QWidget *parent = 0s0, Qt::WFlags f = 0s1
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog_php_qt *
        selfpointer = new QDialog_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget *parent = 0s0,
      QWidget *
        cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QDialog_php_qt *
        selfpointer = new QDialog_php_qt(getThis(), (QWidget *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget *parent = 0s0, Qt::WFlags f = 0s1,
      QWidget *
        cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QDialog_php_qt *
        selfpointer = new QDialog_php_qt(getThis(), (QWidget *) cpp_arg_0, (Qt::WFlags) Z_LVAL_P(arg_1));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///QDialogPrivate &, QWidget *parent, Qt::WFlags f = 0
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QDialogPrivate
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 71)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QDialogPrivate &, QWidget *parent,
        QDialogPrivate *
          cpp_arg_0 = static_cast < QDialogPrivate * >(php_qt_fetch(arg_0));
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QDialog_php_qt *
          selfpointer = new QDialog_php_qt(getThis(), (QDialogPrivate &) * cpp_arg_0, (QWidget *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QDialogPrivate
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 71)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QDialogPrivate &, QWidget *parent, Qt::WFlags f = 0,
        QDialogPrivate *
          cpp_arg_0 = static_cast < QDialogPrivate * >(php_qt_fetch(arg_0));
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QDialog_php_qt *
          selfpointer = new QDialog_php_qt(getThis(), (QDialogPrivate &) * cpp_arg_0, (QWidget *) cpp_arg_1, (Qt::WFlags) Z_LVAL_P(arg_2));

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  ///const QDialog &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QDialog
      if (inherits(Z_OBJCE_P(arg_0), 15)) {
/// method is private, skip
        php_error(E_ERROR, "QDialog::__construct(...) cannot be called with 'const QDialog &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::QDialog(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method minimumSizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QDialog, minimumSizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDialog::minimumSizeHint(...) ");
}

/*!
 * method setOrientation
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::Orientation orientations0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, setOrientation)
{
  ///Qt::Orientation orientations0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setOrientation' is not static");
        RETURN_NULL();
      }
      /// try Qt::Orientation orientations0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setOrientation((Qt::Orientation) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::setOrientation(...) ");
}

/*!
 * method setResult
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int rs0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, setResult)
{
  ///int rs0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setResult' is not static");
        RETURN_NULL();
      }
      /// try int rs0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setResult((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::setResult(...) ");
}

/*!
 * method eventFilter
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * @param	 QEvent *s1
 * 
 * @access	protected
 * @return	bool
 * @flags	
 */

/*!
 * method contextMenuEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QContextMenuEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method accepted
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, accepted)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'accepted' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
//      RETURN_VOID(selfpointer->accepted());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::accepted(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method done
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	v
 */

/*!
 * method closeEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QCloseEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setSizeGripEnabled
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, setSizeGripEnabled)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setSizeGripEnabled' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setSizeGripEnabled((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::setSizeGripEnabled(...) ");
}

/*!
 * method resizeEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QResizeEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method exec
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	
 */

ZEND_METHOD(QDialog, exec)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'exec' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->exec());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::exec(...) ");
}

/*!
 * method showExtension
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, showExtension)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'showExtension' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->showExtension((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::showExtension(...) ");
}

/*!
 * method rejected
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, rejected)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'rejected' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
//      RETURN_VOID(selfpointer->rejected());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::rejected(...) ");
}

/*!
 * method event
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QDialog, event)
{
  ///QEvent *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QEvent
      if (inherits(Z_OBJCE_P(arg_0), 21)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'event' is not static");
          RETURN_NULL();
        }
        /// try QEvent *s0,
        QDialog *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
        }
        QEvent *
          cpp_arg_0 = static_cast < QEvent * >(php_qt_fetch(arg_0));

//        RETURN_BOOL(selfpointer->event((QEvent *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::event(...) ");
}

/*!
 * method showEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QShowEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method finished
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int results0
 * 
 * @access	public
 * @return	Q_SIGNALS: void
 * @flags	
 */

ZEND_METHOD(QDialog, finished)
{
  ///int results0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'finished' is not static");
        RETURN_NULL();
      }
      /// try int results0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
//      RETURN_VOID(selfpointer->finished((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::finished(...) ");
}

/*!
 * method orientation
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientation
 * @flags	c
 */

ZEND_METHOD(QDialog, orientation)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'orientation' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->orientation());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::orientation(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QDialog, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDialog::sizeHint(...) ");
}

/*!
 * method extension
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget*
 * @flags	c
 */

ZEND_METHOD(QDialog, extension)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'extension' is not static");
        RETURN_NULL();
      }
      /// try 
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QWidget * >(selfpointer->extension());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDialog::extension(...) ");
}

/*!
 * method keyPressEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QKeyEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method accept
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	v
 */

/*!
 * method setVisible
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool visibles0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDialog, setVisible)
{
  ///bool visibles0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setVisible' is not static");
        RETURN_NULL();
      }
      /// try bool visibles0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setVisible((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDialog::setVisible(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QDialog, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QDialog::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QDialog *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDialog * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QDialog::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDialog::trUtf8(...) ");
}

/*!
 * method reject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	v
 */
