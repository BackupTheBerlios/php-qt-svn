/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QChildEvent.cpp - QChildEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QChildEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QChildEvent_php_qt:public QChildEvent
{

public:
  QChildEvent_php_qt(zval * zend_ptr, Type types0, QObject * childs1);


  zval *zend_ptr;
};

QChildEvent_php_qt::QChildEvent_php_qt(zval * zend_ptr, Type types0, QObject * childs1):QChildEvent(types0, childs1)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method polished
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QChildEvent, polished)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'polished' is not static");
        RETURN_NULL();
      }
      /// try 
      QChildEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QChildEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->polished());
    }
  }
  php_error(E_ERROR, "could not parse argument in QChildEvent::polished(...) ");
}

/*!
 * method added
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QChildEvent, added)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'added' is not static");
        RETURN_NULL();
      }
      /// try 
      QChildEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QChildEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->added());
    }
  }
  php_error(E_ERROR, "could not parse argument in QChildEvent::added(...) ");
}

/*!
 * method child
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject *
 * @flags	c
 */

ZEND_METHOD(QChildEvent, child)
{
  ///
#ifdef PHP_QT_QObject           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'child' is not static");
        RETURN_NULL();
      }
      /// try 
      QChildEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QChildEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QObject * >(selfpointer->child());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QChildEvent::child(...) ");
}

/*!
 * method removed
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QChildEvent, removed)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'removed' is not static");
        RETURN_NULL();
      }
      /// try 
      QChildEvent *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QChildEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->removed());
    }
  }
  php_error(E_ERROR, "could not parse argument in QChildEvent::removed(...) ");
}

/*!
 * method QChildEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Type types0s0
 * @param	QObject *childs1s1
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QChildEvent, __construct)
{
// notice: unknown argument Type types0s0, skipped
  php_error(E_ERROR, "could not parse argument in QChildEvent::QChildEvent(...) ");
}
