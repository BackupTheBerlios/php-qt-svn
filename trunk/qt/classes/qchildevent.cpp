/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QChildEvent.cpp - QChildEvent PHP implementation.
 * begin           : Tue Apr 11 10:33:13 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QChildEvent>

/*!
 *    @class     QChildEvent
 *    @function  polished
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QChildEvent, polished)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();

      RETURN_BOOL(obj->polished());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QChildEvent
 *    @function  removed
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QChildEvent, removed)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();

      RETURN_BOOL(obj->removed());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QChildEvent
 *    @function  added
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QChildEvent, added)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();

      RETURN_BOOL(obj->added());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QChildEvent
 *    @function  child
 *
 *    @flags    c
 *    @access    public
 *    @return    QObject *
 *    @param    
 */
ZEND_METHOD(QChildEvent, child)
{
  if (ZEND_NUM_ARGS() == 0) {
    QObject **return_object;

    if (getThis() != NULL) {
      QChildEvent *obj = (QChildEvent *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QObject *
      *return_object = static_cast < QObject * >(obj->child());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QChildEvent_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}


PHP_QT_DESTRUCT(QChildEvent);
