/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QAbstractButton.cpp - QAbstractButton PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QAbstractButton>
#include "../php_qt.h"


/*********************************
 *    class     QAbstractButton */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QAbstractButton, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setAutoRepeat
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setAutoRepeat){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


			obj->setAutoRepeat((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  isDown
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, isDown){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isDown());
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QAbstractButton, qt_invoke){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setAutoExclusive
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setAutoExclusive){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


			obj->setAutoExclusive((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setIconSize
 *    flags:    l
 */
ZEND_METHOD(QAbstractButton, setIconSize){
		/* o public_slots*/

		/* const QSize& size,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QSize")) {
				obj->setIconSize((const QSize&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QAbstractButton, qt_cast){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QAbstractButton, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setIcon
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setIcon){
		/* o public*/

		/* const QIcon& icon,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QIcon")) {
				obj->setIcon((const QIcon&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QAbstractButton, qt_emit){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  autoExclusive
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, autoExclusive){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			RETURN_BOOL(obj->autoExclusive());
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QAbstractButton, className){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  toggle
 *    flags:    l
 */
ZEND_METHOD(QAbstractButton, toggle){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			obj->toggle();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setCheckable
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setCheckable){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


			obj->setCheckable((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setDown
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setDown){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


			obj->setDown((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  shortcut
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, shortcut){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
				QKeySequence return_object = (QKeySequence) obj->shortcut();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  icon
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, icon){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			obj->icon();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setChecked
 *    flags:    l
 */
ZEND_METHOD(QAbstractButton, setChecked){
		/* l public_slots*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


			obj->setChecked((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setShortcut
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setShortcut){
		/* o public*/

		/* const QKeySequence& key,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QKeySequence")) {
				obj->setShortcut((const QKeySequence&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  animateClick
 *    flags:    l
 */
ZEND_METHOD(QAbstractButton, animateClick){
		/* l public_slots*/

		/* int msec,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


			obj->animateClick((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QAbstractButton, staticMetaObject){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  autoRepeat
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, autoRepeat){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			RETURN_BOOL(obj->autoRepeat());
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, qObject){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  group
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, group){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
				QButtonGroup * return_object = (QButtonGroup *) obj->group();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  setText
 *    flags:    
 */
ZEND_METHOD(QAbstractButton, setText){
		/* o public*/

		/* const QString& text,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->setText((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  text
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, text){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
				QString return_object = (QString) obj->text();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  isChecked
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, isChecked){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isChecked());
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  iconSize
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, iconSize){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->iconSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  isCheckable
 *    flags:    c
 */
ZEND_METHOD(QAbstractButton, isCheckable){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isCheckable());
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  click
 *    flags:    l
 */
ZEND_METHOD(QAbstractButton, click){
	if (ZEND_NUM_ARGS() == 0){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();
			obj->click();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QAbstractButton, qt_property){
}

/*********************************
 *    class     QAbstractButton */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QAbstractButton, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QAbstractButton *obj = (QAbstractButton*) PHP_QT_FETCH();


				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QAbstractButton_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}


PHP_QT_DESTRUCT(QAbstractButton);

