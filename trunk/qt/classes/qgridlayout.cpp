/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QGridLayout.cpp - QGridLayout PHP implementation.
 * begin           : Tue Apr 11 10:33:13 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QGridLayout>
#include <QWidget>

/*!
 *    @class     QGridLayout
 *    @function  tr
 *
 *    @flags    s
 *    @access    public
 *    @return    QString
 *    @param     const char *, const char * = 0 
 */
ZEND_METHOD(QGridLayout, tr)
{
/*! ss public*/
/*! const char* , const char* ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        QString *return_object;

        if (getThis() != NULL) {
/// return value is object: QString
          *return_object = static_cast < QString > (obj->tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
/// check whether method call is static.
        } else {
          return_object = (QString *) malloc(sizeof (QGridLayout::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));   /// memory allocation
          *return_object = static_cast < QString > (QGridLayout::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
        } zend_class_entry *ce;

        object_init_ex(return_value, QGridLayout_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  addLayout
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QLayout *, int row, int column, Qt::Alignment = 0
 */
ZEND_METHOD(QGridLayout, addLayout)
{
///qt_QLayout*
/*! olll public*/
/*! qt_QLayout* , int row, int column, int ,  */
  if (ZEND_NUM_ARGS() == 4) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QLayout")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->addLayout((QLayout *) obj_z_0, (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  QGridLayout
 *
 *    @flags    t
 *    @access    public
 *    @return    
 *    @param    QWidget *parent
 */
ZEND_METHOD(QGridLayout, __construct)
{
///QWidget*
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *QGridLayout_ptr = new QGridLayout();
				PHP_QT_REGISTER(QGridLayout_ptr);
				RETURN_NULL();
	}
/*! o public*/
/*! QWidget* parent,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget *) obj_z_0);

          PHP_QT_REGISTER(QGridLayout_ptr);
          RETURN_NULL();
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  addItem
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QLayoutItem *item, int row, int column, int rowSpan = 1, int columnSpan = 1, Qt::Alignment = 0
 */
ZEND_METHOD(QGridLayout, addItem)
{
///qt_QLayoutItem*
/*! olllll public*/
/*! qt_QLayoutItem* item, int row, int column, int rowSpan, int columnSpan, int ,  */
  if (ZEND_NUM_ARGS() == 6) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL
    zval *z_4;                  /// define ZVAL
    zval *z_5;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG &&
          Z_TYPE_P(z_5) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QLayoutItem")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->addItem((QLayoutItem *) obj_z_0, (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3), (int)Z_LVAL_P(z_4),
                         (Qt::Alignment) Z_LVAL_P(z_5));
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  rowMinimumHeight
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    int row
 */
ZEND_METHOD(QGridLayout, rowMinimumHeight)
{
/*! l public*/
/*! int row,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        int *return_object;

        if (getThis() != NULL) {
          RETURN_LONG(obj->rowMinimumHeight((int)Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  setOriginCorner
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::Corner
 */
ZEND_METHOD(QGridLayout, setOriginCorner)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setOriginCorner((Qt::Corner) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  count
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QGridLayout, count)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      RETURN_LONG(obj->count());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QGridLayout
 *    @function  originCorner
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::Corner
 *    @param    
 */
ZEND_METHOD(QGridLayout, originCorner)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::Corner * return_object;
    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      RETURN_LONG(obj->originCorner());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QGridLayout
 *    @function  invalidate
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QGridLayout, invalidate)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      obj->invalidate();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QGridLayout
 *    @function  setGeometry
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QRect&
 */
ZEND_METHOD(QGridLayout, setGeometry)
{
///const QRect&
/*! o public*/
/*! const QRect& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QRect")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setGeometry((const QRect &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  setRowStretch
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int row, int stretch
 */
ZEND_METHOD(QGridLayout, setRowStretch)
{
/*! ll public*/
/*! int row, int stretch,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setRowStretch((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  getItemPosition
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int idx, int *row, int *column, int *rowSpan, int *columnSpan
 */
ZEND_METHOD(QGridLayout, getItemPosition)
{
/*! lllll public*/
/*! int idx, int* row, int* column, int* rowSpan, int* columnSpan,  */
  if (ZEND_NUM_ARGS() == 5) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL
    zval *z_4;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->getItemPosition((int)Z_LVAL_P(z_0), (int *)Z_LVAL_P(z_1), (int *)Z_LVAL_P(z_2), (int *)Z_LVAL_P(z_3), (int *)Z_LVAL_P(z_4));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  setDefaultPositioning
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int n, Qt::Orientation orient
 */
ZEND_METHOD(QGridLayout, setDefaultPositioning)
{
/*! ll public*/
/*! int n, int orient,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setDefaultPositioning((int)Z_LVAL_P(z_0), (Qt::Orientation) Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  columnStretch
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    int column
 */
ZEND_METHOD(QGridLayout, columnStretch)
{
/*! l public*/
/*! int column,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        int *return_object;

        if (getThis() != NULL) {
          RETURN_LONG(obj->columnStretch((int)Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  addWidget
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QWidget *w
 */
ZEND_METHOD(QGridLayout, addWidget)
{
///QWidget*
	if (ZEND_NUM_ARGS() == 5){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
        zval *z_3; // define ZVAL
        zval *z_4; // define ZVAL
        
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {

//			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG){

			    QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			    QWidget* obj_z_0 = static_cast<QWidget*>(php_qt_fetch(z_0));

			    if(obj_z_0->inherits("QWidget")) {
				    obj->addWidget(obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (Qt::Alignment) Z_LVAL_P(z_4));
			        RETURN_NULL();
			    } else { php_error(E_ERROR,"argument is no QWidget"); }
//			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
///QWidget*
	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
//			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			    QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			    QWidget* obj_z_0 = static_cast<QWidget*>(php_qt_fetch(z_0));

			    if(obj_z_0->inherits("QWidget")) {
				    obj->addWidget(obj_z_0, (int) Z_LVAL_P(z_1), (Qt::Alignment) Z_LVAL_P(z_2));
			        RETURN_NULL();
			    } else { php_error(E_ERROR,"argument is no QWidget"); }
//			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
/*! o public*/
/*! QWidget* w,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->addWidget((QWidget *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  takeAt
 *
 *    @flags    
 *    @access    public
 *    @return    QLayoutItem *
 *    @param    int
 */
ZEND_METHOD(QGridLayout, takeAt)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        QLayoutItem **return_object;

        if (getThis() != NULL) {
/// return: pointer

/// return value is object: QLayoutItem *
          *return_object = static_cast < QLayoutItem * >(obj->takeAt((int)Z_LVAL_P(z_0)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QGridLayout_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object[0];
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  staticMetaObject
 *
 *    @flags    s
 *    @access    public
 *    @return    QMetaObject*
 *    @param    
 */
ZEND_METHOD(QGridLayout, staticMetaObject)
{
}

/*!
 *    @class     QGridLayout
 *    @function  itemAt
 *
 *    @flags    c
 *    @access    public
 *    @return    QLayoutItem *
 *    @param    int
 */
ZEND_METHOD(QGridLayout, itemAt)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        QLayoutItem **return_object;

        if (getThis() != NULL) {
/// return: pointer

/// return value is object: QLayoutItem *
          *return_object = static_cast < QLayoutItem * >(obj->itemAt((int)Z_LVAL_P(z_0)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QGridLayout_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object[0];
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  qObject
 *
 *    @flags    
 *    @access    public
 *    @return    QObject*
 *    @param    
 */
ZEND_METHOD(QGridLayout, qObject)
{
}

/*!
 *    @class     QGridLayout
 *    @function  minimumSize
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QGridLayout, minimumSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->minimumSize());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QGridLayout_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QGridLayout
 *    @function  sizeHint
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QGridLayout, sizeHint)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->sizeHint());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QGridLayout_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QGridLayout
 *    @function  setColumnMinimumWidth
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int column, int minSize
 */
ZEND_METHOD(QGridLayout, setColumnMinimumWidth)
{
/*! ll public*/
/*! int column, int minSize,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setColumnMinimumWidth((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  heightForWidth
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    int
 */
ZEND_METHOD(QGridLayout, heightForWidth)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        int *return_object;

        if (getThis() != NULL) {
          RETURN_LONG(obj->heightForWidth((int)Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  hasHeightForWidth
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QGridLayout, hasHeightForWidth)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      RETURN_BOOL(obj->hasHeightForWidth());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QGridLayout
 *    @function  setColumnStretch
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int column, int stretch
 */
ZEND_METHOD(QGridLayout, setColumnStretch)
{
/*! ll public*/
/*! int column, int stretch,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setColumnStretch((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  rowCount
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QGridLayout, rowCount)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      RETURN_LONG(obj->rowCount());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QGridLayout
 *    @function  columnMinimumWidth
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    int column
 */
ZEND_METHOD(QGridLayout, columnMinimumWidth)
{
/*! l public*/
/*! int column,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        int *return_object;

        if (getThis() != NULL) {
          RETURN_LONG(obj->columnMinimumWidth((int)Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  cellRect
 *
 *    @flags    c
 *    @access    public
 *    @return    QRect
 *    @param    int row, int column
 */
ZEND_METHOD(QGridLayout, cellRect)
{
/*! ll public*/
/*! int row, int column,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        QRect *return_object;

        if (getThis() != NULL) {
/// return value is object: QRect
          *return_object = static_cast < QRect > (obj->cellRect((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QGridLayout_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  columnCount
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QGridLayout, columnCount)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      RETURN_LONG(obj->columnCount());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QGridLayout
 *    @function  setRowMinimumHeight
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int row, int minSize
 */
ZEND_METHOD(QGridLayout, setRowMinimumHeight)
{
/*! ll public*/
/*! int row, int minSize,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setRowMinimumHeight((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  trUtf8
 *
 *    @flags    s
 *    @access    public
 *    @return    QString
 *    @param     const char *, const char * = 0 
 */
ZEND_METHOD(QGridLayout, trUtf8)
{
/*! ss public*/
/*! const char* , const char* ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        QString *return_object;

        if (getThis() != NULL) {
/// return value is object: QString
          *return_object = static_cast < QString > (obj->trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
/// check whether method call is static.
        } else {
          return_object = (QString *) malloc(sizeof (QGridLayout::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));       /// memory allocation
          *return_object = static_cast < QString > (QGridLayout::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
        } zend_class_entry *ce;

        object_init_ex(return_value, QGridLayout_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  maximumSize
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QGridLayout, maximumSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->maximumSize());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QGridLayout_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QGridLayout
 *    @function  minimumHeightForWidth
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    int
 */
ZEND_METHOD(QGridLayout, minimumHeightForWidth)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        int *return_object;

        if (getThis() != NULL) {
          RETURN_LONG(obj->minimumHeightForWidth((int)Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QGridLayout
 *    @function  expandingDirections
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::Orientations
 *    @param    
 */
ZEND_METHOD(QGridLayout, expandingDirections)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::Orientations * return_object;
    if (getThis() != NULL) {
      QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

      obj->expandingDirections();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QGridLayout
 *    @function  rowStretch
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    int row
 */
ZEND_METHOD(QGridLayout, rowStretch)
{
/*! l public*/
/*! int row,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QGridLayout *obj = (QGridLayout *) PHP_QT_FETCH();

        int *return_object;

        if (getThis() != NULL) {
          RETURN_LONG(obj->rowStretch((int)Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}


PHP_QT_DESTRUCT(QGridLayout);
