/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QGridLayout.cpp - QGridLayout PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QGridLayout>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QGridLayout_php_qt:public QGridLayout
{

public:
  QGridLayout_php_qt(zval * zend_ptr, QWidget * parents0);
  QGridLayout_php_qt(zval * zend_ptr);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QGridLayout_php_qt::QGridLayout_php_qt(zval * zend_ptr, QWidget * parents0):QGridLayout(parents0)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QGridLayout",&staticMetaObject));
}

QGridLayout_php_qt::QGridLayout_php_qt(zval * zend_ptr):QGridLayout()
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QGridLayout",&staticMetaObject));
}

PHP_QT_MOC(QGridLayout);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QGridLayout, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QGridLayout::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QGridLayout::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method addItem
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QLayoutItem *items0
 * @param	 int rows1
 * @param	 int columns2
 * @param	 int rowSpan = 1s3
 * @param	 int columnSpan = 1s4
 * @param	 Qt::Alignment = 0s5
 * 
 * overloaded args:
 * @param	QLayoutItem *
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, addItem)
{
  ///QLayoutItem *items0, int rows1, int columns2, int rowSpan = 1s3, int columnSpan = 1s4, Qt::Alignment = 0s5
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QLayoutItem
      if (inherits(Z_OBJCE_P(arg_0), 42)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addItem' is not static");
          RETURN_NULL();
        }
        /// try QLayoutItem *items0, int rows1, int columns2,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayoutItem *
          cpp_arg_0 = static_cast < QLayoutItem * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addItem((QLayoutItem *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
#ifdef PHP_QT_QLayoutItem
      if (inherits(Z_OBJCE_P(arg_0), 42)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addItem' is not static");
          RETURN_NULL();
        }
        /// try QLayoutItem *items0, int rows1, int columns2, int rowSpan = 1s3,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayoutItem *
          cpp_arg_0 = static_cast < QLayoutItem * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addItem((QLayoutItem *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QLayoutItem
      if (inherits(Z_OBJCE_P(arg_0), 42)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addItem' is not static");
          RETURN_NULL();
        }
        /// try QLayoutItem *items0, int rows1, int columns2, int rowSpan = 1s3, int columnSpan = 1s4,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayoutItem *
          cpp_arg_0 = static_cast < QLayoutItem * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addItem((QLayoutItem *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3), (int)Z_LVAL_P(arg_4)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 6) {
    PHP_QT_FETCH_6_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG && Z_TYPE_P(arg_5) == IS_LONG) {
#ifdef PHP_QT_QLayoutItem
      if (inherits(Z_OBJCE_P(arg_0), 42)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addItem' is not static");
          RETURN_NULL();
        }
        /// try QLayoutItem *items0, int rows1, int columns2, int rowSpan = 1s3, int columnSpan = 1s4, Qt::Alignment = 0s5,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayoutItem *
          cpp_arg_0 = static_cast < QLayoutItem * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->
                    addItem((QLayoutItem *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3), (int)Z_LVAL_P(arg_4),
                            (Qt::Alignment) Z_LVAL_P(arg_5)));
      }
#endif

    }
  }
  ///QLayoutItem *
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QLayoutItem
      if (inherits(Z_OBJCE_P(arg_0), 42)) {
/// overloaded method is protected, skipped.
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::addItem(...) ");
}

/*!
 * method rowMinimumHeight
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int rows0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, rowMinimumHeight)
{
  ///int rows0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'rowMinimumHeight' is not static");
        RETURN_NULL();
      }
      /// try int rows0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->rowMinimumHeight((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::rowMinimumHeight(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method count
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, count)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'count' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->count());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::count(...) ");
}

/*!
 * method originCorner
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Corner
 * @flags	c
 */

ZEND_METHOD(QGridLayout, originCorner)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'originCorner' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->originCorner());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::originCorner(...) ");
}

/*!
 * method setRowStretch
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int rows0
 * @param	 int stretchs1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setRowStretch)
{
  ///int rows0, int stretchs1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setRowStretch' is not static");
        RETURN_NULL();
      }
      /// try int rows0, int stretchs1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setRowStretch((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setRowStretch(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QGridLayout, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QGridLayout::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::staticMetaObject(...) ");
}

/*!
 * method itemAt
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	QLayoutItem *
 * @flags	c
 */

ZEND_METHOD(QGridLayout, itemAt)
{
// notice: abstract class QLayoutItem cannot be instanciated, skipped
  php_error(E_ERROR, "could not parse argument in QGridLayout::itemAt(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method setColumnMinimumWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int columns0
 * @param	 int minSizes1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setColumnMinimumWidth)
{
  ///int columns0, int minSizes1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setColumnMinimumWidth' is not static");
        RETURN_NULL();
      }
      /// try int columns0, int minSizes1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setColumnMinimumWidth((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setColumnMinimumWidth(...) ");
}

/*!
 * method heightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, heightForWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'heightForWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->heightForWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::heightForWidth(...) ");
}

/*!
 * method hasHeightForWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QGridLayout, hasHeightForWidth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'hasHeightForWidth' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->hasHeightForWidth());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::hasHeightForWidth(...) ");
}

/*!
 * method rowCount
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, rowCount)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'rowCount' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->rowCount());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::rowCount(...) ");
}

/*!
 * method cellRect
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int rows0
 * @param	 int columns1
 * 
 * @access	public
 * @return	QRect
 * @flags	c
 */

ZEND_METHOD(QGridLayout, cellRect)
{
  ///int rows0, int columns1
#ifdef PHP_QT_QRect             // return type

  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'cellRect' is not static");
        RETURN_NULL();
      }
      /// try int rows0, int columns1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QRect *
        return_object = new QRect;

      *return_object = static_cast < QRect > (selfpointer->cellRect((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::cellRect(...) ");
}

/*!
 * method columnMinimumWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int columns0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, columnMinimumWidth)
{
  ///int columns0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'columnMinimumWidth' is not static");
        RETURN_NULL();
      }
      /// try int columns0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->columnMinimumWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::columnMinimumWidth(...) ");
}

/*!
 * method minimumHeightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, minimumHeightForWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumHeightForWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->minimumHeightForWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::minimumHeightForWidth(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method expandingDirections
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientations
 * @flags	c
 */

ZEND_METHOD(QGridLayout, expandingDirections)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'expandingDirections' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->expandingDirections());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::expandingDirections(...) ");
}

/*!
 * method addLayout
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QLayout *s0
 * @param	 int rows1
 * @param	 int columns2
 * @param	 Qt::Alignment = 0s3
 * 
 * overloaded args:
 * @param	QLayout *
 * @param	 int row
 * @param	 int column
 * @param	 int rowSpan
 * @param	 int columnSpan
 * @param	 Qt::Alignment = 0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, addLayout)
{
  ///QLayout *s0, int rows1, int columns2, Qt::Alignment = 0s3
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addLayout' is not static");
          RETURN_NULL();
        }
        /// try QLayout *s0, int rows1, int columns2,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addLayout((QLayout *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addLayout' is not static");
          RETURN_NULL();
        }
        /// try QLayout *s0, int rows1, int columns2, Qt::Alignment = 0s3,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addLayout((QLayout *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (Qt::Alignment) Z_LVAL_P(arg_3)));
      }
#endif

    }
  }
  ///QLayout *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addLayout' is not static");
          RETURN_NULL();
        }
        /// try QLayout *, int row, int column, int rowSpan, int columnSpan,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addLayout((QLayout *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3), (int)Z_LVAL_P(arg_4)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 6) {
    PHP_QT_FETCH_6_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG && Z_TYPE_P(arg_5) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addLayout' is not static");
          RETURN_NULL();
        }
        /// try QLayout *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->
                    addLayout((QLayout *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3), (int)Z_LVAL_P(arg_4),
                              (Qt::Alignment) Z_LVAL_P(arg_5)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::addLayout(...) ");
}

/*!
 * method QGridLayout
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *parents0s0
 * @param: -
 * 
 * overloaded args:
 * @param	const QGridLayout &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QGridLayout, __construct)
{
  ///QWidget *parents0s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QWidget *parents0s0,
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
        QGridLayout_php_qt *
          selfpointer = new QGridLayout_php_qt(getThis(), (QWidget *) cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout_php_qt *
        selfpointer = new QGridLayout_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///const QGridLayout &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QGridLayout
      if (inherits(Z_OBJCE_P(arg_0), 26)) {
/// method is private, skip
        php_error(E_ERROR, "QGridLayout::__construct(...) cannot be called with 'const QGridLayout &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::QGridLayout(...) ");
}

/*!
 * method setOriginCorner
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::Corner Qt::Corners0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setOriginCorner)
{
  ///Qt::Corner Qt::Corners0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setOriginCorner' is not static");
        RETURN_NULL();
      }
      /// try Qt::Corner Qt::Corners0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setOriginCorner((Qt::Corner) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setOriginCorner(...) ");
}

/*!
 * method invalidate
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, invalidate)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'invalidate' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->invalidate());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::invalidate(...) ");
}

/*!
 * method setGeometry
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect &s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setGeometry)
{
  ///const QRect &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setGeometry' is not static");
          RETURN_NULL();
        }
        /// try const QRect &s0,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QRect *
          cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setGeometry((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setGeometry(...) ");
}

/*!
 * method getItemPosition
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int idxs0
 * @param	 int *rows1
 * @param	 int *columns2
 * @param	 int *rowSpans3
 * @param	 int *columnSpans4
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, getItemPosition)
{
  ///int idxs0, int *rows1, int *columns2, int *rowSpans3, int *columnSpans4
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG && Z_TYPE_P(arg_4) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'getItemPosition' is not static");
        RETURN_NULL();
      }
      /// try int idxs0, int *rows1, int *columns2, int *rowSpans3, int *columnSpans4,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->
                  getItemPosition((int)Z_LVAL_P(arg_0), (int *)&Z_LVAL_P(arg_1), (int *)&Z_LVAL_P(arg_2), (int *)&Z_LVAL_P(arg_3), (int *)&Z_LVAL_P(arg_4)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::getItemPosition(...) ");
}

/*!
 * method setDefaultPositioning
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ns0
 * @param	 Qt::Orientation orients1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setDefaultPositioning)
{
  ///int ns0, Qt::Orientation orients1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setDefaultPositioning' is not static");
        RETURN_NULL();
      }
      /// try int ns0, Qt::Orientation orients1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setDefaultPositioning((int)Z_LVAL_P(arg_0), (Qt::Orientation) Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setDefaultPositioning(...) ");
}

/*!
 * method columnStretch
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int columns0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, columnStretch)
{
  ///int columns0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'columnStretch' is not static");
        RETURN_NULL();
      }
      /// try int columns0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->columnStretch((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::columnStretch(...) ");
}

/*!
 * method takeAt
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	QLayoutItem *
 * @flags	
 */

ZEND_METHOD(QGridLayout, takeAt)
{
// notice: abstract class QLayoutItem cannot be instanciated, skipped
  php_error(E_ERROR, "could not parse argument in QGridLayout::takeAt(...) ");
}

/*!
 * method addWidget
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *ws0
 * 
 * overloaded args:
 * @param	QWidget *
 * @param	 int row
 * @param	 int column
 * @param	 Qt::Alignment = 0
 * 
 * overloaded args:
 * @param	QWidget *
 * @param	 int row
 * @param	 int column
 * @param	 int rowSpan
 * @param	 int columnSpan
 * @param	 Qt::Alignment = 0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, addWidget)
{
  ///QWidget *ws0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *ws0,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0));
      }
#endif

    }
  }
  ///QWidget *, int row, int column, Qt::Alignment = 0
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *, int row, int column,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *, int row, int column, Qt::Alignment = 0,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (Qt::Alignment) Z_LVAL_P(arg_3)));
      }
#endif

    }
  }
  ///QWidget *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *, int row, int column, int rowSpan, int columnSpan,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3), (int)Z_LVAL_P(arg_4)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 6) {
    PHP_QT_FETCH_6_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG && Z_TYPE_P(arg_5) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0,
        QGridLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->
                    addWidget((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (int)Z_LVAL_P(arg_2), (int)Z_LVAL_P(arg_3), (int)Z_LVAL_P(arg_4),
                              (Qt::Alignment) Z_LVAL_P(arg_5)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::addWidget(...) ");
}

/*!
 * method minimumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QGridLayout, minimumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::minimumSize(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QGridLayout, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::sizeHint(...) ");
}

/*!
 * method setColumnStretch
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int columns0
 * @param	 int stretchs1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setColumnStretch)
{
  ///int columns0, int stretchs1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setColumnStretch' is not static");
        RETURN_NULL();
      }
      /// try int columns0, int stretchs1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setColumnStretch((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setColumnStretch(...) ");
}

/*!
 * method columnCount
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, columnCount)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'columnCount' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->columnCount());
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::columnCount(...) ");
}

/*!
 * method setRowMinimumHeight
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int rows0
 * @param	 int minSizes1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QGridLayout, setRowMinimumHeight)
{
  ///int rows0, int minSizes1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setRowMinimumHeight' is not static");
        RETURN_NULL();
      }
      /// try int rows0, int minSizes1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setRowMinimumHeight((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::setRowMinimumHeight(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QGridLayout, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QGridLayout::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QGridLayout::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::trUtf8(...) ");
}

/*!
 * method maximumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QGridLayout, maximumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'maximumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->maximumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QGridLayout::maximumSize(...) ");
}

/*!
 * method rowStretch
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int rows0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QGridLayout, rowStretch)
{
  ///int rows0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'rowStretch' is not static");
        RETURN_NULL();
      }
      /// try int rows0,
      QGridLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QGridLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->rowStretch((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QGridLayout::rowStretch(...) ");
}
