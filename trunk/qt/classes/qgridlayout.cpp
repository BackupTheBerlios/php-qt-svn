/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QGridLayout.cpp - QGridLayout PHP implementation.
 * begin           : Thu Jan 19 02:44:10 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QGridLayout>
#include "../php_qt.h"


/*********************************
 *    class     QGridLayout */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QGridLayout, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  addLayout
 *    flags:    
 */
ZEND_METHOD(QGridLayout, addLayout){
		/* olll public*/

		/* qt_QLayout* , int row, int column, int ,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QLayout") {
				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
			}
		}
	}
		/* olllll public*/

		/* qt_QLayout* , int row, int column, int rowSpan, int columnSpan, int ,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QLayout") {
				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  QGridLayout
 *    flags:    t
 */
ZEND_METHOD(QGridLayout, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *QGridLayout_ptr = new QGridLayout();
				PHP_QT_REGISTER(QGridLayout_ptr);
				RETURN_NULL();
	}
		/* o public*/

		/* qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
				QGridLayout *QGridLayout_ptr = new QGridLayout((QWidget*) obj_z_0);
				PHP_QT_REGISTER(QGridLayout_ptr);
				RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_invoke){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  addItem
 *    flags:    
 */
ZEND_METHOD(QGridLayout, addItem){
		/* o protected*/
		/* olllll public*/

		/* qt_QLayoutItem* item, int row, int column, int rowSpan, int columnSpan, int ,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QLayoutItem") {
				obj->addItem((QLayoutItem*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  rowMinimumHeight
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, rowMinimumHeight){
		/* l public*/

		/* int row,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->rowMinimumHeight((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setOriginCorner
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setOriginCorner){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->setOriginCorner((Qt::Corner) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_cast){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QGridLayout, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  count
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, count){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  originCorner
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, originCorner){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->originCorner());
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  invalidate
 *    flags:    
 */
ZEND_METHOD(QGridLayout, invalidate){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			obj->invalidate();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setGeometry
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setGeometry){
		/* o public*/

		/* const QRect& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->setGeometry((const QRect&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_emit){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setRowStretch
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setRowStretch){
		/* ll public*/

		/* int row, int stretch,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->setRowStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  getItemPosition
 *    flags:    
 */
ZEND_METHOD(QGridLayout, getItemPosition){
		/* lllll public*/

		/* int idx, int* row, int* column, int* rowSpan, int* columnSpan,  */

	if (ZEND_NUM_ARGS() == 5){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->getItemPosition((int) Z_LVAL_P(z_0) ,(int*) Z_LVAL_P(z_1) ,(int*) Z_LVAL_P(z_2) ,(int*) Z_LVAL_P(z_3) ,(int*) Z_LVAL_P(z_4));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setDefaultPositioning
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setDefaultPositioning){
		/* ll public*/

		/* int n, int orient,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->setDefaultPositioning((int) Z_LVAL_P(z_0) ,(Qt::Orientation) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QGridLayout, className){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  columnStretch
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, columnStretch){
		/* l public*/

		/* int column,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->columnStretch((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  addWidget
 *    flags:    
 */
ZEND_METHOD(QGridLayout, addWidget){
		/* o public*/

		/* qt_QWidget* w,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
				obj->addWidget((QWidget*) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* olll public*/

		/* qt_QWidget* , int row, int column, int ,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
			}
		}
	}
		/* olllll public*/

		/* qt_QWidget* , int row, int column, int rowSpan, int columnSpan, int ,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(1 == 1) {
				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (Qt::Alignment) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  takeAt
 *    flags:    
 */
ZEND_METHOD(QGridLayout, takeAt){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


				QLayoutItem * return_object = (QLayoutItem *) obj->takeAt((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QGridLayout, staticMetaObject){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  itemAt
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, itemAt){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


				QLayoutItem * return_object = (QLayoutItem *) obj->itemAt((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QGridLayout, qObject){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  minimumSize
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->minimumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->sizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setColumnMinimumWidth
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setColumnMinimumWidth){
		/* ll public*/

		/* int column, int minSize,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->setColumnMinimumWidth((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  heightForWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, heightForWidth){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  hasHeightForWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, hasHeightForWidth){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasHeightForWidth());
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setColumnStretch
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setColumnStretch){
		/* ll public*/

		/* int column, int stretch,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->setColumnStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  rowCount
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, rowCount){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->rowCount());
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  columnMinimumWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, columnMinimumWidth){
		/* l public*/

		/* int column,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->columnMinimumWidth((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  cellRect
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, cellRect){
		/* ll public*/

		/* int row, int column,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


				QRect return_object = (QRect) obj->cellRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  columnCount
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, columnCount){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->columnCount());
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  setRowMinimumHeight
 *    flags:    
 */
ZEND_METHOD(QGridLayout, setRowMinimumHeight){
		/* ll public*/

		/* int row, int minSize,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			obj->setRowMinimumHeight((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QGridLayout, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  maximumSize
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->maximumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QGridLayout, qt_property){
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  minimumHeightForWidth
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, minimumHeightForWidth){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->minimumHeightForWidth((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  expandingDirections
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();
				Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QGridLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QGridLayout */
/*
 *    function  rowStretch
 *    flags:    c
 */
ZEND_METHOD(QGridLayout, rowStretch){
		/* l public*/

		/* int row,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QGridLayout *obj = (QGridLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->rowStretch((int) Z_LVAL_P(z_0)));
			}
		}
	}
}


PHP_QT_DESTRUCT(QGridLayout);

