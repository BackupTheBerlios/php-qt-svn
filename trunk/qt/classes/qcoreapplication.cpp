/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QCoreApplication.cpp - QCoreApplication PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QCoreApplication>
#include <QStringList>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QCoreApplication_php_qt:public QCoreApplication
{

public:
  QCoreApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};
QCoreApplication_php_qt::QCoreApplication_php_qt(zval * zend_ptr, int &argcs0, char **argvs1):
QCoreApplication(argcs0, argvs1)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QCoreApplication",&staticMetaObject));
}

PHP_QT_MOC(QCoreApplication);

/*!
 * method removeTranslator
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QTranslator *s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, removeTranslator)
{
  ///QTranslator *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QTranslator
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try QTranslator *s0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QTranslator *cpp_arg_0 = static_cast < QTranslator * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::removeTranslator((QTranslator *) cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->removeTranslator((QTranslator *) cpp_arg_0));
        }
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::removeTranslator(...) ");
}

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method postEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *receivers0
 * @param	 QEvent *events1
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, postEvent)
{
  ///QObject *receivers0, QEvent *events1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QEvent
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_1), 21)) {
        /// try QObject *receivers0, QEvent *events1,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QObject *cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
        QEvent *cpp_arg_1 = static_cast < QEvent * >(php_qt_fetch(arg_1));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::postEvent((QObject *) cpp_arg_0, (QEvent *) cpp_arg_1));
        } else {
          RETURN_VOID(selfpointer->postEvent((QObject *) cpp_arg_0, (QEvent *) cpp_arg_1));
        }
      }
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::postEvent(...) ");
}

/*!
 * method init
 * 
 * @param: -
 * @param: -
 * 
 * @access	private
 * @return	void
 * @flags	
 */

ZEND_METHOD(QCoreApplication, init)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
/// method is private, skip
      php_error(E_ERROR, "QCoreApplication::init(...) cannot be called with ''.");
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::init(...) ");
}

/*!
 * method addLibraryPath
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, addLibraryPath)
{
  ///const QString &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        /// try const QString &s0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::addLibraryPath((const QString &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->addLibraryPath((const QString &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::addLibraryPath(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method libraryPaths
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QStringList
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, libraryPaths)
{
  ///
#ifdef PHP_QT_QStringList       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QStringList *return_object = new QStringList;

      if (getThis() == NULL) {
        *return_object = static_cast < QStringList > (QCoreApplication::libraryPaths());
      } else {
        *return_object = static_cast < QStringList > (selfpointer->libraryPaths());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::libraryPaths(...) ");
}

/*!
 * method aboutToQuit
 * 
 * @param: -
 * @param: -
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method bool
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 *EventFilter)(void *messages0
 * @param	 long *results1
 * 
 * @access	public
 * @return	typedef
 * @flags	
 */

ZEND_METHOD(QCoreApplication, bool)
{
// notice: unknown argument  long *results1, skipped
  php_error(E_ERROR, "could not parse argument in QCoreApplication::bool(...) ");
}

/*!
 * method removeLibraryPath
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, removeLibraryPath)
{
  ///const QString &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        /// try const QString &s0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::removeLibraryPath((const QString &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->removeLibraryPath((const QString &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::removeLibraryPath(...) ");
}

/*!
 * method organizationName
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, organizationName)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::organizationName());
      } else {
        *return_object = static_cast < QString > (selfpointer->organizationName());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::organizationName(...) ");
}

/*!
 * method instance
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QCoreApplication *
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, instance)
{
  ///
#ifdef PHP_QT_QCoreApplication  // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QCoreApplication * >(QCoreApplication::instance());
      } else {
        le.ptr = static_cast < QCoreApplication * >(selfpointer->instance());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::instance(...) ");
}

/*!
 * method organizationDomain
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, organizationDomain)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::organizationDomain());
      } else {
        *return_object = static_cast < QString > (selfpointer->organizationDomain());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::organizationDomain(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method hasPendingEvents
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, hasPendingEvents)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QCoreApplication::hasPendingEvents());
      } else {
        RETURN_BOOL(selfpointer->hasPendingEvents());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::hasPendingEvents(...) ");
}

/*!
 * method sendPostedEvents
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *receivers0
 * @param	 int event_types1
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, sendPostedEvents)
{
  ///QObject *receivers0, int event_types1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        /// try QObject *receivers0, int event_types1,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QObject *cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::sendPostedEvents((QObject *) cpp_arg_0, (int)Z_LVAL_P(arg_1)));
        } else {
          RETURN_VOID(selfpointer->sendPostedEvents((QObject *) cpp_arg_0, (int)Z_LVAL_P(arg_1)));
      }}
#endif

    }
  }
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::sendPostedEvents());
      } else {
        RETURN_VOID(selfpointer->sendPostedEvents());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::sendPostedEvents(...) ");
}

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method flush
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, flush)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::flush());
      } else {
        RETURN_VOID(selfpointer->flush());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::flush(...) ");
}

/*!
 * method translate
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char * contexts0
 * @param	 const char * keys1
 * @param	 const char * comment = 0s2
 * @param	 Encoding encoding = DefaultCodecs3
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, translate)
{
  ///const char * contexts0, const char * keys1, const char * comment = 0s2, Encoding encoding = DefaultCodecs3
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try const char * contexts0, const char * keys1,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::translate((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->translate((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING && Z_TYPE_P(arg_2) == IS_STRING) {
      /// try const char * contexts0, const char * keys1, const char * comment = 0s2,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object =
          static_cast < QString >
          (QCoreApplication::translate((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0], (const char *)&Z_STRVAL_P(arg_2)[0]));
      } else {
        *return_object =
          static_cast < QString >
          (selfpointer->translate((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0], (const char *)&Z_STRVAL_P(arg_2)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
// notice: unknown argument  Encoding encoding = DefaultCodecs3, skipped
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::translate(...) ");
}

/*!
 * method setEventFilter
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	EventFilter filters0
 * 
 * @access	public
 * @return	EventFilter
 * @flags	
 */

ZEND_METHOD(QCoreApplication, setEventFilter)
{
// notice: unknown argument EventFilter filters0, skipped
  php_error(E_ERROR, "could not parse argument in QCoreApplication::setEventFilter(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QCoreApplication::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::staticMetaObject(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method sendEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *receivers0
 * @param	 QEvent *events1
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, sendEvent)
{
  ///QObject *receivers0, QEvent *events1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QEvent
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_1), 21)) {
        /// try QObject *receivers0, QEvent *events1,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QObject *cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));
        QEvent *cpp_arg_1 = static_cast < QEvent * >(php_qt_fetch(arg_1));

        if (getThis() == NULL) {
          RETURN_BOOL(QCoreApplication::sendEvent((QObject *) cpp_arg_0, (QEvent *) cpp_arg_1));
        } else {
          RETURN_BOOL(selfpointer->sendEvent((QObject *) cpp_arg_0, (QEvent *) cpp_arg_1));
        }
      }
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::sendEvent(...) ");
}

/*!
 * method argc
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, argc)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QCoreApplication::argc());
      } else {
        RETURN_LONG(selfpointer->argc());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::argc(...) ");
}

/*!
 * method QCoreApplication
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int &argcs0s0
 * @param	char   **argvs1s1
 * 
 * overloaded args:
 * @param	QCoreApplicationPrivate &p
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QCoreApplication, __construct)
{
  ///int &argcs0s0,char   **argvs1s1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_ARRAY) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try int &argcs0s0,char   **argvs1s1,
      QCoreApplication_php_qt *selfpointer = new QCoreApplication_php_qt(getThis(), (int &)Z_LVAL_P(arg_0), new char *[1]);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///QCoreApplicationPrivate &p
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QCoreApplicationPrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QCoreApplicationPrivate &p,
        QCoreApplicationPrivate *cpp_arg_0 = static_cast < QCoreApplicationPrivate * >(php_qt_fetch(arg_0));
        QCoreApplication_php_qt *selfpointer = new QCoreApplication_php_qt(getThis(), (QCoreApplicationPrivate &) * cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::QCoreApplication(...) ");
}

/*!
 * method watchUnixSignal
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int signals0
 * @param	 bool watchs1
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, watchUnixSignal)
{
  ///int signals0, bool watchs1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_BOOL) {
      /// try int signals0, bool watchs1,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::watchUnixSignal((int)Z_LVAL_P(arg_0), (bool) Z_LVAL_P(arg_1)));
      } else {
        RETURN_VOID(selfpointer->watchUnixSignal((int)Z_LVAL_P(arg_0), (bool) Z_LVAL_P(arg_1)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::watchUnixSignal(...) ");
}

/*!
 * method applicationFilePath
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, applicationFilePath)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::applicationFilePath());
      } else {
        *return_object = static_cast < QString > (selfpointer->applicationFilePath());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::applicationFilePath(...) ");
}

/*!
 * method removePostedEvents
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *receivers0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, removePostedEvents)
{
  ///QObject *receivers0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QObject
      if (inherits(Z_OBJCE_P(arg_0), 46)) {
        /// try QObject *receivers0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QObject *cpp_arg_0 = static_cast < QObject * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::removePostedEvents((QObject *) cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->removePostedEvents((QObject *) cpp_arg_0));
        }
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::removePostedEvents(...) ");
}

/*!
 * method unixSignal
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	signals
 * @return	void
 * @flags	n
 */

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method installTranslator
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QTranslator *s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, installTranslator)
{
  ///QTranslator *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QTranslator
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try QTranslator *s0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QTranslator *cpp_arg_0 = static_cast < QTranslator * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::installTranslator((QTranslator *) cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->installTranslator((QTranslator *) cpp_arg_0));
        }
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::installTranslator(...) ");
}

/*!
 * method startingUp
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, startingUp)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QCoreApplication::startingUp());
      } else {
        RETURN_BOOL(selfpointer->startingUp());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::startingUp(...) ");
}

/*!
 * method exit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int retcode=0s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, exit)
{
  ///int retcode=0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::exit());
      } else {
        RETURN_VOID(selfpointer->exit());
      }
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try int retcode=0s0,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::exit((int)Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->exit((int)Z_LVAL_P(arg_0)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::exit(...) ");
}

/*!
 * method setOrganizationDomain
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &orgDomains0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, setOrganizationDomain)
{
  ///const QString &orgDomains0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        /// try const QString &orgDomains0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::setOrganizationDomain((const QString &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setOrganizationDomain((const QString &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::setOrganizationDomain(...) ");
}

/*!
 * method argv
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	char **
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, argv)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_ARRAY(QCoreApplication::argv());
      } else {
        RETURN_ARRAY(selfpointer->argv());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::argv(...) ");
}

/*!
 * method exec
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, exec)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_LONG(QCoreApplication::exec());
      } else {
        RETURN_LONG(selfpointer->exec());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::exec(...) ");
}

/*!
 * method setLibraryPaths
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QStringList &s0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, setLibraryPaths)
{
  ///const QStringList &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QStringList
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        /// try const QStringList &s0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QStringList *cpp_arg_0 = static_cast < QStringList * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::setLibraryPaths((const QStringList &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setLibraryPaths((const QStringList &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::setLibraryPaths(...) ");
}

/*!
 * method setOrganizationName
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &orgNames0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, setOrganizationName)
{
  ///const QString &orgNames0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        /// try const QString &orgNames0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::setOrganizationName((const QString &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setOrganizationName((const QString &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::setOrganizationName(...) ");
}

/*!
 * method event
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	bool
 * @flags	
 */

/*!
 * method applicationName
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, applicationName)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::applicationName());
      } else {
        *return_object = static_cast < QString > (selfpointer->applicationName());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::applicationName(...) ");
}

/*!
 * method processEvents
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEventss0
 * 
 * overloaded args:
 * @param	QEventLoop::ProcessEventsFlags flags
 * @param	 int maxtime
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, processEvents)
{
  ///QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEventss0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::processEvents());
      } else {
        RETURN_VOID(selfpointer->processEvents());
      }
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      /// try QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEventss0,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::processEvents((QEventLoop::ProcessEventsFlags) Z_LVAL_P(arg_0)));
      } else {
        RETURN_VOID(selfpointer->processEvents((QEventLoop::ProcessEventsFlags) Z_LVAL_P(arg_0)));
      }
    }
  }
  ///QEventLoop::ProcessEventsFlags flags, int maxtime
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      /// try QEventLoop::ProcessEventsFlags flags, int maxtime,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::processEvents((QEventLoop::ProcessEventsFlags) Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
      } else {
        RETURN_VOID(selfpointer->processEvents((QEventLoop::ProcessEventsFlags) Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }}
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::processEvents(...) ");
}

/*!
 * method applicationDirPath
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, applicationDirPath)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::applicationDirPath());
      } else {
        *return_object = static_cast < QString > (selfpointer->applicationDirPath());
      }
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::applicationDirPath(...) ");
}

/*!
 * method sendSpontaneousEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *receivers0
 * @param	 QEvent *events1
 * 
 * @access	private
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, sendSpontaneousEvent)
{
  ///QObject *receivers0, QEvent *events1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QObject
#ifdef PHP_QT_QEvent
      if (inherits(Z_OBJCE_P(arg_0), 46) && inherits(Z_OBJCE_P(arg_1), 21)) {
/// method is private, skip
        php_error(E_ERROR, "QCoreApplication::sendSpontaneousEvent(...) cannot be called with 'QObject *receivers0, QEvent *events1,'.");
      }
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::sendSpontaneousEvent(...) ");
}

/*!
 * method notify
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QObject *s0
 * @param	 QEvent *s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method quit
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	sl
 */

ZEND_METHOD(QCoreApplication, quit)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_VOID(QCoreApplication::quit());
      } else {
        RETURN_VOID(selfpointer->quit());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::quit(...) ");
}

/*!
 * method filterEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	void *messages0
 * @param	 long *results1
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QCoreApplication, filterEvent)
{
// notice: unknown argument  long *results1, skipped
  php_error(E_ERROR, "could not parse argument in QCoreApplication::filterEvent(...) ");
}

/*!
 * method setApplicationName
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &applications0
 * 
 * @access	public
 * @return	void
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, setApplicationName)
{
  ///const QString &applications0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        /// try const QString &applications0,
        QCoreApplication *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        if (getThis() == NULL) {
          RETURN_VOID(QCoreApplication::setApplicationName((const QString &)*cpp_arg_0));
        } else {
          RETURN_VOID(selfpointer->setApplicationName((const QString &)*cpp_arg_0));
      }}
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::setApplicationName(...) ");
}

/*!
 * method compressEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * @param	 QObject *receivers1
 * @param	 QPostEventList *s2
 * 
 * @access	protected
 * @return	bool
 * @flags	v
 */

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QCoreApplication::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QCoreApplication::trUtf8(...) ");
}

/*!
 * method closingDown
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	s
 */

ZEND_METHOD(QCoreApplication, closingDown)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QCoreApplication *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QCoreApplication * >(PHP_QT_FETCH());
      }
      if (getThis() == NULL) {
        RETURN_BOOL(QCoreApplication::closingDown());
      } else {
        RETURN_BOOL(selfpointer->closingDown());
      }
    }
  }
  php_error(E_ERROR, "could not parse argument in QCoreApplication::closingDown(...) ");
}
