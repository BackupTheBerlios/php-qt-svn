/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWidget.cpp - QWidget PHP implementation.
 * begin           : Tue Apr 11 10:33:13 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QWidget>
#include <QIcon>
#include <QMetaMethod>

class QWidget_moc : public QWidget
{
    public:
        zval* zend_ptr;
        const QMetaObject* metaObject() const;
        int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
        
};

const QMetaObject *QWidget_moc::metaObject() const
{

    QMetaObject *superdata = (QMetaObject*) &staticMetaObject;

    static const moc* m = php_qt_getMocData(this->zend_ptr,"QWidget");

    QMetaObject ob = {
        {superdata,m->stringdata,m->signature,0}
    };

    QMetaObject *meta = new QMetaObject;
    *meta = ob;

    return meta;

}

int QWidget_moc::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{

    QMetaObject* d = (QMetaObject*) this->metaObject();
    char* method_name = new char[strlen((d->method(_id)).signature())];
    strcpy(method_name,(char*) (d->method(_id)).signature());

    int i;
    for(i = 0; i < strlen(method_name); i++){
        if(method_name[i] == 40){
            method_name[i] = 0;
            break;
        }
    }

    int j = 0;
    zval** args[1];
    QList<QByteArray> qargs = d->method(_id).parameterTypes();
    for(i = 0; i < qargs.count(); i++){

        if(!strncmp("int",(const char*) qargs[i],3)){
            zval *arg;
            MAKE_STD_ZVAL(arg);
            ZVAL_LONG(arg, *reinterpret_cast< int*>(_a[1]));
            args[j++] = &arg;
        }

    }

    php_qt_callmethod(this->zend_ptr, method_name, j, args);

    delete d;
    delete method_name;

    return _id;

}


/*!
 *    @class     QWidget
 *    @function  nextInFocusChain
 *
 *    @flags     c
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, nextInFocusChain)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->nextInFocusChain());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  tr
 *
 *    @flags    s
 *    @access    public
 *    @return    QString
 *    @param     const char *, const char * = 0 
 */
ZEND_METHOD(QWidget, tr)
{
/*! ss public*/
/*! const char* , const char* ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QString *return_object;

        if (getThis() != NULL) {
/// return value is object: QString
          *return_object = static_cast < QString > (obj->tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
/// check whether method call is static.
        } else {
          return_object = (QString *) malloc(sizeof (QWidget::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));       /// memory allocation
          *return_object = static_cast < QString > (QWidget::tr((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
        } zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  focusPolicy
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::FocusPolicy
 *    @param    
 */
ZEND_METHOD(QWidget, focusPolicy)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::FocusPolicy * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->focusPolicy());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  windowOpacity
 *
 *    @flags    c
 *    @access    public
 *    @return    qreal
 *    @param    
 */
ZEND_METHOD(QWidget, windowOpacity)
{
  if (ZEND_NUM_ARGS() == 0) {
    qreal *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_DOUBLE(obj->windowOpacity());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  y
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, y)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->y());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  clearFocus
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, clearFocus)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->clearFocus();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  fontInfo
 *
 *    @flags    c
 *    @access    public
 *    @return    QFontInfo
 *    @param    
 */
ZEND_METHOD(QWidget, fontInfo)
{
  if (ZEND_NUM_ARGS() == 0) {
    QFontInfo *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QFontInfo
      *return_object = static_cast < QFontInfo > (obj->fontInfo());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  isHidden
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isHidden)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isHidden());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setMaximumWidth
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int maxw
 */
ZEND_METHOD(QWidget, setMaximumWidth)
{
/*! l public*/
/*! int maxw,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setMaximumWidth((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  contentsRect
 *
 *    @flags    c
 *    @access    public
 *    @return    QRect
 *    @param    
 */
ZEND_METHOD(QWidget, contentsRect)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRect *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRect
      *return_object = static_cast < QRect > (obj->contentsRect());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setContextMenuPolicy
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::ContextMenuPolicy policy
 */
ZEND_METHOD(QWidget, setContextMenuPolicy)
{
/*! l public*/
/*! int policy,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setContextMenuPolicy((Qt::ContextMenuPolicy) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  focusProxy
 *
 *    @flags    c
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, focusProxy)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->focusProxy());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  statusTip
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, statusTip)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->statusTip());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  visibleRegion
 *
 *    @flags    c
 *    @access    public
 *    @return    QRegion
 *    @param    
 */
ZEND_METHOD(QWidget, visibleRegion)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRegion *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRegion
      *return_object = static_cast < QRegion > (obj->visibleRegion());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  isVisibleTo
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    QWidget*
 */
ZEND_METHOD(QWidget, isVisibleTo)
{
///QWidget*
/*! o public*/
/*! QWidget* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          bool *return_object;

          if (getThis() != NULL) {
            RETURN_BOOL(obj->isVisibleTo((QWidget *) obj_z_0));
          }                     /// 5 END getThis(), simple types
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  releaseMouse
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, releaseMouse)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->releaseMouse();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setTabOrder
 *
 *    @flags    s
 *    @access    public
 *    @return    void
 *    @param    QWidget *, QWidget *
 */
ZEND_METHOD(QWidget, setTabOrder)
{
///QWidget*
///QWidget*
/*! oo public*/
/*! QWidget* , QWidget* ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
        QObject *obj_z_1 = (QObject *) php_qt_fetch(z_1);

        if (obj_z_0->inherits("QWidget") && obj_z_1->inherits("QWidget")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setTabOrder((QWidget *) obj_z_0, (QWidget *) obj_z_1);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setFocusProxy
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QWidget *
 */
ZEND_METHOD(QWidget, setFocusProxy)
{
///QWidget*
/*! o public*/
/*! QWidget* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setFocusProxy((QWidget *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  topLevelWidget
 *
 *    @flags    c
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, topLevelWidget)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->topLevelWidget());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  mapToParent
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    const QPoint &
 */
ZEND_METHOD(QWidget, mapToParent)
{
/*! l public*/
/*! const QPoint& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QPoint *return_object;

        if (getThis() != NULL) {
/// return value is object: QPoint
          *return_object = static_cast < QPoint > (obj->mapToParent((const QPoint &)Z_LVAL_P(z_0)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  overrideWindowFlags
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::WindowFlags type
 */
ZEND_METHOD(QWidget, overrideWindowFlags)
{
/*! l public*/
/*! int type,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->overrideWindowFlags((Qt::WindowFlags) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  hide
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, hide)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->hide();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  mapTo
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    QWidget *, const QPoint &
 */
ZEND_METHOD(QWidget, mapTo)
{
///QWidget*
/*! ol public*/
/*! QWidget* , const QPoint& ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          QPoint *return_object;

          if (getThis() != NULL) {
/// return value is object: QPoint
            *return_object = static_cast < QPoint > (obj->mapTo((QWidget *) obj_z_0, (const QPoint &)Z_LVAL_P(z_1)));
          } else {              /// END getThis(), static
            php_error(E_ERROR, "Object not found");
          }
          zend_class_entry *ce;

          object_init_ex(return_value, QWidget_ce_ptr);
          zend_rsrc_list_entry le;

          le.ptr = return_object;
          php_qt_register(return_value, le);
          return;
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  childrenRect
 *
 *    @flags    c
 *    @access    public
 *    @return    QRect
 *    @param    
 */
ZEND_METHOD(QWidget, childrenRect)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRect *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRect
      *return_object = static_cast < QRect > (obj->childrenRect());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setStyle
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QStyle *
 */
ZEND_METHOD(QWidget, setStyle)
{
///qt_QStyle*
/*! o public*/
/*! qt_QStyle* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QStyle")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setStyle((QStyle *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  isRightToLeft
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isRightToLeft)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isRightToLeft());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowModified
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    bool
 */
ZEND_METHOD(QWidget, setWindowModified)
{
/*! l public_slots*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setWindowModified((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setBackgroundRole
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QPalette::ColorRole
 */
ZEND_METHOD(QWidget, setBackgroundRole)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setBackgroundRole((QPalette::ColorRole) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setFixedSize
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QSize &
 */
ZEND_METHOD(QWidget, setFixedSize)
{
///const QSize&
/*! o public*/
/*! const QSize& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QSize")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setFixedSize((const QSize &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  focusPreviousChild
 *
 *    @flags    
 *    @access    protected
 *    @return    bool
 *    @param    
 */
// method focusPreviousChild is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  inputContext
 *
 *    @flags    
 *    @access    public
 *    @return    QInputContext *
 *    @param    
 */
ZEND_METHOD(QWidget, inputContext)
{
  if (ZEND_NUM_ARGS() == 0) {
    QInputContext **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QInputContext *
      *return_object = static_cast < QInputContext * >(obj->inputContext());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  palette
 *
 *    @flags    c
 *    @access    public
 *    @return    const QPalette &
 *    @param    
 */
ZEND_METHOD(QWidget, palette)
{
  if (ZEND_NUM_ARGS() == 0) {
  }
}

/*!
 *    @class     QWidget
 *    @function  setFixedHeight
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int h
 */
ZEND_METHOD(QWidget, setFixedHeight)
{
/*! l public*/
/*! int h,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setFixedHeight((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  repaint
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int x, int y, int w, int h
 */
ZEND_METHOD(QWidget, repaint)
{
/*! llll public*/
/*! int x, int y, int w, int h,  */
  if (ZEND_NUM_ARGS() == 4) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->repaint((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  cursor
 *
 *    @flags    c
 *    @access    public
 *    @return    QCursor
 *    @param    
 */
ZEND_METHOD(QWidget, cursor)
{
  if (ZEND_NUM_ARGS() == 0) {
    QCursor *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QCursor
      *return_object = static_cast < QCursor > (obj->cursor());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowIconText
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &
 */
ZEND_METHOD(QWidget, setWindowIconText)
{
///const QString&
/*! o public*/
/*! const QString& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setWindowIconText((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  fontMetrics
 *
 *    @flags    c
 *    @access    public
 *    @return    QFontMetrics
 *    @param    
 */
ZEND_METHOD(QWidget, fontMetrics)
{
  if (ZEND_NUM_ARGS() == 0) {
    QFontMetrics *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QFontMetrics
      *return_object = static_cast < QFontMetrics > (obj->fontMetrics());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  grabShortcut
 *
 *    @flags    
 *    @access    public
 *    @return    int
 *    @param    const QKeySequence &key, Qt::ShortcutContext context = Qt::WindowShortcut
 */
ZEND_METHOD(QWidget, grabShortcut)
{
///const QKeySequence&
/*! ol public*/
/*! const QKeySequence& key, int context,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QKeySequence")) {
          int *return_object;

          if (getThis() != NULL) {
            RETURN_LONG(obj->grabShortcut((const QKeySequence &)*obj_z_0, (Qt::ShortcutContext) Z_LVAL_P(z_1)));
          }                     /// 5 END getThis(), simple types
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  releaseKeyboard
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, releaseKeyboard)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->releaseKeyboard();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setAccessibleDescription
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &description
 */
ZEND_METHOD(QWidget, setAccessibleDescription)
{
///const QString&
/*! o public*/
/*! const QString& description,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setAccessibleDescription((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  qObject
 *
 *    @flags    
 *    @access    public
 *    @return    QObject*
 *    @param    
 */
ZEND_METHOD(QWidget, qObject)
{
}

/*!
 *    @class     QWidget
 *    @function  maximumWidth
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, maximumWidth)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->maximumWidth());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowOpacity
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    qreal level
 */
ZEND_METHOD(QWidget, setWindowOpacity)
{
/*! l public*/
/*! double level,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setWindowOpacity((qreal) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  isTopLevel
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isTopLevel)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isTopLevel());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  mask
 *
 *    @flags    c
 *    @access    public
 *    @return    QRegion
 *    @param    
 */
ZEND_METHOD(QWidget, mask)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRegion *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRegion
      *return_object = static_cast < QRegion > (obj->mask());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  isActiveWindow
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isActiveWindow)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isActiveWindow());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  isEnabledTo
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    QWidget*
 */
ZEND_METHOD(QWidget, isEnabledTo)
{
///QWidget*
/*! o public*/
/*! QWidget* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          bool *return_object;

          if (getThis() != NULL) {
            RETURN_BOOL(obj->isEnabledTo((QWidget *) obj_z_0));
          }                     /// 5 END getThis(), simple types
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  layoutDirection
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::LayoutDirection
 *    @param    
 */
ZEND_METHOD(QWidget, layoutDirection)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::LayoutDirection * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->layoutDirection());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  isAncestorOf
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    const QWidget *child
 */
ZEND_METHOD(QWidget, isAncestorOf)
{
///const QWidget*
/*! o public*/
/*! const QWidget* child,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          bool *return_object;

          if (getThis() != NULL) {
            RETURN_BOOL(obj->isAncestorOf((const QWidget *)obj_z_0));
          }                     /// 5 END getThis(), simple types
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  windowIcon
 *
 *    @flags    c
 *    @access    public
 *    @return    QIcon
 *    @param    
 */
ZEND_METHOD(QWidget, windowIcon)
{
  if (ZEND_NUM_ARGS() == 0) {
    QIcon *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->windowIcon();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  updatesEnabled
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, updatesEnabled)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->updatesEnabled());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  isMinimized
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isMinimized)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isMinimized());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  height
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, height)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->height());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  normalGeometry
 *
 *    @flags    c
 *    @access    public
 *    @return    QRect
 *    @param    
 */
ZEND_METHOD(QWidget, normalGeometry)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRect *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRect
      *return_object = static_cast < QRect > (obj->normalGeometry());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setMask
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QBitmap &
 */
ZEND_METHOD(QWidget, setMask)
{
///const QBitmap&
/*! o public*/
/*! const QBitmap& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QBitmap")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setMask((const QBitmap &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setForegroundRole
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QPalette::ColorRole
 */
ZEND_METHOD(QWidget, setForegroundRole)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setForegroundRole((QPalette::ColorRole) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  update
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int x, int y, int w, int h
 */
ZEND_METHOD(QWidget, update)
{
/*! llll public*/
/*! int x, int y, int w, int h,  */
  if (ZEND_NUM_ARGS() == 4) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->update((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  adjustSize
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, adjustSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->adjustSize();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  toolTip
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, toolTip)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->toolTip());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setCursor
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QCursor &
 */
ZEND_METHOD(QWidget, setCursor)
{
///const QCursor&
/*! o public*/
/*! const QCursor& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QCursor")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setCursor((const QCursor &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setMinimumWidth
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int minw
 */
ZEND_METHOD(QWidget, setMinimumWidth)
{
/*! l public*/
/*! int minw,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setMinimumWidth((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  isEnabledToTLW
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isEnabledToTLW)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isEnabledToTLW());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowRole
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &
 */
ZEND_METHOD(QWidget, setWindowRole)
{
///const QString&
/*! o public*/
/*! const QString& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setWindowRole((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setPalette
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QPalette &
 */
ZEND_METHOD(QWidget, setPalette)
{
///const QPalette&
/*! o public*/
/*! const QPalette& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QPalette")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setPalette((const QPalette &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  acceptDrops
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, acceptDrops)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->acceptDrops());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  focusNextChild
 *
 *    @flags    
 *    @access    protected
 *    @return    bool
 *    @param    
 */
// method focusNextChild is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  setShortcutEnabled
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int id, bool enable = true
 */
ZEND_METHOD(QWidget, setShortcutEnabled)
{
/*! ll public*/
/*! int id, int enable,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setShortcutEnabled((int)Z_LVAL_P(z_0), (bool) Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  geometry
 *
 *    @flags    c
 *    @access    public
 *    @return    const QRect &
 *    @param    
 */
ZEND_METHOD(QWidget, geometry)
{
  if (ZEND_NUM_ARGS() == 0) {
  }
}

/*!
 *    @class     QWidget
 *    @function  setShown
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    bool shown
 */
ZEND_METHOD(QWidget, setShown)
{
/*! l public_slots*/
/*! int shown,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setShown((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  accessibleDescription
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, accessibleDescription)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->accessibleDescription());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setMaximumSize
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QSize &
 */
ZEND_METHOD(QWidget, setMaximumSize)
{
///const QSize&
/*! o public*/
/*! const QSize& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QSize")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setMaximumSize((const QSize &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setContentsMargins
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int left, int top, int right, int bottom
 */
ZEND_METHOD(QWidget, setContentsMargins)
{
/*! llll public*/
/*! int left, int top, int right, int bottom,  */
  if (ZEND_NUM_ARGS() == 4) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setContentsMargins((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  backgroundRole
 *
 *    @flags    c
 *    @access    public
 *    @return    QPalette::ColorRole
 *    @param    
 */
ZEND_METHOD(QWidget, backgroundRole)
{
  if (ZEND_NUM_ARGS() == 0) {
    QPalette::ColorRole * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->backgroundRole());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  mapFromParent
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    const QPoint &
 */
ZEND_METHOD(QWidget, mapFromParent)
{
/*! l public*/
/*! const QPoint& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QPoint *return_object;

        if (getThis() != NULL) {
/// return value is object: QPoint
          *return_object = static_cast < QPoint > (obj->mapFromParent((const QPoint &)Z_LVAL_P(z_0)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  updateGeometry
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, updateGeometry)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->updateGeometry();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setAttribute
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::WidgetAttribute, bool on = true
 */
ZEND_METHOD(QWidget, setAttribute)
{
/*! ll public*/
/*! int , int on,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setAttribute((Qt::WidgetAttribute) Z_LVAL_P(z_0), (bool) Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  windowType
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::WindowType
 *    @param    
 */
ZEND_METHOD(QWidget, windowType)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::WindowType * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->windowType();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  focusWidget
 *
 *    @flags    c
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, focusWidget)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->focusWidget());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  ensurePolished
 *
 *    @flags    c
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, ensurePolished)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->ensurePolished();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  foregroundRole
 *
 *    @flags    c
 *    @access    public
 *    @return    QPalette::ColorRole
 *    @param    
 */
ZEND_METHOD(QWidget, foregroundRole)
{
  if (ZEND_NUM_ARGS() == 0) {
    QPalette::ColorRole * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->foregroundRole());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setEnabled
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    bool
 */
ZEND_METHOD(QWidget, setEnabled)
{
/*! l public_slots*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setEnabled((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  windowIconText
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, windowIconText)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->windowIconText());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  updateMicroFocus
 *
 *    @flags    
 *    @access    protected
 *    @return    void
 *    @param    
 */
// method updateMicroFocus is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  metric
 *
 *    @flags    c
 *    @access    protected
 *    @return    int
 *    @param    PaintDeviceMetric
 */
// method metric is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  winId
 *
 *    @flags    c
 *    @access    public
 *    @return    WId
 *    @param    
 */
ZEND_METHOD(QWidget, winId)
{
  if (ZEND_NUM_ARGS() == 0) {
    WId *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->winId());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  close
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, close)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->close());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  childAt
 *
 *    @flags    c
 *    @access    public
 *    @return    QWidget *
 *    @param    int x, int y
 */
ZEND_METHOD(QWidget, childAt)
{
/*! ll public*/
/*! int x, int y,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QWidget **return_object;

        if (getThis() != NULL) {
/// return: pointer

/// return value is object: QWidget *
          *return_object = static_cast < QWidget * >(obj->childAt((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object[0];
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setFixedWidth
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int w
 */
ZEND_METHOD(QWidget, setFixedWidth)
{
/*! l public*/
/*! int w,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setFixedWidth((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  windowRole
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, windowRole)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->windowRole());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setFont
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QFont &
 */
ZEND_METHOD(QWidget, setFont)
{
///const QFont&
/*! o public*/
/*! const QFont& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QFont")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setFont((const QFont &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  hasMouseTracking
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, hasMouseTracking)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->hasMouseTracking());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  childrenRegion
 *
 *    @flags    c
 *    @access    public
 *    @return    QRegion
 *    @param    
 */
ZEND_METHOD(QWidget, childrenRegion)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRegion *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRegion
      *return_object = static_cast < QRegion > (obj->childrenRegion());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  QWidget
 *
 *    @flags    t
 *    @access    public
 *    @return    
 *    @param    QWidget* parent = 0, Qt::WFlags f = 0
 */
ZEND_METHOD(QWidget, __construct)
{
///QWidget*
  if (ZEND_NUM_ARGS() == 0) {
          QWidget_moc *QWidget_ptr = new QWidget_moc();
          QWidget_ptr->zend_ptr = this_ptr;

          PHP_QT_REGISTER(QWidget_ptr);
          RETURN_NULL();
  }

/*! ol public*/
/*! QWidget* parent, int f,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          QWidget *QWidget_ptr = new QWidget((QWidget *) obj_z_0, (Qt::WFlags) Z_LVAL_P(z_1));

          PHP_QT_REGISTER(QWidget_ptr);
          RETURN_NULL();
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setInputContext
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QInputContext *
 */
ZEND_METHOD(QWidget, setInputContext)
{
///QInputContext*
/*! o public*/
/*! QInputContext* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QInputContext")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setInputContext((QInputContext *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  unsetLayoutDirection
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, unsetLayoutDirection)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->unsetLayoutDirection();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  sizeIncrement
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QWidget, sizeIncrement)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->sizeIncrement());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  mouseGrabber
 *
 *    @flags    s
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, mouseGrabber)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->mouseGrabber());
/// check whether method call is static.
    } else {
      return_object = (QWidget **) malloc(sizeof (QWidget::mouseGrabber()));    /// memory allocation
      *return_object = static_cast < QWidget * >(QWidget::mouseGrabber());
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  trUtf8
 *
 *    @flags    s
 *    @access    public
 *    @return    QString
 *    @param     const char *, const char * = 0 
 */
ZEND_METHOD(QWidget, trUtf8)
{
/*! ss public*/
/*! const char* , const char* ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QString *return_object;

        if (getThis() != NULL) {
/// return value is object: QString
          *return_object = static_cast < QString > (obj->trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
/// check whether method call is static.
        } else {
          return_object = (QString *) malloc(sizeof (QWidget::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1))));   /// memory allocation
          *return_object = static_cast < QString > (QWidget::trUtf8((const char *)Z_STRVAL_P(z_0), (const char *)Z_STRVAL_P(z_1)));
        } zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  resetInputContext
 *
 *    @flags    
 *    @access    protected
 *    @return    void
 *    @param    
 */
// method resetInputContext is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  isFullScreen
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isFullScreen)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isFullScreen());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  mapToGlobal
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    const QPoint &
 */
ZEND_METHOD(QWidget, mapToGlobal)
{
/*! l public*/
/*! const QPoint& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QPoint *return_object;

        if (getThis() != NULL) {
/// return value is object: QPoint
          *return_object = static_cast < QPoint > (obj->mapToGlobal((const QPoint &)Z_LVAL_P(z_0)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  move
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int x, int y
 */
ZEND_METHOD(QWidget, move)
{
/*! ll public*/
/*! int x, int y,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->move((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  mapFromGlobal
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    const QPoint &
 */
ZEND_METHOD(QWidget, mapFromGlobal)
{
/*! l public*/
/*! const QPoint& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QPoint *return_object;

        if (getThis() != NULL) {
/// return value is object: QPoint
          *return_object = static_cast < QPoint > (obj->mapFromGlobal((const QPoint &)Z_LVAL_P(z_0)));
        } else {                /// END getThis(), static
          php_error(E_ERROR, "Object not found");
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object;
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setUpdatesEnabled
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    bool enable
 */
ZEND_METHOD(QWidget, setUpdatesEnabled)
{
/*! l public*/
/*! int enable,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setUpdatesEnabled((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setSizeIncrement
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QSize &
 */
ZEND_METHOD(QWidget, setSizeIncrement)
{
///const QSize&
/*! o public*/
/*! const QSize& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QSize")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setSizeIncrement((const QSize &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  grabMouse
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, grabMouse)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->grabMouse();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  layout
 *
 *    @flags    c
 *    @access    public
 *    @return    QLayout *
 *    @param    
 */
ZEND_METHOD(QWidget, layout)
{
  if (ZEND_NUM_ARGS() == 0) {
    QLayout **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QLayout *
      *return_object = static_cast < QLayout * >(obj->layout());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  mapFrom
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    QWidget *, const QPoint &
 */
ZEND_METHOD(QWidget, mapFrom)
{
///QWidget*
/*! ol public*/
/*! QWidget* , const QPoint& ,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          QPoint *return_object;

          if (getThis() != NULL) {
/// return value is object: QPoint
            *return_object = static_cast < QPoint > (obj->mapFrom((QWidget *) obj_z_0, (const QPoint &)Z_LVAL_P(z_1)));
          } else {              /// END getThis(), static
            php_error(E_ERROR, "Object not found");
          }
          zend_class_entry *ce;

          object_init_ex(return_value, QWidget_ce_ptr);
          zend_rsrc_list_entry le;

          le.ptr = return_object;
          php_qt_register(return_value, le);
          return;
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  windowFlags
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::WindowFlags
 *    @param    
 */
ZEND_METHOD(QWidget, windowFlags)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::WindowFlags * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->windowFlags());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  isModal
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isModal)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isModal());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  unsetCursor
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, unsetCursor)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->unsetCursor();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setLayoutDirection
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::LayoutDirection direction
 */
ZEND_METHOD(QWidget, setLayoutDirection)
{
/*! l public*/
/*! int direction,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  maximumHeight
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, maximumHeight)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->maximumHeight());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  frameGeometry
 *
 *    @flags    c
 *    @access    public
 *    @return    QRect
 *    @param    
 */
ZEND_METHOD(QWidget, frameGeometry)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRect *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRect
      *return_object = static_cast < QRect > (obj->frameGeometry());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  handle
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::HANDLE
 *    @param    
 */
ZEND_METHOD(QWidget, handle)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::HANDLE * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->handle();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  lower
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, lower)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->lower();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowTitle
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &
 */
ZEND_METHOD(QWidget, setWindowTitle)
{
///const QString&
/*! o public*/
/*! const QString& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setWindowTitle((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setWindowState
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::WindowStates state
 */
ZEND_METHOD(QWidget, setWindowState)
{
/*! l public*/
/*! int state,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setWindowState((Qt::WindowStates) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  scroll
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int dx, int dy
 */
ZEND_METHOD(QWidget, scroll)
{
/*! ll public*/
/*! int dx, int dy,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->scroll((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  sizePolicy
 *
 *    @flags    c
 *    @access    public
 *    @return    QSizePolicy
 *    @param    
 */
ZEND_METHOD(QWidget, sizePolicy)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSizePolicy *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSizePolicy
      *return_object = static_cast < QSizePolicy > (obj->sizePolicy());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  width
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, width)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->width());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setHidden
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    bool hidden
 */
ZEND_METHOD(QWidget, setHidden)
{
/*! l public_slots*/
/*! int hidden,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setHidden((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  find
 *
 *    @flags    s
 *    @access    public
 *    @return    QWidget *
 *    @param    WId
 */
ZEND_METHOD(QWidget, find)
{
/*! l public*/
/*! unsigned int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        QWidget **return_object;

        if (getThis() != NULL) {
/// return: pointer

/// return value is object: QWidget *
          *return_object = static_cast < QWidget * >(obj->find((WId) Z_LVAL_P(z_0)));
/// check whether method call is static.
        } else {
          return_object = (QWidget **) malloc(sizeof (QWidget::find((WId) Z_LVAL_P(z_0))));     /// memory allocation
          *return_object = static_cast < QWidget * >(QWidget::find((WId) Z_LVAL_P(z_0)));
        }
        zend_class_entry *ce;

        object_init_ex(return_value, QWidget_ce_ptr);
        zend_rsrc_list_entry le;

        le.ptr = return_object[0];
        php_qt_register(return_value, le);
        return;
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  staticMetaObject
 *
 *    @flags    s
 *    @access    public
 *    @return    QMetaObject*
 *    @param    
 */
ZEND_METHOD(QWidget, staticMetaObject)
{
}

/*!
 *    @class     QWidget
 *    @function  size
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QWidget, size)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->size());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  activateWindow
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, activateWindow)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->activateWindow();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setToolTip
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &
 */
ZEND_METHOD(QWidget, setToolTip)
{
///const QString&
/*! o public*/
/*! const QString& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setToolTip((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setParent
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QWidget *parent
 */
ZEND_METHOD(QWidget, setParent)
{
///QWidget*
/*! o public*/
/*! QWidget* parent,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setParent((QWidget *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  isWindowModified
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isWindowModified)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isWindowModified());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  testAttribute
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    Qt::WidgetAttribute
 */
ZEND_METHOD(QWidget, testAttribute)
{
/*! l public*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        bool *return_object;

        if (getThis() != NULL) {
          RETURN_BOOL(obj->testAttribute((Qt::WidgetAttribute) Z_LVAL_P(z_0)));
        }                       /// 5 END getThis(), simple types
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  pos
 *
 *    @flags    c
 *    @access    public
 *    @return    QPoint
 *    @param    
 */
ZEND_METHOD(QWidget, pos)
{
  if (ZEND_NUM_ARGS() == 0) {
    QPoint *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QPoint
      *return_object = static_cast < QPoint > (obj->pos());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  isWindow
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isWindow)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isWindow());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  create
 *
 *    @flags    
 *    @access    protected
 *    @return    void
 *    @param    WId = 0, bool initializeWindow = true, bool destroyOldWindow = true
 */
// method create is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  setFocusPolicy
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::FocusPolicy policy
 */
ZEND_METHOD(QWidget, setFocusPolicy)
{
/*! l public*/
/*! int policy,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setFocusPolicy((Qt::FocusPolicy) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  getContentsMargins
 *
 *    @flags    c
 *    @access    public
 *    @return    void
 *    @param    int *left, int *top, int *right, int *bottom
 */
ZEND_METHOD(QWidget, getContentsMargins)
{
/*! llll public*/
/*! int* left, int* top, int* right, int* bottom,  */
  if (ZEND_NUM_ARGS() == 4) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->getContentsMargins((int *)Z_LVAL_P(z_0), (int *)Z_LVAL_P(z_1), (int *)Z_LVAL_P(z_2), (int *)Z_LVAL_P(z_3));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  windowTitle
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, windowTitle)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->windowTitle());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  style
 *
 *    @flags    c
 *    @access    public
 *    @return    QStyle *
 *    @param    
 */
ZEND_METHOD(QWidget, style)
{
  if (ZEND_NUM_ARGS() == 0) {
    QStyle **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QStyle *
      *return_object = static_cast < QStyle * >(obj->style());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  windowState
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::WindowStates
 *    @param    
 */
ZEND_METHOD(QWidget, windowState)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::WindowStates * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->windowState());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  frameSize
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QWidget, frameSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->frameSize());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setAccessibleName
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &name
 */
ZEND_METHOD(QWidget, setAccessibleName)
{
///const QString&
/*! o public*/
/*! const QString& name,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setAccessibleName((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setAcceptDrops
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    bool on
 */
ZEND_METHOD(QWidget, setAcceptDrops)
{
/*! l public*/
/*! int on,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setAcceptDrops((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  removeAction
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QAction *action
 */
ZEND_METHOD(QWidget, removeAction)
{
///qt_QAction*
/*! o public*/
/*! qt_QAction* action,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QAction")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->removeAction((QAction *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  hasFocus
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, hasFocus)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->hasFocus());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  showFullScreen
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, showFullScreen)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->showFullScreen();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  setMouseTracking
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    bool enable
 */
ZEND_METHOD(QWidget, setMouseTracking)
{
/*! l public*/
/*! int enable,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setMouseTracking((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  clearMask
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, clearMask)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->clearMask();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  showMaximized
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, showMaximized)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->showMaximized();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  devType
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, devType)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->devType());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  font
 *
 *    @flags    c
 *    @access    public
 *    @return    const QFont &
 *    @param    
 */
ZEND_METHOD(QWidget, font)
{
  if (ZEND_NUM_ARGS() == 0) {
  }
}

/*!
 *    @class     QWidget
 *    @function  stackUnder
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QWidget*
 */
ZEND_METHOD(QWidget, stackUnder)
{
///QWidget*
/*! o public*/
/*! QWidget* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QWidget")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->stackUnder((QWidget *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setMinimumSize
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QSize &
 */
ZEND_METHOD(QWidget, setMinimumSize)
{
///const QSize&
/*! o public*/
/*! const QSize& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QSize")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setMinimumSize((const QSize &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setDisabled
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    bool
 */
ZEND_METHOD(QWidget, setDisabled)
{
/*! l public_slots*/
/*! int ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setDisabled((bool) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  show
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, show)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->show();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  underMouse
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, underMouse)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->underMouse());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowIcon
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QIcon &icon
 */
ZEND_METHOD(QWidget, setWindowIcon)
{
///const QIcon&
/*! o public*/
/*! const QIcon& icon,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QIcon")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setWindowIcon((const QIcon &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  grabKeyboard
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, grabKeyboard)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->grabKeyboard();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  raise
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, raise)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->raise();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  event
 *
 *    @flags    
 *    @access    protected
 *    @return    bool
 *    @param    QEvent *
 */
// method event is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  setWhatsThis
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &
 */
ZEND_METHOD(QWidget, setWhatsThis)
{
///const QString&
/*! o public*/
/*! const QString& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setWhatsThis((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setGeometry
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int x, int y, int w, int h
 */
ZEND_METHOD(QWidget, setGeometry)
{
/*! llll public*/
/*! int x, int y, int w, int h,  */
  if (ZEND_NUM_ARGS() == 4) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL
    zval *z_2;                  /// define ZVAL
    zval *z_3;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setGeometry((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1), (int)Z_LVAL_P(z_2), (int)Z_LVAL_P(z_3));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  contextMenuPolicy
 *
 *    @flags    c
 *    @access    public
 *    @return    Qt::ContextMenuPolicy
 *    @param    
 */
ZEND_METHOD(QWidget, contextMenuPolicy)
{
  if (ZEND_NUM_ARGS() == 0) {
    Qt::ContextMenuPolicy * return_object;
    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->contextMenuPolicy());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  resize
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int w, int h
 */
ZEND_METHOD(QWidget, resize)
{
/*! ll public*/
/*! int w, int h,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->resize((int)Z_LVAL_P(z_0), (int)Z_LVAL_P(z_1));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  isLeftToRight
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isLeftToRight)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isLeftToRight());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  setWindowFlags
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::WindowFlags type
 */
ZEND_METHOD(QWidget, setWindowFlags)
{
/*! l public*/
/*! int type,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setWindowFlags((Qt::WindowFlags) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  baseSize
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QWidget, baseSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->baseSize());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setLayout
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QLayout *
 */
ZEND_METHOD(QWidget, setLayout)
{
///qt_QLayout*
/*! o public*/
/*! qt_QLayout* ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QLayout")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setLayout((QLayout *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
    else {
        php_error(E_ERROR, "arg parse error.");
    }
  }                             /// END ZEND_NUM_ARGS
  else {
    php_error(E_ERROR, "wrong arg count.");
  }
}

/*!
 *    @class     QWidget
 *    @function  setMaximumHeight
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int maxh
 */
ZEND_METHOD(QWidget, setMaximumHeight)
{
/*! l public*/
/*! int maxh,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setMaximumHeight((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  showNormal
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, showNormal)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->showNormal();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}

/*!
 *    @class     QWidget
 *    @function  insertAction
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QAction *before, QAction *action
 */
ZEND_METHOD(QWidget, insertAction)
{
///qt_QAction*
///qt_QAction*
/*! oo public*/
/*! qt_QAction* before, qt_QAction* action,  */
  if (ZEND_NUM_ARGS() == 2) {
    zval *z_0;                  /// define ZVAL
    zval *z_1;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "zz", &z_0, &z_1) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);
        QObject *obj_z_1 = (QObject *) php_qt_fetch(z_1);

        if (obj_z_0->inherits("QAction") && obj_z_1->inherits("QAction")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->insertAction((QAction *) obj_z_0, (QAction *) obj_z_1);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  window
 *
 *    @flags    c
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, window)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->window());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  paintEngine
 *
 *    @flags    c
 *    @access    public
 *    @return    QPaintEngine *
 *    @param    
 */
ZEND_METHOD(QWidget, paintEngine)
{
  if (ZEND_NUM_ARGS() == 0) {
    QPaintEngine **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QPaintEngine *
      *return_object = static_cast < QPaintEngine * >(obj->paintEngine());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  minimumHeight
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, minimumHeight)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->minimumHeight());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  x
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, x)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->x());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  releaseShortcut
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int id
 */
ZEND_METHOD(QWidget, releaseShortcut)
{
/*! l public*/
/*! int id,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->releaseShortcut((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setStatusTip
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QString &
 */
ZEND_METHOD(QWidget, setStatusTip)
{
///const QString&
/*! o public*/
/*! const QString& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (!strcmp(Z_OBJCE_P(z_0)->name, "QString")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setStatusTip((const QString &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setBaseSize
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    const QSize &
 */
ZEND_METHOD(QWidget, setBaseSize)
{
///const QSize&
/*! o public*/
/*! const QSize& ,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QSize")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->setBaseSize((const QSize &)*obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  rect
 *
 *    @flags    c
 *    @access    public
 *    @return    QRect
 *    @param    
 */
ZEND_METHOD(QWidget, rect)
{
  if (ZEND_NUM_ARGS() == 0) {
    QRect *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QRect
      *return_object = static_cast < QRect > (obj->rect());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  addAction
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    QAction *action
 */
ZEND_METHOD(QWidget, addAction)
{
///qt_QAction*
/*! o public*/
/*! qt_QAction* action,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_OBJECT) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();
        QObject *obj_z_0 = (QObject *) php_qt_fetch(z_0);

        if (obj_z_0->inherits("QAction")) {
          void *return_object;

          if (getThis() != NULL) {
            obj->addAction((QAction *) obj_z_0);
            RETURN_NULL();
          }                     /// END getThis(), NULL
        }
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  minimumSize
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QWidget, minimumSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->minimumSize());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  setFocus
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::FocusReason reason
 */
ZEND_METHOD(QWidget, setFocus)
{
/*! l public*/
/*! int reason,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setFocus((Qt::FocusReason) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  destroy
 *
 *    @flags    
 *    @access    protected
 *    @return    void
 *    @param    bool destroyWindow = true, bool destroySubWindows = true
 */
// method destroy is protected, skipped.

/*!
 *    @class     QWidget
 *    @function  isVisible
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isVisible)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isVisible());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  accessibleName
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, accessibleName)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->accessibleName());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  minimumWidth
 *
 *    @flags    c
 *    @access    public
 *    @return    int
 *    @param    
 */
ZEND_METHOD(QWidget, minimumWidth)
{
  if (ZEND_NUM_ARGS() == 0) {
    int *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_LONG(obj->minimumWidth());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  isEnabled
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isEnabled)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isEnabled());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  keyboardGrabber
 *
 *    @flags    s
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, keyboardGrabber)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->keyboardGrabber());
/// check whether method call is static.
    } else {
      return_object = (QWidget **) malloc(sizeof (QWidget::keyboardGrabber())); /// memory allocation
      *return_object = static_cast < QWidget * >(QWidget::keyboardGrabber());
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  overrideWindowState
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    Qt::WindowStates state
 */
ZEND_METHOD(QWidget, overrideWindowState)
{
/*! l public*/
/*! int state,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->overrideWindowState((Qt::WindowStates) Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  setMinimumHeight
 *
 *    @flags    
 *    @access    public
 *    @return    void
 *    @param    int minh
 */
ZEND_METHOD(QWidget, setMinimumHeight)
{
/*! l public*/
/*! int minh,  */
  if (ZEND_NUM_ARGS() == 1) {
    zval *z_0;                  /// define ZVAL

    if (zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, "z", &z_0) == SUCCESS) {
      if (Z_TYPE_P(z_0) == IS_LONG) {
        QWidget *obj = (QWidget *) PHP_QT_FETCH();

        void *return_object;

        if (getThis() != NULL) {
          obj->setMinimumHeight((int)Z_LVAL_P(z_0));
          RETURN_NULL();
        }                       /// END getThis(), NULL
      } else {
        php_error(E_ERROR, "argument not allowed");
      }                         /// END check of argument types
    }                           /// END zend_parse_parameters
  }                             /// END ZEND_NUM_ARGS
}

/*!
 *    @class     QWidget
 *    @function  isMaximized
 *
 *    @flags    c
 *    @access    public
 *    @return    bool
 *    @param    
 */
ZEND_METHOD(QWidget, isMaximized)
{
  if (ZEND_NUM_ARGS() == 0) {
    bool *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      RETURN_BOOL(obj->isMaximized());
    }                           /// 5 END getThis(), simple types
  }
}

/*!
 *    @class     QWidget
 *    @function  parentWidget
 *
 *    @flags    c
 *    @access    public
 *    @return    QWidget *
 *    @param    
 */
ZEND_METHOD(QWidget, parentWidget)
{
  if (ZEND_NUM_ARGS() == 0) {
    QWidget **return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return: pointer

/// return value is object: QWidget *
      *return_object = static_cast < QWidget * >(obj->parentWidget());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object[0];
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  whatsThis
 *
 *    @flags    c
 *    @access    public
 *    @return    QString
 *    @param    
 */
ZEND_METHOD(QWidget, whatsThis)
{
  if (ZEND_NUM_ARGS() == 0) {
    QString *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QString
      *return_object = static_cast < QString > (obj->whatsThis());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  maximumSize
 *
 *    @flags    c
 *    @access    public
 *    @return    QSize
 *    @param    
 */
ZEND_METHOD(QWidget, maximumSize)
{
  if (ZEND_NUM_ARGS() == 0) {
    QSize *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

/// return value is object: QSize
      *return_object = static_cast < QSize > (obj->maximumSize());
    } else {                    /// END getThis(), static
      php_error(E_ERROR, "Object not found");
    }
    zend_class_entry *ce;

    object_init_ex(return_value, QWidget_ce_ptr);
    zend_rsrc_list_entry le;

    le.ptr = return_object;
    php_qt_register(return_value, le);
    return;
  }
}

/*!
 *    @class     QWidget
 *    @function  showMinimized
 *
 *    @flags    l
 *    @access    public_slots
 *    @return    void
 *    @param    
 */
ZEND_METHOD(QWidget, showMinimized)
{
  if (ZEND_NUM_ARGS() == 0) {
    void *return_object;

    if (getThis() != NULL) {
      QWidget *obj = (QWidget *) PHP_QT_FETCH();

      obj->showMinimized();
      RETURN_NULL();
    }                           /// END getThis(), NULL
  }
}


PHP_QT_DESTRUCT(QWidget);
