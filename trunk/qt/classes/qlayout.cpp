/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLayout.cpp - QLayout PHP implementation.
 * begin           : Wed Jan 11 20:29:53 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QLayout>
#include "../php_qt.h"



/*		public enumSizeConstraint:long {
			SizeConstraint = 0,
			SizeConstraint = 1,
			SizeConstraint = 2,
			SizeConstraint = 3,
			SizeConstraint = 4,
			SizeConstraint = 5
		}
*/
/*********************************
 *    class     QLayout */
/*
 *    function  totalHeightForWidth
 *    flags:    c
 */
ZEND_METHOD(QLayout, totalHeightForWidth){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int w,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			RETURN_LONG(obj->totalHeightForWidth((int) var_l_0));
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QLayout, tr){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		/* const char* , const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->tr( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  isEmpty
 *    flags:    c
 */
ZEND_METHOD(QLayout, isEmpty){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEmpty());
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  setMargin
 *    flags:    
 */
ZEND_METHOD(QLayout, setMargin){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			obj->setMargin((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QLayout, qt_invoke){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int , QUObject* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_invoke((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  addItem
 *    flags:    pv
 */
ZEND_METHOD(QLayout, addItem){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QLayoutItem* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QLayoutItem*") {
				obj->addItem((QLayoutItem*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  activate
 *    flags:    
 */
ZEND_METHOD(QLayout, activate){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			RETURN_BOOL(obj->activate());
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  setMenuBar
 *    flags:    
 */
ZEND_METHOD(QLayout, setMenuBar){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QWidget* w,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				obj->setMenuBar((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  layout
 *    flags:    
 */
ZEND_METHOD(QLayout, layout){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QLayout * return_object = (QLayout *) obj->layout();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  totalMaximumSize
 *    flags:    c
 */
ZEND_METHOD(QLayout, totalMaximumSize){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->totalMaximumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  sizeConstraint
 *    flags:    c
 */
ZEND_METHOD(QLayout, sizeConstraint){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			obj->sizeConstraint();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  geometry
 *    flags:    c
 */
ZEND_METHOD(QLayout, geometry){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QRect return_object = (QRect) obj->geometry();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QLayout, qt_cast){

	if (ZEND_NUM_ARGS() == 1){
		/* s */
		char* var_s_0;   // default: 
		int len_s_0;


		/* const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s", &var_s_0, len_s_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			obj->qt_cast( (const char*) var_s_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QLayout, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  count
 *    flags:    cpv
 */
ZEND_METHOD(QLayout, count){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  invalidate
 *    flags:    
 */
ZEND_METHOD(QLayout, invalidate){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			obj->invalidate();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  setGeometry
 *    flags:    p
 */
ZEND_METHOD(QLayout, setGeometry){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* const QRect& ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "const QRect&") {
				obj->setGeometry((const QRect&) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QLayout, qt_emit){

	if (ZEND_NUM_ARGS() == 2){
		/* lo */
		long var_lo_0;    // default: 
		zval* z_var_lo_1;   // default: 

		/* int , QUObject* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var_lo_0, &z_var_lo_1) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_lo_1 = (QObject*) php_qt_fetch(z_var_lo_1);

			QString tmp_lo_0(var_lo_1->metaObject()->className());
			
			if(tmp_lo_0 == "QUObject*") {
				RETURN_BOOL(obj->qt_emit((int) var_lo_0, (QUObject*) var_lo_1));
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  setAlignment
 *    flags:    
 */
ZEND_METHOD(QLayout, setAlignment){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int alignment,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			obj->setAlignment((Qt::Alignment) var_l_0);
			RETURN_NULL();
		}
	}

	if (ZEND_NUM_ARGS() == 2){
		/* ol */
		zval* z_var_ol_0;   // default: 
		long var_ol_1;    // default: 

		/* QWidget* w, int alignment,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ol", &z_var_ol_0, &var_ol_1) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_ol_0 = (QObject*) php_qt_fetch(z_var_ol_0);

			QString tmp_ol_0(var_ol_0->metaObject()->className());
			
			if(tmp_ol_0 == "QWidget*") {
				RETURN_BOOL(obj->setAlignment((QWidget*) var_ol_0, (Qt::Alignment) var_ol_1));
			}			
			if(tmp_ol_0 == "QLayout*") {
				RETURN_BOOL(obj->setAlignment((QLayout*) var_ol_0, (Qt::Alignment) var_ol_3));
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QLayout, className){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			const char * return_object = (const char *) obj->className();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  removeWidget
 *    flags:    
 */
ZEND_METHOD(QLayout, removeWidget){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QWidget* w,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				obj->removeWidget((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  setEnabled
 *    flags:    
 */
ZEND_METHOD(QLayout, setEnabled){

	if (ZEND_NUM_ARGS() == 1){
		/* b */
		bool var_b_0;   // _default: 

		/* bool ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"b", &var_b_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			obj->setEnabled((bool) var_b_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  addWidget
 *    flags:    
 */
ZEND_METHOD(QLayout, addWidget){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QWidget* w,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				obj->addWidget((QWidget*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  removeItem
 *    flags:    
 */
ZEND_METHOD(QLayout, removeItem){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QLayoutItem* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QLayoutItem*") {
				obj->removeItem((QLayoutItem*) var_o_0);
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  takeAt
 *    flags:    pv
 */
ZEND_METHOD(QLayout, takeAt){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int index,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			QLayoutItem * return_object = (QLayoutItem *) obj->takeAt((int) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QLayout, staticMetaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QMetaObject* return_object = (QMetaObject*) obj->staticMetaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  itemAt
 *    flags:    cpv
 */
ZEND_METHOD(QLayout, itemAt){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int index,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			QLayoutItem * return_object = (QLayoutItem *) obj->itemAt((int) var_l_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QLayout, qObject){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* return_object = (QObject*) obj->qObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  totalMinimumSize
 *    flags:    c
 */
ZEND_METHOD(QLayout, totalMinimumSize){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->totalMinimumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  minimumSize
 *    flags:    c
 */
ZEND_METHOD(QLayout, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->minimumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
}

/*********************************
 *    class     QLayout */
/*
 *    function  setSpacing
 *    flags:    
 */
ZEND_METHOD(QLayout, setSpacing){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* int ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			obj->setSpacing((int) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  isEnabled
 *    flags:    c
 */
ZEND_METHOD(QLayout, isEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isEnabled());
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  setSizeConstraint
 *    flags:    
 */
ZEND_METHOD(QLayout, setSizeConstraint){

	if (ZEND_NUM_ARGS() == 1){
		/* l */
		long var_l_0;    // default: 

		/* SizeConstraint ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", &var_l_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			obj->setSizeConstraint((SizeConstraint) var_l_0);
			RETURN_NULL();
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  menuBar
 *    flags:    c
 */
ZEND_METHOD(QLayout, menuBar){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->menuBar();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  totalSizeHint
 *    flags:    c
 */
ZEND_METHOD(QLayout, totalSizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->totalSizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  closestAcceptableSize
 *    flags:    s
 */
ZEND_METHOD(QLayout, closestAcceptableSize){

	if (ZEND_NUM_ARGS() == 2){
		/* oo */
		zval* z_var_oo_0;   // default: 
		zval* z_var_oo_1;   // default: 

		/* const QWidget* w, const QSize& s,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"oo", &z_var_oo_0, &z_var_oo_1) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_oo_0 = (QObject*) php_qt_fetch(z_var_oo_0);
			QObject* var_oo_1 = (QObject*) php_qt_fetch(z_var_oo_1);

			QString tmp_oo_0(var_oo_0->metaObject()->className());
			QString tmp_oo_1(var_oo_1->metaObject()->className());
			
			if(tmp_oo_0 == "const QWidget*" && tmp_oo_1 == "const QSize&") {
				QSize return_object = (QSize) obj->closestAcceptableSize((const QWidget*) var_oo_0, (const QSize&) var_oo_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  parentWidget
 *    flags:    c
 */
ZEND_METHOD(QLayout, parentWidget){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QWidget * return_object = (QWidget *) obj->parentWidget();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QLayout, trUtf8){

	if (ZEND_NUM_ARGS() == 2){
		/* ss */
		char* var_ss_0;   // default: 
		int len_ss_0;

		char* var_ss_1;   // default: 0
		int len_ss_1;


		/* const char* , const char* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss|", &var_ss_0, len_ss_0, &var_ss_1, len_ss_1) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();

			
			QString return_object = (QString) obj->trUtf8( (const char*) var_ss_0 , (const char*) var_ss_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QLayout, qt_property){

	if (ZEND_NUM_ARGS() == 3){
		/* llo */
		long var_llo_0;    // default: 
		long var_llo_1;    // default: 
		zval* z_var_llo_2;   // default: 

		/* int , int , QVariant* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"llo", &var_llo_0, &var_llo_1, &z_var_llo_2) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_llo_2 = (QObject*) php_qt_fetch(z_var_llo_2);

			QString tmp_llo_0(var_llo_2->metaObject()->className());
			
			if(tmp_llo_0 == "QVariant*") {
				RETURN_BOOL(obj->qt_property((int) var_llo_0, (int) var_llo_1, (QVariant*) var_llo_2));
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  maximumSize
 *    flags:    c
 */
ZEND_METHOD(QLayout, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QSize return_object = (QSize) obj->maximumSize();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  margin
 *    flags:    c
 */
ZEND_METHOD(QLayout, margin){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->margin());
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  expandingDirections
 *    flags:    c
 */
ZEND_METHOD(QLayout, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			Qt::Orientations return_object = (Qt::Orientations) obj->expandingDirections();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  indexOf
 *    flags:    cv
 */
ZEND_METHOD(QLayout, indexOf){

	if (ZEND_NUM_ARGS() == 1){
		/* o */
		zval* z_var_o_0;   // default: 

		/* QWidget* ,  */
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &z_var_o_0) == SUCCESS) {
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			QObject* var_o_0 = (QObject*) php_qt_fetch(z_var_o_0);

			QString tmp_o_0(var_o_0->metaObject()->className());
			
			if(tmp_o_0 == "QWidget*") {
				RETURN_LONG(obj->indexOf((QWidget*) var_o_0));
			}
		}
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  spacing
 *    flags:    c
 */
ZEND_METHOD(QLayout, spacing){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->spacing());
	}
}

/*********************************
 *    class     QLayout */
/*
 *    function  update
 *    flags:    
 */
ZEND_METHOD(QLayout, update){
	if (ZEND_NUM_ARGS() == 0){
			QLayout *obj = (QLayout*) PHP_QT_FETCH();
			obj->update();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QLayout);

