/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QTabletEvent.cpp - QTabletEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QTabletEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QTabletEvent_php_qt:public QTabletEvent
{

public:
  QTabletEvent_php_qt(zval * zend_ptr, Type ts0, const QPoint & poss1, const QPoint & globalPoss2, const QPointF & hiResGlobalPoss3, int devices4,
                      int pointerTypes5, qreal pressures6, int xTilts7, int yTilts8, qreal tangentialPressures9, qreal rotations10, int zs11,
                      Qt::KeyboardModifiers keyStates12, qint64 uniqueIDs13);


  zval *zend_ptr;
};
QTabletEvent_php_qt::QTabletEvent_php_qt(zval * zend_ptr, Type ts0, const QPoint & poss1, const QPoint & globalPoss2, const QPointF & hiResGlobalPoss3,
                                         int devices4, int pointerTypes5, qreal pressures6, int xTilts7, int yTilts8, qreal tangentialPressures9,
                                         qreal rotations10, int zs11, Qt::KeyboardModifiers keyStates12, qint64 uniqueIDs13):
QTabletEvent(ts0, poss1, globalPoss2, hiResGlobalPoss3, devices4, pointerTypes5, pressures6, xTilts7, yTilts8, tangentialPressures9, rotations10, zs11,
             keyStates12, uniqueIDs13)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method pressure
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	qreal
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, pressure)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type qreal");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::pressure(...) ");
}

/*!
 * method hiResGlobalPos
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPointF &
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, hiResGlobalPos)
{
  ///
#ifdef PHP_QT_QPointF           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'hiResGlobalPos' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QPointF & >(selfpointer->hiResGlobalPos());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QTabletEvent::hiResGlobalPos(...) ");
}

/*!
 * method y
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, y)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'y' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->y());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::y(...) ");
}

/*!
 * method xTilt
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, xTilt)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'xTilt' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->xTilt());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::xTilt(...) ");
}

/*!
 * method rotation
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	qreal
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, rotation)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type qreal");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::rotation(...) ");
}

/*!
 * method pointerType
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	PointerType
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, pointerType)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type PointerType");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::pointerType(...) ");
}

/*!
 * method yTilt
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, yTilt)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'yTilt' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->yTilt());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::yTilt(...) ");
}

/*!
 * method z
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, z)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'z' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->z());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::z(...) ");
}

/*!
 * method hiResGlobalX
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	qreal
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, hiResGlobalX)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type qreal");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::hiResGlobalX(...) ");
}

/*!
 * method hiResGlobalY
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	qreal
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, hiResGlobalY)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type qreal");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::hiResGlobalY(...) ");
}

/*!
 * method pos
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPoint &
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, pos)
{
  ///
#ifdef PHP_QT_QPoint            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'pos' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QPoint & >(selfpointer->pos());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QTabletEvent::pos(...) ");
}

/*!
 * method device
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	TabletDevice
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, device)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type TabletDevice");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::device(...) ");
}

/*!
 * method tangentialPressure
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	qreal
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, tangentialPressure)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type qreal");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::tangentialPressure(...) ");
}

/*!
 * method globalX
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, globalX)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'globalX' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->globalX());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::globalX(...) ");
}

/*!
 * method globalPos
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPoint &
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, globalPos)
{
  ///
#ifdef PHP_QT_QPoint            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'globalPos' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QPoint & >(selfpointer->globalPos());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QTabletEvent::globalPos(...) ");
}

/*!
 * method x
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, x)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'x' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->x());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::x(...) ");
}

/*!
 * method uniqueId
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	qint64
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, uniqueId)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type qint64");
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::uniqueId(...) ");
}

/*!
 * method QTabletEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Type ts0s0
 * @param	const QPoint &poss1s1
 * @param	const QPoint &globalPoss2s2
 * @param	const QPointF &hiResGlobalPoss3s3
 * @param	int devices4s4
 * @param	int pointerTypes5s5
 * @param	qreal pressures6s6
 * @param	int xTilts7s7
 * @param	int yTilts8s8
 * @param	qreal tangentialPressures9s9
 * @param	qreal rotations10s10
 * @param	int zs11s11
 * @param	Qt::KeyboardModifiers keyStates12s12
 * @param	qint64 uniqueIDs13s13
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QTabletEvent, __construct)
{
// notice: unknown argument Type ts0s0, skipped
  php_error(E_ERROR, "could not parse argument in QTabletEvent::QTabletEvent(...) ");
}

/*!
 * method globalY
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QTabletEvent, globalY)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'globalY' is not static");
        RETURN_NULL();
      }
      /// try 
      QTabletEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QTabletEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->globalY());
    }
  }
  php_error(E_ERROR, "could not parse argument in QTabletEvent::globalY(...) ");
}
