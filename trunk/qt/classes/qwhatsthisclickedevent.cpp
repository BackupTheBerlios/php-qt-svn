/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWhatsThisClickedEvent.cpp - QWhatsThisClickedEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QWhatsThisClickedEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QWhatsThisClickedEvent_php_qt:public QWhatsThisClickedEvent
{

public:
  QWhatsThisClickedEvent_php_qt(zval * zend_ptr, const QString & hrefs0);


  zval *zend_ptr;
};
QWhatsThisClickedEvent_php_qt::QWhatsThisClickedEvent_php_qt(zval * zend_ptr, const QString & hrefs0):
QWhatsThisClickedEvent(hrefs0)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method QWhatsThisClickedEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &hrefs0s0
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QWhatsThisClickedEvent, __construct)
{
  ///const QString &hrefs0s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &hrefs0s0,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        QWhatsThisClickedEvent_php_qt *selfpointer = new QWhatsThisClickedEvent_php_qt(getThis(), (const QString &)*cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QWhatsThisClickedEvent::QWhatsThisClickedEvent(...) ");
}

/*!
 * method href
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QWhatsThisClickedEvent, href)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'href' is not static");
        RETURN_NULL();
      }
      /// try 
      QWhatsThisClickedEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWhatsThisClickedEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      *return_object = static_cast < QString > (selfpointer->href());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWhatsThisClickedEvent::href(...) ");
}
