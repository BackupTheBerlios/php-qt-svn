/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLabel.cpp - QLabel PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QLabel>
#include "../php_qt.h"


/*********************************
 *    class     QLabel */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QLabel, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


				QString return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setMargin
 *    flags:    
 */
ZEND_METHOD(QLabel, setMargin){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setMargin((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  clear
 *    flags:    l
 */
ZEND_METHOD(QLabel, clear){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_invoke){
}

/*********************************
 *    class     QLabel */
/*
 *    function  setBuddy
 *    flags:    
 */
ZEND_METHOD(QLabel, setBuddy){
		/* o public*/

		/* qt_QWidget* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				obj->setBuddy((QWidget*) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  movie
 *    flags:    c
 */
ZEND_METHOD(QLabel, movie){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				QMovie * return_object = (QMovie *) obj->movie();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  hasScaledContents
 *    flags:    c
 */
ZEND_METHOD(QLabel, hasScaledContents){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasScaledContents());
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_cast){
}

/*********************************
 *    class     QLabel */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QLabel, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				QMetaObject * return_object = (QMetaObject *) obj->metaObject();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setScaledContents
 *    flags:    
 */
ZEND_METHOD(QLabel, setScaledContents){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setScaledContents((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QLabel, event){
		/* o protected*/
}

/*********************************
 *    class     QLabel */
/*
 *    function  indent
 *    flags:    c
 */
ZEND_METHOD(QLabel, indent){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			RETURN_LONG(obj->indent());
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_emit){
}

/*********************************
 *    class     QLabel */
/*
 *    function  pixmap
 *    flags:    c
 */
ZEND_METHOD(QLabel, pixmap){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				const QPixmap * return_object = (const QPixmap *) obj->pixmap();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setAlignment
 *    flags:    
 */
ZEND_METHOD(QLabel, setAlignment){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setAlignment((Qt::Alignment) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QLabel, className){
}

/*********************************
 *    class     QLabel */
/*
 *    function  buddy
 *    flags:    c
 */
ZEND_METHOD(QLabel, buddy){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				QWidget * return_object = (QWidget *) obj->buddy();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  textFormat
 *    flags:    c
 */
ZEND_METHOD(QLabel, textFormat){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			RETURN_LONG(obj->textFormat());
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setMovie
 *    flags:    l
 */
ZEND_METHOD(QLabel, setMovie){
		/* o public_slots*/

		/* qt_QMovie* movie,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QMovie")) {
				obj->setMovie((QMovie*) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setPicture
 *    flags:    l
 */
ZEND_METHOD(QLabel, setPicture){
		/* o public_slots*/

		/* const QPicture& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QPicture")) {
				obj->setPicture((const QPicture&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setNum
 *    flags:    l
 */
ZEND_METHOD(QLabel, setNum){
		/* l public_slots*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setNum((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  wordWrap
 *    flags:    c
 */
ZEND_METHOD(QLabel, wordWrap){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			RETURN_BOOL(obj->wordWrap());
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QLabel, staticMetaObject){
}

/*********************************
 *    class     QLabel */
/*
 *    function  setTextFormat
 *    flags:    
 */
ZEND_METHOD(QLabel, setTextFormat){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setTextFormat((Qt::TextFormat) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QLabel, qObject){
}

/*********************************
 *    class     QLabel */
/*
 *    function  setText
 *    flags:    l
 */
ZEND_METHOD(QLabel, setText){
		/* o public_slots*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->setText((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  text
 *    flags:    c
 */
ZEND_METHOD(QLabel, text){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				QString return_object = (QString) obj->text();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  alignment
 *    flags:    c
 */
ZEND_METHOD(QLabel, alignment){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			RETURN_LONG(obj->alignment());
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QLabel, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->sizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  minimumSizeHint
 *    flags:    c
 */
ZEND_METHOD(QLabel, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				QSize return_object = (QSize) obj->minimumSizeHint();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  heightForWidth
 *    flags:    c
 */
ZEND_METHOD(QLabel, heightForWidth){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setPixmap
 *    flags:    l
 */
ZEND_METHOD(QLabel, setPixmap){
		/* o public_slots*/

		/* const QPixmap& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QPixmap")) {
				obj->setPixmap((const QPixmap&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  picture
 *    flags:    c
 */
ZEND_METHOD(QLabel, picture){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
				const QPicture * return_object = (const QPicture *) obj->picture();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setWordWrap
 *    flags:    
 */
ZEND_METHOD(QLabel, setWordWrap){
		/* l public*/

		/* int on,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setWordWrap((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QLabel, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


				QString return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLabel_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QLabel, qt_property){
}

/*********************************
 *    class     QLabel */
/*
 *    function  QLabel
 *    flags:    t
 */
ZEND_METHOD(QLabel, __construct){
		/* ol public*/

		/* qt_QWidget* parent, int f,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				QLabel *QLabel_ptr = new QLabel((QWidget*) obj_z_0, (Qt::WFlags) Z_LVAL_P(z_1));
				PHP_QT_REGISTER(QLabel_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* ool public*/

		/* const QString& text, qt_QWidget* parent, int f,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && obj_z_1->inherits("QWidget")) {
				QLabel *QLabel_ptr = new QLabel((const QString&) obj_z_0, (QWidget*) obj_z_1, (Qt::WFlags) Z_LVAL_P(z_2));
				PHP_QT_REGISTER(QLabel_ptr);
				RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  setIndent
 *    flags:    
 */
ZEND_METHOD(QLabel, setIndent){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();


			obj->setIndent((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLabel */
/*
 *    function  margin
 *    flags:    c
 */
ZEND_METHOD(QLabel, margin){
	if (ZEND_NUM_ARGS() == 0){
			QLabel *obj = (QLabel*) PHP_QT_FETCH();
			RETURN_LONG(obj->margin());
	}
}


PHP_QT_DESTRUCT(QLabel);

