/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLabel.cpp - QLabel PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QLabel>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QLabel_php_qt:public QLabel
{

public:
  QLabel_php_qt(zval * zend_ptr, QWidget * parent = 0, Qt::WFlags f = 0);
  QLabel_php_qt(zval * zend_ptr, const QString & texts0, QWidget * parent = 0, Qt::WFlags f = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QLabel_php_qt::QLabel_php_qt(zval * zend_ptr, QWidget * parent, Qt::WFlags f):QLabel(parent, f)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QLabel",&staticMetaObject));
}
QLabel_php_qt::QLabel_php_qt(zval * zend_ptr, const QString & texts0, QWidget * parent, Qt::WFlags f):
QLabel(texts0, parent, f)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QLabel",&staticMetaObject));
}

PHP_QT_MOC(QLabel);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QLabel, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QLabel::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QLabel::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::tr(...) ");
}

/*!
 * method setMargin
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setMargin)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setMargin' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setMargin((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setMargin(...) ");
}

/*!
 * method clear
 * 
 * @param: -
 * @param: -
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QLabel, clear)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'clear' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->clear());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::clear(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method hasScaledContents
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QLabel, hasScaledContents)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'hasScaledContents' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->hasScaledContents());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::hasScaledContents(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method setScaledContents
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool bools0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setScaledContents)
{
  ///bool bools0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setScaledContents' is not static");
        RETURN_NULL();
      }
      /// try bool bools0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setScaledContents((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setScaledContents(...) ");
}

/*!
 * method indent
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QLabel, indent)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'indent' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->indent());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::indent(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setAlignment
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::Alignment Qt::Alignments0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setAlignment)
{
  ///Qt::Alignment Qt::Alignments0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setAlignment' is not static");
        RETURN_NULL();
      }
      /// try Qt::Alignment Qt::Alignments0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setAlignment((Qt::Alignment) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setAlignment(...) ");
}

/*!
 * method pixmap
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPixmap *
 * @flags	c
 */

ZEND_METHOD(QLabel, pixmap)
{
  ///
#ifdef PHP_QT_QPixmap           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'pixmap' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = const_cast < QPixmap * >(selfpointer->pixmap());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::pixmap(...) ");
}

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method buddy
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	c
 */

ZEND_METHOD(QLabel, buddy)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'buddy' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = static_cast < QWidget * >(selfpointer->buddy());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::buddy(...) ");
}

/*!
 * method setMovie
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QMovie *movies0
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QLabel, setMovie)
{
  ///QMovie *movies0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QMovie
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setMovie' is not static");
          RETURN_NULL();
        }
        /// try QMovie *movies0,
        QLabel *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
        }
        QMovie *cpp_arg_0 = static_cast < QMovie * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setMovie((QMovie *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setMovie(...) ");
}

/*!
 * method setPicture
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPicture &s0
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QLabel, setPicture)
{
  ///const QPicture &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QPicture
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setPicture' is not static");
          RETURN_NULL();
        }
        /// try const QPicture &s0,
        QLabel *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
        }
        QPicture *cpp_arg_0 = static_cast < QPicture * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setPicture((const QPicture &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setPicture(...) ");
}

/*!
 * method setNum
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * overloaded args:
 * @param	double
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QLabel, setNum)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setNum' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setNum((int)Z_LVAL_P(arg_0)));
    }
  }
  ///double
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_DOUBLE) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setNum' is not static");
        RETURN_NULL();
      }
      /// try double,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setNum((double)Z_DVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setNum(...) ");
}

/*!
 * method wordWrap
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QLabel, wordWrap)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'wordWrap' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->wordWrap());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::wordWrap(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QLabel, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QLabel::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::staticMetaObject(...) ");
}

/*!
 * method setTextFormat
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::TextFormat Qt::TextFormats0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setTextFormat)
{
  ///Qt::TextFormat Qt::TextFormats0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setTextFormat' is not static");
        RETURN_NULL();
      }
      /// try Qt::TextFormat Qt::TextFormats0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setTextFormat((Qt::TextFormat) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setTextFormat(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method text
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QLabel, text)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'text' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      *return_object = static_cast < QString > (selfpointer->text());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::text(...) ");
}

/*!
 * method minimumSizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QLabel, minimumSizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::minimumSizeHint(...) ");
}

/*!
 * method heightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QLabel, heightForWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'heightForWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->heightForWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::heightForWidth(...) ");
}

/*!
 * method setPixmap
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPixmap &s0
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QLabel, setPixmap)
{
  ///const QPixmap &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QPixmap
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setPixmap' is not static");
          RETURN_NULL();
        }
        /// try const QPixmap &s0,
        QLabel *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
        }
        QPixmap *cpp_arg_0 = static_cast < QPixmap * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setPixmap((const QPixmap &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setPixmap(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setBuddy
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setBuddy)
{
  ///QWidget *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setBuddy' is not static");
          RETURN_NULL();
        }
        /// try QWidget *s0,
        QLabel *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
        }
        QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setBuddy((QWidget *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setBuddy(...) ");
}

/*!
 * method movie
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMovie *
 * @flags	c
 */

ZEND_METHOD(QLabel, movie)
{
  ///
#ifdef PHP_QT_QMovie            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'movie' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = static_cast < QMovie * >(selfpointer->movie());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::movie(...) ");
}

/*!
 * method event
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *es0
 * 
 * @access	protected
 * @return	bool
 * @flags	
 */

/*!
 * method textFormat
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::TextFormat
 * @flags	c
 */

ZEND_METHOD(QLabel, textFormat)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'textFormat' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->textFormat());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::textFormat(...) ");
}

/*!
 * method paintEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QPaintEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method changeEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setText
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QString &s0
 * 
 * @access	public_slots
 * @return	void
 * @flags	l
 */

ZEND_METHOD(QLabel, setText)
{
  ///const QString &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setText' is not static");
          RETURN_NULL();
        }
        /// try const QString &s0,
        QLabel *selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
        }
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setText((const QString &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setText(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QLabel, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QSize *return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::sizeHint(...) ");
}

/*!
 * method alignment
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Alignment
 * @flags	c
 */

ZEND_METHOD(QLabel, alignment)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'alignment' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->alignment());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::alignment(...) ");
}

/*!
 * method picture
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPicture *
 * @flags	c
 */

ZEND_METHOD(QLabel, picture)
{
  ///
#ifdef PHP_QT_QPicture          // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'picture' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = const_cast < QPicture * >(selfpointer->picture());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::picture(...) ");
}

/*!
 * method setWordWrap
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool ons0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setWordWrap)
{
  ///bool ons0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setWordWrap' is not static");
        RETURN_NULL();
      }
      /// try bool ons0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setWordWrap((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setWordWrap(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QLabel, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QLabel::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QLabel::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QLabel::trUtf8(...) ");
}

/*!
 * method QLabel
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *parent=0s0
 * @param	 Qt::WFlags f=0s1
 * 
 * overloaded args:
 * @param	const QString &texts0
 * @param	 QWidget  *parent=0
 * @param	 Qt::WFlags f=0
 * 
 * overloaded args:
 * @param	const QLabel &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QLabel, __construct)
{
  ///QWidget *parent=0s0, Qt::WFlags f=0s1
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel_php_qt *selfpointer = new QLabel_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget *parent=0s0,
      QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QLabel_php_qt *selfpointer = new QLabel_php_qt(getThis(), (QWidget *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget *parent=0s0, Qt::WFlags f=0s1,
      QWidget *cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QLabel_php_qt *selfpointer = new QLabel_php_qt(getThis(), (QWidget *) cpp_arg_0, (Qt::WFlags) Z_LVAL_P(arg_1));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///const QString &texts0, QWidget  *parent=0, Qt::WFlags f=0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    arg_0 = invokeToQString(arg_0);

    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &texts0,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        QLabel_php_qt *selfpointer = new QLabel_php_qt(getThis(), (const QString &)*cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    arg_0 = invokeToQString(arg_0);
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &texts0, QWidget  *parent=0,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        QWidget *cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QLabel_php_qt *selfpointer = new QLabel_php_qt(getThis(), (const QString &)*cpp_arg_0, (QWidget *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    arg_0 = invokeToQString(arg_0);
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QString
      if (inherits(Z_OBJCE_P(arg_0), 59)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QString &texts0, QWidget  *parent=0, Qt::WFlags f=0,
        QString *cpp_arg_0 = static_cast < QString * >(php_qt_fetch(arg_0));
        QWidget *cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QLabel_php_qt *selfpointer = new QLabel_php_qt(getThis(), (const QString &)*cpp_arg_0, (QWidget *) cpp_arg_1, (Qt::WFlags) Z_LVAL_P(arg_2));

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QLabel &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QLabel
      if (inherits(Z_OBJCE_P(arg_0), 38)) {
/// method is private, skip
        php_error(E_ERROR, "QLabel::__construct(...) cannot be called with 'const QLabel &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::QLabel(...) ");
}

/*!
 * method margin
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QLabel, margin)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'margin' is not static");
        RETURN_NULL();
      }
      /// try 
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->margin());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::margin(...) ");
}

/*!
 * method setIndent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLabel, setIndent)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setIndent' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QLabel *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLabel * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setIndent((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLabel::setIndent(...) ");
}
