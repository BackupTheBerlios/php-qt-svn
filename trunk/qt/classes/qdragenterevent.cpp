/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDragEnterEvent.cpp - QDragEnterEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QDragEnterEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QDragEnterEvent_php_qt:public QDragEnterEvent
{

public:
  QDragEnterEvent_php_qt(zval * zend_ptr, const QPoint & poss0, Qt::DropActions actionss1, const QMimeData * datas2, Qt::MouseButtons buttonss3,
                         Qt::KeyboardModifiers modifierss4);


  zval *zend_ptr;
};
QDragEnterEvent_php_qt::QDragEnterEvent_php_qt(zval * zend_ptr, const QPoint & poss0, Qt::DropActions actionss1, const QMimeData * datas2,
                                               Qt::MouseButtons buttonss3, Qt::KeyboardModifiers modifierss4):
QDragEnterEvent(poss0, actionss1, datas2, buttonss3, modifierss4)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method QDragEnterEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPoint &poss0s0
 * @param	Qt::DropActions actionss1s1
 * @param	const QMimeData   *datas2s2
 * @param	Qt::MouseButtons buttonss3s3
 * @param	Qt::KeyboardModifiers modifierss4s4
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QDragEnterEvent, __construct)
{
  ///const QPoint &poss0s0,Qt::DropActions actionss1s1,const QMimeData   *datas2s2,Qt::MouseButtons buttonss3s3,Qt::KeyboardModifiers modifierss4s4
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_OBJECT && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QPoint
#ifdef PHP_QT_QMimeData
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_2), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint &poss0s0,Qt::DropActions actionss1s1,const QMimeData   *datas2s2,Qt::MouseButtons buttonss3s3,Qt::KeyboardModifiers modifierss4s4,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QMimeData *cpp_arg_2 = static_cast < QMimeData * >(php_qt_fetch(arg_2));
        QDragEnterEvent_php_qt *selfpointer =
          new QDragEnterEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (Qt::DropActions) Z_LVAL_P(arg_1), (const QMimeData *)cpp_arg_2,
                                     (Qt::MouseButtons) Z_LVAL_P(arg_3), (Qt::KeyboardModifiers) Z_LVAL_P(arg_4));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QDragEnterEvent::QDragEnterEvent(...) ");
}
