/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QBoxLayout.cpp - QBoxLayout PHP implementation.
 * begin           : Thu Feb 23 16:39:38 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;
#include "../php_qt.h"


#include <QBoxLayout>


/*		public enumDirection:long {
			Direction = 0,
			Direction = 1,
			Direction = 2,
			Direction = 3,
			Down = TopToBottom,
			Up = BottomToTop
		}
*/
/*********************************
 *    class     QBoxLayout
 *    function  tr
 *    flags:    s
 *    access:    public
 *    return:    QString
 *    params:     const char *, const char * = 0 
 */
ZEND_METHOD(QBoxLayout, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QBoxLayout::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  addLayout
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    QLayout *layout, int stretch = 0
 */
ZEND_METHOD(QBoxLayout, addLayout){
//qt_QLayout*
		/* ol public*/

		/* qt_QLayout* layout, int stretch,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QLayout")) {
				obj->addLayout((QLayout*) obj_z_0, (int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  setStretchFactor
 *    flags:    
 *    access:    public
 *    return:    bool
 *    params:    QWidget *w, int stretch
 */
ZEND_METHOD(QBoxLayout, setStretchFactor){
//qt_QWidget*
		/* ol public*/

		/* qt_QWidget* w, int stretch,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				RETURN_BOOL(obj->setStretchFactor((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1)));
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  setDirection
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    Direction
 */
ZEND_METHOD(QBoxLayout, setDirection){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			obj->setDirection((QBoxLayout::Direction) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  addItem
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    QLayoutItem *
 */
ZEND_METHOD(QBoxLayout, addItem){
//qt_QLayoutItem*
		/* o public*/

		/* qt_QLayoutItem* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QLayoutItem")) {
				obj->addItem((QLayoutItem*) obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  insertSpacing
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int index, int size
 */
ZEND_METHOD(QBoxLayout, insertSpacing){
		/* ll public*/

		/* int index, int size,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			obj->insertSpacing((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  count
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    
 */
ZEND_METHOD(QBoxLayout, count){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  invalidate
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    
 */
ZEND_METHOD(QBoxLayout, invalidate){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			obj->invalidate();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  setGeometry
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    const QRect&
 */
ZEND_METHOD(QBoxLayout, setGeometry){
//const QRect&
		/* o public*/

		/* const QRect& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QRect")) {
				obj->setGeometry((const QRect&) *obj_z_0);
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  addWidget
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    QWidget *, int stretch = 0, Qt::Alignment alignment = 0
 */
ZEND_METHOD(QBoxLayout, addWidget){
//qt_QWidget*
		/* oll public*/

		/* qt_QWidget* , int stretch, int alignment,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				obj->addWidget((QWidget*) obj_z_0, (int) Z_LVAL_P(z_1), (Qt::Alignment) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  addStrut
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int
 */
ZEND_METHOD(QBoxLayout, addStrut){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			obj->addStrut((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  takeAt
 *    flags:    
 *    access:    public
 *    return:    QLayoutItem *
 *    params:    int
 */
ZEND_METHOD(QBoxLayout, takeAt){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			QLayoutItem ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QLayoutItem *) obj->takeAt((int) Z_LVAL_P(z_0));
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  staticMetaObject
 *    flags:    s
 *    access:    public
 *    return:    QMetaObject*
 *    params:    
 */
ZEND_METHOD(QBoxLayout, staticMetaObject){
}

/*********************************
 *    class     QBoxLayout
 *    function  itemAt
 *    flags:    c
 *    access:    public
 *    return:    QLayoutItem *
 *    params:    int
 */
ZEND_METHOD(QBoxLayout, itemAt){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			QLayoutItem ** return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QLayoutItem *) obj->itemAt((int) Z_LVAL_P(z_0));
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  direction
 *    flags:    c
 *    access:    public
 *    return:    Direction
 *    params:    
 */
ZEND_METHOD(QBoxLayout, direction){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			RETURN_LONG(obj->direction());
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  qObject
 *    flags:    
 *    access:    public
 *    return:    QObject*
 *    params:    
 */
ZEND_METHOD(QBoxLayout, qObject){
}

/*********************************
 *    class     QBoxLayout
 *    function  minimumSize
 *    flags:    c
 *    access:    public
 *    return:    QSize
 *    params:    
 */
ZEND_METHOD(QBoxLayout, minimumSize){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QSize* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QSize) obj->minimumSize();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  sizeHint
 *    flags:    c
 *    access:    public
 *    return:    QSize
 *    params:    
 */
ZEND_METHOD(QBoxLayout, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QSize* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QSize) obj->sizeHint();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  heightForWidth
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    int
 */
ZEND_METHOD(QBoxLayout, heightForWidth){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->heightForWidth((int) Z_LVAL_P(z_0)));
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  addSpacing
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int size
 */
ZEND_METHOD(QBoxLayout, addSpacing){
		/* l public*/

		/* int size,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			obj->addSpacing((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  addStretch
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int stretch = 0
 */
ZEND_METHOD(QBoxLayout, addStretch){
		/* l public*/

		/* int stretch,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			obj->addStretch((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  hasHeightForWidth
 *    flags:    c
 *    access:    public
 *    return:    bool
 *    params:    
 */
ZEND_METHOD(QBoxLayout, hasHeightForWidth){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasHeightForWidth());
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  QBoxLayout
 *    flags:    t
 *    access:    public
 *    return:    
 *    params:    Direction, QWidget *parent = 0
 */
ZEND_METHOD(QBoxLayout, __construct){
//qt_QWidget*
		/* lo public*/

		/* int , qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QWidget")) {
				QBoxLayout *QBoxLayout_ptr = new QBoxLayout((QBoxLayout::Direction) Z_LVAL_P(z_0), (QWidget*) obj_z_1);
				PHP_QT_REGISTER(QBoxLayout_ptr);
				RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  insertStretch
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int index, int stretch = 0
 */
ZEND_METHOD(QBoxLayout, insertStretch){
		/* ll public*/

		/* int index, int stretch,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			obj->insertStretch((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  insertWidget
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int index, QWidget *widget, int stretch = 0, Qt::Alignment alignment = 0
 */
ZEND_METHOD(QBoxLayout, insertWidget){
//qt_QWidget*
		/* loll public*/

		/* int index, qt_QWidget* widget, int stretch, int alignment,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QWidget")) {
				obj->insertWidget((int) Z_LVAL_P(z_0), (QWidget*) obj_z_1, (int) Z_LVAL_P(z_2), (Qt::Alignment) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  insertLayout
 *    flags:    
 *    access:    public
 *    return:    void
 *    params:    int index, QLayout *layout, int stretch = 0
 */
ZEND_METHOD(QBoxLayout, insertLayout){
//qt_QLayout*
		/* lol public*/

		/* int index, qt_QLayout* layout, int stretch,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QLayout")) {
				obj->insertLayout((int) Z_LVAL_P(z_0), (QLayout*) obj_z_1, (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  trUtf8
 *    flags:    s
 *    access:    public
 *    return:    QString
 *    params:     const char *, const char * = 0 
 */
ZEND_METHOD(QBoxLayout, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			QString* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QBoxLayout::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  maximumSize
 *    flags:    c
 *    access:    public
 *    return:    QSize
 *    params:    
 */
ZEND_METHOD(QBoxLayout, maximumSize){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			QSize* return_object;
			// check whether method call is static.
			if(getThis() != NULL){
				*return_object = (QSize) obj->maximumSize();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QBoxLayout_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  minimumHeightForWidth
 *    flags:    c
 *    access:    public
 *    return:    int
 *    params:    int
 */
ZEND_METHOD(QBoxLayout, minimumHeightForWidth){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();


			RETURN_LONG(obj->minimumHeightForWidth((int) Z_LVAL_P(z_0)));
			} else { php_error(E_ERROR,"argument not allowed"); }
		}
	}
}

/*********************************
 *    class     QBoxLayout
 *    function  insertItem
 *    flags:    
 *    access:    protected
 *    return:    void
 *    params:    int index, QLayoutItem *
 */
// method insertItem is protected, skipped.

/*********************************
 *    class     QBoxLayout
 *    function  expandingDirections
 *    flags:    c
 *    access:    public
 *    return:    Qt::Orientations
 *    params:    
 */
ZEND_METHOD(QBoxLayout, expandingDirections){
	if (ZEND_NUM_ARGS() == 0){
			QBoxLayout *obj = (QBoxLayout*) PHP_QT_FETCH();
			obj->expandingDirections();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QBoxLayout);

