/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QBoxLayout.cpp - QBoxLayout PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QBoxLayout>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QBoxLayout_php_qt:public QBoxLayout
{

public:
  QBoxLayout_php_qt(zval * zend_ptr, Direction s0, QWidget * parent = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QBoxLayout_php_qt::QBoxLayout_php_qt(zval * zend_ptr, Direction s0, QWidget * parent):QBoxLayout(s0, parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QBoxLayout",&staticMetaObject));
}

PHP_QT_MOC(QBoxLayout);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QBoxLayout, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QBoxLayout::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QBoxLayout::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QBoxLayout::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setDirection
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Direction Directions0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, setDirection)
{
// notice: unknown argument Direction Directions0, skipped
  php_error(E_ERROR, "could not parse argument in QBoxLayout::setDirection(...) ");
}

/*!
 * method addItem
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QLayoutItem *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, addItem)
{
  ///QLayoutItem *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QLayoutItem
      if (inherits(Z_OBJCE_P(arg_0), 42)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addItem' is not static");
          RETURN_NULL();
        }
        /// try QLayoutItem *s0,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QLayoutItem *
          cpp_arg_0 = static_cast < QLayoutItem * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addItem((QLayoutItem *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::addItem(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method count
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, count)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'count' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->count());
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::count(...) ");
}

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QBoxLayout, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QBoxLayout::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QBoxLayout::staticMetaObject(...) ");
}

/*!
 * method itemAt
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	QLayoutItem *
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, itemAt)
{
// notice: abstract class QLayoutItem cannot be instanciated, skipped
  php_error(E_ERROR, "could not parse argument in QBoxLayout::itemAt(...) ");
}

/*!
 * method direction
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Direction
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, direction)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type Direction");
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::direction(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method heightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, heightForWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'heightForWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->heightForWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::heightForWidth(...) ");
}

/*!
 * method addSpacing
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int sizes0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, addSpacing)
{
  ///int sizes0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'addSpacing' is not static");
        RETURN_NULL();
      }
      /// try int sizes0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->addSpacing((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::addSpacing(...) ");
}

/*!
 * method hasHeightForWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, hasHeightForWidth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'hasHeightForWidth' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->hasHeightForWidth());
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::hasHeightForWidth(...) ");
}

/*!
 * method addStretch
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int stretch = 0s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, addStretch)
{
  ///int stretch = 0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'addStretch' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->addStretch());
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'addStretch' is not static");
        RETURN_NULL();
      }
      /// try int stretch = 0s0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->addStretch((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::addStretch(...) ");
}

/*!
 * method insertLayout
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int indexs0
 * @param	 QLayout *layouts1
 * @param	 int stretch = 0s2
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, insertLayout)
{
  ///int indexs0, QLayout *layouts1, int stretch = 0s2
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_1), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'insertLayout' is not static");
          RETURN_NULL();
        }
        /// try int indexs0, QLayout *layouts1,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_1 = static_cast < QLayout * >(php_qt_fetch(arg_1));

        RETURN_VOID(selfpointer->insertLayout((int)Z_LVAL_P(arg_0), (QLayout *) cpp_arg_1));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_1), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'insertLayout' is not static");
          RETURN_NULL();
        }
        /// try int indexs0, QLayout *layouts1, int stretch = 0s2,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_1 = static_cast < QLayout * >(php_qt_fetch(arg_1));

        RETURN_VOID(selfpointer->insertLayout((int)Z_LVAL_P(arg_0), (QLayout *) cpp_arg_1, (int)Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::insertLayout(...) ");
}

/*!
 * method minimumHeightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, minimumHeightForWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumHeightForWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->minimumHeightForWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::minimumHeightForWidth(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method expandingDirections
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientations
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, expandingDirections)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'expandingDirections' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->expandingDirections());
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::expandingDirections(...) ");
}

/*!
 * method addLayout
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QLayout *layouts0
 * @param	 int stretch = 0s1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, addLayout)
{
  ///QLayout *layouts0, int stretch = 0s1
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addLayout' is not static");
          RETURN_NULL();
        }
        /// try QLayout *layouts0,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addLayout((QLayout *) cpp_arg_0));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addLayout' is not static");
          RETURN_NULL();
        }
        /// try QLayout *layouts0, int stretch = 0s1,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addLayout((QLayout *) cpp_arg_0, (int)Z_LVAL_P(arg_1)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::addLayout(...) ");
}

/*!
 * method setStretchFactor
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *ws0
 * @param	 int stretchs1
 * 
 * overloaded args:
 * @param	QLayout *l
 * @param	 int stretch
 * 
 * @access	public
 * @return	bool
 * @flags	
 */

ZEND_METHOD(QBoxLayout, setStretchFactor)
{
  ///QWidget *ws0, int stretchs1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setStretchFactor' is not static");
          RETURN_NULL();
        }
        /// try QWidget *ws0, int stretchs1,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_BOOL(selfpointer->setStretchFactor((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1)));
      }
#endif

    }
  }
  ///QLayout *l, int stretch
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QLayout
      if (inherits(Z_OBJCE_P(arg_0), 41)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setStretchFactor' is not static");
          RETURN_NULL();
        }
        /// try QLayout *l, int stretch,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QLayout *
          cpp_arg_0 = static_cast < QLayout * >(php_qt_fetch(arg_0));

        RETURN_BOOL(selfpointer->setStretchFactor((QLayout *) cpp_arg_0, (int)Z_LVAL_P(arg_1)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::setStretchFactor(...) ");
}

/*!
 * method insertSpacing
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int indexs0
 * @param	 int sizes1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, insertSpacing)
{
  ///int indexs0, int sizes1
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'insertSpacing' is not static");
        RETURN_NULL();
      }
      /// try int indexs0, int sizes1,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->insertSpacing((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::insertSpacing(...) ");
}

/*!
 * method invalidate
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, invalidate)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'invalidate' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->invalidate());
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::invalidate(...) ");
}

/*!
 * method setGeometry
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect &s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, setGeometry)
{
  ///const QRect &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setGeometry' is not static");
          RETURN_NULL();
        }
        /// try const QRect &s0,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QRect *
          cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setGeometry((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::setGeometry(...) ");
}

/*!
 * method takeAt
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	QLayoutItem *
 * @flags	
 */

ZEND_METHOD(QBoxLayout, takeAt)
{
// notice: abstract class QLayoutItem cannot be instanciated, skipped
  php_error(E_ERROR, "could not parse argument in QBoxLayout::takeAt(...) ");
}

/*!
 * method addStrut
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, addStrut)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'addStrut' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->addStrut((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::addStrut(...) ");
}

/*!
 * method addWidget
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *s0
 * @param	 int stretch = 0s1
 * @param	 Qt::Alignment alignment = 0s2
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, addWidget)
{
  ///QWidget *s0, int stretch = 0s1, Qt::Alignment alignment = 0s2
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *s0,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *s0, int stretch = 0s1,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'addWidget' is not static");
          RETURN_NULL();
        }
        /// try QWidget *s0, int stretch = 0s1, Qt::Alignment alignment = 0s2,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->addWidget((QWidget *) cpp_arg_0, (int)Z_LVAL_P(arg_1), (Qt::Alignment) Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::addWidget(...) ");
}

/*!
 * method minimumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, minimumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QBoxLayout::minimumSize(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QBoxLayout::sizeHint(...) ");
}

/*!
 * method insertWidget
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int indexs0
 * @param	 QWidget *widgets1
 * @param	 int stretch = 0s2
 * @param	 Qt::Alignment alignment = 0s3
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, insertWidget)
{
  ///int indexs0, QWidget *widgets1, int stretch = 0s2, Qt::Alignment alignment = 0s3
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_1), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'insertWidget' is not static");
          RETURN_NULL();
        }
        /// try int indexs0, QWidget *widgets1,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));

        RETURN_VOID(selfpointer->insertWidget((int)Z_LVAL_P(arg_0), (QWidget *) cpp_arg_1));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_1), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'insertWidget' is not static");
          RETURN_NULL();
        }
        /// try int indexs0, QWidget *widgets1, int stretch = 0s2,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));

        RETURN_VOID(selfpointer->insertWidget((int)Z_LVAL_P(arg_0), (QWidget *) cpp_arg_1, (int)Z_LVAL_P(arg_2)));
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 4) {
    PHP_QT_FETCH_4_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG && Z_TYPE_P(arg_3) == IS_LONG) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_1), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'insertWidget' is not static");
          RETURN_NULL();
        }
        /// try int indexs0, QWidget *widgets1, int stretch = 0s2, Qt::Alignment alignment = 0s3,
        QBoxLayout *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
        }
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));

        RETURN_VOID(selfpointer->insertWidget((int)Z_LVAL_P(arg_0), (QWidget *) cpp_arg_1, (int)Z_LVAL_P(arg_2), (Qt::Alignment) Z_LVAL_P(arg_3)));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::insertWidget(...) ");
}

/*!
 * method insertStretch
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int indexs0
 * @param	 int stretch = 0s1
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QBoxLayout, insertStretch)
{
  ///int indexs0, int stretch = 0s1
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'insertStretch' is not static");
        RETURN_NULL();
      }
      /// try int indexs0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->insertStretch((int)Z_LVAL_P(arg_0)));
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'insertStretch' is not static");
        RETURN_NULL();
      }
      /// try int indexs0, int stretch = 0s1,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->insertStretch((int)Z_LVAL_P(arg_0), (int)Z_LVAL_P(arg_1)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::insertStretch(...) ");
}

/*!
 * method QBoxLayout
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Direction s0s0
 * @param	 QWidget *parent = 0s1
 * 
 * overloaded args:
 * @param	const QBoxLayout &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QBoxLayout, __construct)
{
// notice: unknown argument Direction s0s0, skipped

  ///const QBoxLayout &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QBoxLayout
      if (inherits(Z_OBJCE_P(arg_0), 5)) {
/// method is private, skip
        php_error(E_ERROR, "QBoxLayout::__construct(...) cannot be called with 'const QBoxLayout &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QBoxLayout::QBoxLayout(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QBoxLayout, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QBoxLayout::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QBoxLayout::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QBoxLayout::trUtf8(...) ");
}

/*!
 * method maximumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QBoxLayout, maximumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'maximumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QBoxLayout *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QBoxLayout * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->maximumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QBoxLayout::maximumSize(...) ");
}

/*!
 * method insertItem
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int indexs0
 * @param	 QLayoutItem *s1
 * 
 * @access	protected
 * @return	void
 * @flags	
 */
