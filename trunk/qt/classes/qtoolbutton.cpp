/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QToolButton.cpp - QToolButton PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QToolButton>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QToolButton_php_qt:public QToolButton
{

public:
  QToolButton_php_qt(zval * zend_ptr, QWidget * parent = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QToolButton_php_qt::QToolButton_php_qt(zval * zend_ptr, QWidget * parent):QToolButton(parent)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QToolButton",&staticMetaObject));
}

PHP_QT_MOC(QToolButton);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QToolButton, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QToolButton::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QToolButton::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method actionEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QActionEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method enterEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setToolButtonStyle
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::ToolButtonStyle styles0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, setToolButtonStyle)
{
  ///Qt::ToolButtonStyle styles0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setToolButtonStyle' is not static");
        RETURN_NULL();
      }
      /// try Qt::ToolButtonStyle styles0,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setToolButtonStyle((Qt::ToolButtonStyle) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::setToolButtonStyle(...) ");
}

/*!
 * method setMenu
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QMenu * menus0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, setMenu)
{
  ///QMenu * menus0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QMenu
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setMenu' is not static");
          RETURN_NULL();
        }
        /// try QMenu * menus0,
        QToolButton *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
        }
        QMenu *
          cpp_arg_0 = static_cast < QMenu * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setMenu((QMenu *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::setMenu(...) ");
}

/*!
 * method timerEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QTimerEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method defaultAction
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QAction *
 * @flags	c
 */

ZEND_METHOD(QToolButton, defaultAction)
{
  ///
#ifdef PHP_QT_QAction           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'defaultAction' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QAction * >(selfpointer->defaultAction());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::defaultAction(...) ");
}

/*!
 * method autoRaise
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QToolButton, autoRaise)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'autoRaise' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->autoRaise());
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::autoRaise(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QToolButton, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QToolButton::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::staticMetaObject(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method minimumSizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QToolButton, minimumSizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::minimumSizeHint(...) ");
}

/*!
 * method triggered
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QAction *s0
 * 
 * @access	public
 * @return	Q_SIGNALS: void
 * @flags	
 */

ZEND_METHOD(QToolButton, triggered)
{
  ///QAction *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QAction
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'triggered' is not static");
          RETURN_NULL();
        }
        /// try QAction *s0,
        QToolButton *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
        }
        QAction *
          cpp_arg_0 = static_cast < QAction * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->triggered((QAction *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::triggered(...) ");
}

/*!
 * method toolButtonStyle
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::ToolButtonStyle
 * @flags	c
 */

ZEND_METHOD(QToolButton, toolButtonStyle)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'toolButtonStyle' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->toolButtonStyle());
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::toolButtonStyle(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method setAutoRaise
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	bool enables0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, setAutoRaise)
{
  ///bool enables0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_BOOL) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setAutoRaise' is not static");
        RETURN_NULL();
      }
      /// try bool enables0,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setAutoRaise((bool) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::setAutoRaise(...) ");
}

/*!
 * method arrowType
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::ArrowType
 * @flags	c
 */

ZEND_METHOD(QToolButton, arrowType)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'arrowType' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->arrowType());
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::arrowType(...) ");
}

/*!
 * method setDefaultAction
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QAction *s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, setDefaultAction)
{
  ///QAction *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QAction
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setDefaultAction' is not static");
          RETURN_NULL();
        }
        /// try QAction *s0,
        QToolButton *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
        }
        QAction *
          cpp_arg_0 = static_cast < QAction * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setDefaultAction((QAction *) cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::setDefaultAction(...) ");
}

/*!
 * method leaveEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method nextCheckState
 * 
 * @param: -
 * @param: -
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method event
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *es0
 * 
 * @access	protected
 * @return	bool
 * @flags	
 */

/*!
 * method setPopupMode
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	ToolButtonPopupMode modes0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, setPopupMode)
{
// notice: unknown argument ToolButtonPopupMode modes0, skipped
  php_error(E_ERROR, "could not parse argument in QToolButton::setPopupMode(...) ");
}

/*!
 * method paintEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QPaintEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setArrowType
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::ArrowType types0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, setArrowType)
{
  ///Qt::ArrowType types0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setArrowType' is not static");
        RETURN_NULL();
      }
      /// try Qt::ArrowType types0,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setArrowType((Qt::ArrowType) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::setArrowType(...) ");
}

/*!
 * method changeEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method showMenu
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QToolButton, showMenu)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'showMenu' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->showMenu());
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::showMenu(...) ");
}

/*!
 * method mousePressEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QMouseEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method popupMode
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	ToolButtonPopupMode
 * @flags	c
 */

ZEND_METHOD(QToolButton, popupMode)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type ToolButtonPopupMode");
    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::popupMode(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QToolButton, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::sizeHint(...) ");
}

/*!
 * method QToolButton
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget * parent=0s0
 * 
 * overloaded args:
 * @param	QToolButtonPrivate &
 * @param	 QWidget* parent
 * 
 * overloaded args:
 * @param	const QToolButton &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QToolButton, __construct)
{
  ///QWidget * parent=0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton_php_qt *
        selfpointer = new QToolButton_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget * parent=0s0,
      QWidget *
        cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QToolButton_php_qt *
        selfpointer = new QToolButton_php_qt(getThis(), (QWidget *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///QToolButtonPrivate &, QWidget* parent
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QToolButtonPrivate
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_1), 71)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QToolButtonPrivate &, QWidget* parent,
        QToolButtonPrivate *
          cpp_arg_0 = static_cast < QToolButtonPrivate * >(php_qt_fetch(arg_0));
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QToolButton_php_qt *
          selfpointer = new QToolButton_php_qt(getThis(), (QToolButtonPrivate &) * cpp_arg_0, (QWidget *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
  ///const QToolButton &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QToolButton
      if (inherits(Z_OBJCE_P(arg_0), 67)) {
/// method is private, skip
        php_error(E_ERROR, "QToolButton::__construct(...) cannot be called with 'const QToolButton &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QToolButton::QToolButton(...) ");
}

/*!
 * method menu
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMenu*
 * @flags	c
 */

ZEND_METHOD(QToolButton, menu)
{
  ///
#ifdef PHP_QT_QMenu             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'menu' is not static");
        RETURN_NULL();
      }
      /// try 
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      le.ptr = static_cast < QMenu * >(selfpointer->menu());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::menu(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QToolButton, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QToolButton::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QToolButton *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QToolButton * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QToolButton::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QToolButton::trUtf8(...) ");
}
