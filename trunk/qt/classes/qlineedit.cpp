/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLineEdit.cpp - QLineEdit PHP implementation.
 * begin           : Thu Feb  9 23:08:03 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"
#include <QLineEdit>




/*		public enumEchoMode:long {
			EchoMode = 0,
			EchoMode = 1,
			EchoMode = 2
		}
*/
/*********************************
 *    class     QLineEdit */
/*
 *    function  tr
 *    flags:    s
 */
ZEND_METHOD(QLineEdit, tr){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QLineEdit::tr( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  inputMask
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, inputMask){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->inputMask();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  insert
 *    flags:    
 */
ZEND_METHOD(QLineEdit, insert){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
				obj->insert((const QString&) *obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorPosition
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, cursorPosition){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->cursorPosition());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  clear
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, clear){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->clear();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  selectionStart
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, selectionStart){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->selectionStart());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setMaxLength
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setMaxLength){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setMaxLength((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_invoke
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_invoke){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setModified
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setModified){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setModified((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setFrame
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setFrame){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setFrame((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_cast
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_cast){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setReadOnly
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setReadOnly){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setReadOnly((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setEchoMode
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setEchoMode){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setEchoMode((QLineEdit::EchoMode) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  metaObject
 *    flags:    cv
 */
ZEND_METHOD(QLineEdit, metaObject){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QMetaObject ** return_object = new QMetaObject *;
			// static?
			if(getThis() != NULL){
				*return_object = (QMetaObject *) obj->metaObject();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorBackward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorBackward){
		/* ll public*/

		/* int mark, int steps,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->cursorBackward((bool) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorWordBackward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorWordBackward){
		/* l public*/

		/* int mark,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->cursorWordBackward((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_emit
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_emit){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setAlignment
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setAlignment){
		/* l public*/

		/* int flag,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setAlignment((Qt::Alignment) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  className
 *    flags:    cv
 */
ZEND_METHOD(QLineEdit, className){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  QLineEdit
 *    flags:    t
 */
ZEND_METHOD(QLineEdit, __construct){
		/* o public*/

		/* qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				QLineEdit *QLineEdit_ptr = new QLineEdit((QWidget*) obj_z_0);
				PHP_QT_REGISTER(QLineEdit_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* oo public*/

		/* const QString& , qt_QWidget* parent,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {


			if(Z_TYPE_P(z_0) == IS_STRING){

			  QString *str = new QString("");
			  *str = QString(QString::fromUtf8(Z_STRVAL_P(z_0)));

			  zend_class_entry *ce;                                   
			  object_init_ex(z_0, QString_ce_ptr);
			  zend_rsrc_list_entry le;                            
			  le.ptr = str;
			  php_qt_register(z_0,le);                                 

			}


			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


//			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString") && obj_z_1->inherits("QWidget")) {
				QLineEdit *QLineEdit_ptr = new QLineEdit((const QString&) *obj_z_0, (QWidget*) obj_z_1);
				PHP_QT_REGISTER(QLineEdit_ptr);
				RETURN_NULL();
//			}
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  staticMetaObject
 *    flags:    s
 */
ZEND_METHOD(QLineEdit, staticMetaObject){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qObject
 *    flags:    
 */
ZEND_METHOD(QLineEdit, qObject){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  inputMethodQuery
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, inputMethodQuery){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			QVariant* return_object = new QVariant;
			// static?
			if(getThis() != NULL){
				*return_object = (QVariant) obj->inputMethodQuery((Qt::InputMethodQuery) Z_LVAL_P(z_0));
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  text
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, text){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->text();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  minimumSizeHint
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, minimumSizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QSize* return_object = new QSize;
			// static?
			if(getThis() != NULL){
				*return_object = (QSize) obj->minimumSizeHint();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  home
 *    flags:    
 */
ZEND_METHOD(QLineEdit, home){
		/* l public*/

		/* int mark,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->home((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  del
 *    flags:    
 */
ZEND_METHOD(QLineEdit, del){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->del();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorForward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorForward){
		/* ll public*/

		/* int mark, int steps,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->cursorForward((bool) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setDragEnabled
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setDragEnabled){
		/* l public*/

		/* int b,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setDragEnabled((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  qt_property
 *    flags:    v
 */
ZEND_METHOD(QLineEdit, qt_property){
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  echoMode
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, echoMode){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->echoMode());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setValidator
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setValidator){
		/* o public*/

		/* const QValidator* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QValidator")) {
				obj->setValidator((const QValidator*) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  hasSelectedText
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, hasSelectedText){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasSelectedText());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  hasAcceptableInput
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, hasAcceptableInput){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasAcceptableInput());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  paste
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, paste){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->paste();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  redo
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, redo){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->redo();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  copy
 *    flags:    cl
 */
ZEND_METHOD(QLineEdit, copy){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->copy();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  undo
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, undo){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->undo();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  displayText
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, displayText){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->displayText();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorWordForward
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorWordForward){
		/* l public*/

		/* int mark,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->cursorWordForward((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  event
 *    flags:    
 */
ZEND_METHOD(QLineEdit, event){
		/* o public*/

		/* qt_QEvent* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QEvent")) {
				RETURN_BOOL(obj->event((QEvent*) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  validator
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, validator){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			const QValidator ** return_object = new const QValidator *;
			// static?
			if(getThis() != NULL){
				*return_object = (const QValidator *) obj->validator();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QLineEdit, end){
		/* l public*/

		/* int mark,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->end((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isRedoAvailable
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isRedoAvailable){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isRedoAvailable());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cursorPositionAt
 *    flags:    
 */
ZEND_METHOD(QLineEdit, cursorPositionAt){
		/* l public*/

		/* const QPoint& pos,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			RETURN_LONG(obj->cursorPositionAt((const QPoint&) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  deselect
 *    flags:    
 */
ZEND_METHOD(QLineEdit, deselect){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->deselect();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setSelection
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setSelection){
		/* ll public*/

		/* int , int ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setSelection((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  selectedText
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, selectedText){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->selectedText();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isUndoAvailable
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isUndoAvailable){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isUndoAvailable());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  hasFrame
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, hasFrame){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasFrame());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setInputMask
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setInputMask){
		/* o public*/

		/* const QString& inputMask,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
				obj->setInputMask((const QString&) *obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  dragEnabled
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, dragEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->dragEnabled());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  cut
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, cut){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->cut();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setText
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, setText){
		/* o public_slots*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(!strcmp(Z_OBJCE_P(z_0)->name,"QString")) {
				obj->setText((const QString&) *obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  alignment
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, alignment){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->alignment());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  sizeHint
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, sizeHint){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QSize* return_object = new QSize;
			// static?
			if(getThis() != NULL){
				*return_object = (QSize) obj->sizeHint();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  setCursorPosition
 *    flags:    
 */
ZEND_METHOD(QLineEdit, setCursorPosition){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			obj->setCursorPosition((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  createStandardContextMenu
 *    flags:    
 */
ZEND_METHOD(QLineEdit, createStandardContextMenu){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			QMenu ** return_object = new QMenu *;
			// static?
			if(getThis() != NULL){
				*return_object = (QMenu *) obj->createStandardContextMenu();
			} else {
				php_error(E_ERROR,"Object not found");
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  backspace
 *    flags:    
 */
ZEND_METHOD(QLineEdit, backspace){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->backspace();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  selectAll
 *    flags:    l
 */
ZEND_METHOD(QLineEdit, selectAll){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			obj->selectAll();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  maxLength
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, maxLength){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_LONG(obj->maxLength());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isModified
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isModified){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isModified());
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  trUtf8
 *    flags:    s
 */
ZEND_METHOD(QLineEdit, trUtf8){
		/* ss public*/

		/* const char* , const char* ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING && Z_TYPE_P(z_1) == IS_STRING){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();


			QString* return_object = new QString;
			// static?
			if(getThis() != NULL){
				*return_object = (QString) obj->trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			} else {
				*return_object = (QString) QLineEdit::trUtf8( (const char*) Z_STRVAL_P(z_0) , (const char*) Z_STRVAL_P(z_1));
			}
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QLineEdit_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QLineEdit */
/*
 *    function  isReadOnly
 *    flags:    c
 */
ZEND_METHOD(QLineEdit, isReadOnly){
	if (ZEND_NUM_ARGS() == 0){
			QLineEdit *obj = (QLineEdit*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isReadOnly());
	}
}


PHP_QT_DESTRUCT(QLineEdit);

