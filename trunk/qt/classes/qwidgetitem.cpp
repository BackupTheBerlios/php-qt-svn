/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QWidgetItem.cpp - QWidgetItem PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QWidgetItem>
#include <QMetaMethod>
class QWidgetItem_php_qt:public QWidgetItem
{

public:
  QWidgetItem_php_qt(zval * zend_ptr, QWidget * ws0);


  zval *zend_ptr;
};

QWidgetItem_php_qt::QWidgetItem_php_qt(zval * zend_ptr, QWidget * ws0):QWidgetItem(ws0)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method hasHeightForWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, hasHeightForWidth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'hasHeightForWidth' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->hasHeightForWidth());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWidgetItem::hasHeightForWidth(...) ");
}

/*!
 * method widget
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	v
 */

/*!
 * method expandingDirections
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientations
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, expandingDirections)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'expandingDirections' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->expandingDirections());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWidgetItem::expandingDirections(...) ");
}

/*!
 * method QWidgetItem
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget *ws0s0
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QWidgetItem, __construct)
{
  ///QWidget *ws0s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QWidget
      if (inherits(Z_OBJCE_P(arg_0), 71)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QWidget *ws0s0,
        QWidget *
          cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
        QWidgetItem_php_qt *
          selfpointer = new QWidgetItem_php_qt(getThis(), (QWidget *) cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QWidgetItem::QWidgetItem(...) ");
}

/*!
 * method geometry
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QRect
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, geometry)
{
  ///
#ifdef PHP_QT_QRect             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'geometry' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QRect *
        return_object = new QRect;

      *return_object = static_cast < QRect > (selfpointer->geometry());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWidgetItem::geometry(...) ");
}

/*!
 * method heightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, heightForWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'heightForWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->heightForWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QWidgetItem::heightForWidth(...) ");
}

/*!
 * method isEmpty
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, isEmpty)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isEmpty' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isEmpty());
    }
  }
  php_error(E_ERROR, "could not parse argument in QWidgetItem::isEmpty(...) ");
}

/*!
 * method setGeometry
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect &s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QWidgetItem, setGeometry)
{
  ///const QRect &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setGeometry' is not static");
          RETURN_NULL();
        }
        /// try const QRect &s0,
        QWidgetItem *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
        }
        QRect *
          cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setGeometry((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QWidgetItem::setGeometry(...) ");
}

/*!
 * method minimumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, minimumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'minimumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->minimumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWidgetItem::minimumSize(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWidgetItem::sizeHint(...) ");
}

/*!
 * method maximumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QWidgetItem, maximumSize)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'maximumSize' is not static");
        RETURN_NULL();
      }
      /// try 
      QWidgetItem *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QWidgetItem * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->maximumSize());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QWidgetItem::maximumSize(...) ");
}
