/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLayoutItem.cpp - QLayoutItem PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QLayoutItem>
/// DEBUG:destructor skipped.
/*!
 * method expandingDirections
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientations
 * @flags	cpv
 */

/*!
 * method isEmpty
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	cpv
 */

/*!
 * method geometry
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QRect
 * @flags	cpv
 */

/*!
 * method setGeometry
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect&
 * 
 * @access	public
 * @return	void
 * @flags	pv
 */

/*!
 * method minimumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	cpv
 */

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	cpv
 */

/*!
 * method maximumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	cpv
 */

#include <QRect>
#include <QMetaMethod>
class QLayoutItem_php_qt:public QLayoutItem
{

public:
  QLayoutItem_php_qt(zval * zend_ptr, Qt::Alignment alignment = 0);


  zval *zend_ptr;
  virtual Qt::Orientations expandingDirections() const; // pure 

  virtual bool isEmpty() const; // pure 

  virtual QRect geometry() const;       // pure 

  virtual void setGeometry(const QRect & s0);   // pure 

  virtual QSize minimumSize() const;    // pure 

  virtual QSize sizeHint() const;       // pure 

  virtual QSize maximumSize() const;    // pure 
};

QLayoutItem_php_qt::QLayoutItem_php_qt(zval * zend_ptr, Qt::Alignment alignment):QLayoutItem(alignment)
{
  this->zend_ptr = zend_ptr;
}

// virtual, pure 

Qt::Orientations QLayoutItem_php_qt::expandingDirections() const
{
}

// virtual, pure 

bool
QLayoutItem_php_qt::isEmpty() const
{
}

// virtual, pure 

QRect
QLayoutItem_php_qt::geometry() const
{
}

// virtual, pure 

void
QLayoutItem_php_qt::setGeometry(const QRect & s0)
{
}

// virtual, pure 

QSize
QLayoutItem_php_qt::minimumSize() const
{
}

// virtual, pure 

QSize
QLayoutItem_php_qt::sizeHint() const
{
}

// virtual, pure 

QSize
QLayoutItem_php_qt::maximumSize() const
{
}

/*!
 * method layout
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QLayout *
 * @flags	v
 */

/*!
 * method spacerItem
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSpacerItem *
 * @flags	v
 */

/*!
 * method QLayoutItem
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::Alignment alignment = 0s0
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QLayoutItem, __construct)
{
  ///Qt::Alignment alignment = 0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QLayoutItem_php_qt *selfpointer = new QLayoutItem_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try Qt::Alignment alignment = 0s0,
      QLayoutItem_php_qt *selfpointer = new QLayoutItem_php_qt(getThis(), (Qt::Alignment) Z_LVAL_P(arg_0));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  php_error(E_ERROR, "could not parse argument in QLayoutItem::QLayoutItem(...) ");
}

/*!
 * method setAlignment
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::Alignment as0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QLayoutItem, setAlignment)
{
  ///Qt::Alignment as0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setAlignment' is not static");
        RETURN_NULL();
      }
      /// try Qt::Alignment as0,
      QLayoutItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLayoutItem * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setAlignment((Qt::Alignment) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QLayoutItem::setAlignment(...) ");
}

/*!
 * method heightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	cv
 */

/*!
 * method hasHeightForWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	cv
 */

/*!
 * method minimumHeightForWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	int
 * @flags	cv
 */

/*!
 * method widget
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget *
 * @flags	v
 */

/*!
 * method expandingDirections
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Orientations
 * @flags	cpv
 */

/*!
 * method isEmpty
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	cpv
 */

/*!
 * method geometry
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QRect
 * @flags	cpv
 */

/*!
 * method invalidate
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	v
 */

/*!
 * method setGeometry
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect &s0s0
 * 
 * @access	public
 * @return	void
 * @flags	pv
 */

/*!
 * method minimumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	cpv
 */

/*!
 * method alignment
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::Alignment
 * @flags	c
 */

ZEND_METHOD(QLayoutItem, alignment)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'alignment' is not static");
        RETURN_NULL();
      }
      /// try 
      QLayoutItem *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QLayoutItem * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->alignment());
    }
  }
  php_error(E_ERROR, "could not parse argument in QLayoutItem::alignment(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	cpv
 */

/*!
 * method maximumSize
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	cpv
 */
