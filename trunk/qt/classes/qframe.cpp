/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QFrame.cpp - QFrame PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QFrame>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QFrame_php_qt:public QFrame
{

public:
  QFrame_php_qt(zval * zend_ptr, QWidget * parent = 0, Qt::WFlags f = 0);


  zval *zend_ptr;
  const QMetaObject *metaObject() const;
  int qt_metacall(QMetaObject::Call _c, int _id, void **_a);
};

QFrame_php_qt::QFrame_php_qt(zval * zend_ptr, QWidget * parent, Qt::WFlags f):QFrame(parent, f)
{
  this->zend_ptr = zend_ptr;
// for future use:                   PHP_QT_REGISTER_MOC(php_qt_getMocData(this->zend_ptr,"QFrame",&staticMetaObject));
}

PHP_QT_MOC(QFrame);

/*!
 * method tr
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QFrame, tr)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QFrame::tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QFrame::tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->tr((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QFrame::tr(...) ");
}

/*!
 * method qt_invoke
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method QFrame
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QWidget * parent = 0s0
 * @param	 Qt::WFlags f = 0s1
 * 
 * overloaded args:
 * @param	QFramePrivate &dd
 * @param	 QWidget* parent = 0
 * @param	 Qt::WFlags f = 0
 * 
 * overloaded args:
 * @param	const QFrame &
 * 
 * @access	public
 * @return	
 * @flags	t
 */

ZEND_METHOD(QFrame, __construct)
{
  ///QWidget * parent = 0s0, Qt::WFlags f = 0s1
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame_php_qt *
        selfpointer = new QFrame_php_qt(getThis());

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget * parent = 0s0,
      QWidget *
        cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QFrame_php_qt *
        selfpointer = new QFrame_php_qt(getThis(), (QWidget *) cpp_arg_0);

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method '__construct' is not static");
        RETURN_NULL();
      }
      /// try QWidget * parent = 0s0, Qt::WFlags f = 0s1,
      QWidget *
        cpp_arg_0 = static_cast < QWidget * >(php_qt_fetch(arg_0));
      QFrame_php_qt *
        selfpointer = new QFrame_php_qt(getThis(), (QWidget *) cpp_arg_0, (Qt::WFlags) Z_LVAL_P(arg_1));

      PHP_QT_REGISTER(selfpointer);
      RETURN_NULL();
    }
  }
  ///QFramePrivate &dd, QWidget* parent = 0, Qt::WFlags f = 0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QFramePrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QFramePrivate &dd,
        QFramePrivate *
          cpp_arg_0 = static_cast < QFramePrivate * >(php_qt_fetch(arg_0));
        QFrame_php_qt *
          selfpointer = new QFrame_php_qt(getThis(), (QFramePrivate &) * cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT) {
#ifdef PHP_QT_QFramePrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QFramePrivate &dd, QWidget* parent = 0,
        QFramePrivate *
          cpp_arg_0 = static_cast < QFramePrivate * >(php_qt_fetch(arg_0));
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QFrame_php_qt *
          selfpointer = new QFrame_php_qt(getThis(), (QFramePrivate &) * cpp_arg_0, (QWidget *) cpp_arg_1);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  if (ZEND_NUM_ARGS() == 3) {
    PHP_QT_FETCH_3_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_OBJECT && Z_TYPE_P(arg_2) == IS_LONG) {
#ifdef PHP_QT_QFramePrivate
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
/// overloaded method is protected, skipped.
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try QFramePrivate &dd, QWidget* parent = 0, Qt::WFlags f = 0,
        QFramePrivate *
          cpp_arg_0 = static_cast < QFramePrivate * >(php_qt_fetch(arg_0));
        QWidget *
          cpp_arg_1 = static_cast < QWidget * >(php_qt_fetch(arg_1));
        QFrame_php_qt *
          selfpointer = new QFrame_php_qt(getThis(), (QFramePrivate &) * cpp_arg_0, (QWidget *) cpp_arg_1, (Qt::WFlags) Z_LVAL_P(arg_2));

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QFrame &
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QFrame
      if (inherits(Z_OBJCE_P(arg_0), 25)) {
/// method is private, skip
        php_error(E_ERROR, "QFrame::__construct(...) cannot be called with 'const QFrame &,'.");
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::QFrame(...) ");
}

/*!
 * method frameShadow
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Shadow
 * @flags	c
 */

ZEND_METHOD(QFrame, frameShadow)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type Shadow");
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::frameShadow(...) ");
}

/*!
 * method qt_cast
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char * s0
 * 
 * @access	public
 * @return	void*
 * @flags	v
 */

/*!
 * method metaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject *
 * @flags	cv
 */

/*!
 * method drawFrame
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QPainter *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method qt_emit
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 QUObject * s1
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method className
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const char *
 * @flags	cv
 */

/*!
 * method setFrameShadow
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Shadow Shadows0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QFrame, setFrameShadow)
{
// notice: unknown argument Shadow Shadows0, skipped
  php_error(E_ERROR, "could not parse argument in QFrame::setFrameShadow(...) ");
}

/*!
 * method frameStyle
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QFrame, frameStyle)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'frameStyle' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->frameStyle());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::frameStyle(...) ");
}

/*!
 * method staticMetaObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QMetaObject*
 * @flags	s
 */

ZEND_METHOD(QFrame, staticMetaObject)
{
  ///
#ifdef PHP_QT_QMetaObject       // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;

      if (getThis() == NULL) {
        le.ptr = static_cast < QMetaObject * >(QFrame::staticMetaObject());
      } else {
        le.ptr = static_cast < QMetaObject * >(selfpointer->staticMetaObject());
      }
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QFrame::staticMetaObject(...) ");
}

/*!
 * method qObject
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QObject*
 * @flags	
 */

/*!
 * method setFrameShape
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Shape Shapes0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QFrame, setFrameShape)
{
// notice: unknown argument Shape Shapes0, skipped
  php_error(E_ERROR, "could not parse argument in QFrame::setFrameShape(...) ");
}

/*!
 * method setFrameStyle
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QFrame, setFrameStyle)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setFrameStyle' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setFrameStyle((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::setFrameStyle(...) ");
}

/*!
 * method setMidLineWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QFrame, setMidLineWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setMidLineWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setMidLineWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::setMidLineWidth(...) ");
}

/*!
 * method qt_property
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 int  ints0
 * @param	 int  ints1
 * @param	 QVariant * s2
 * 
 * @access	public
 * @return	bool
 * @flags	v
 */

/*!
 * method frameWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QFrame, frameWidth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'frameWidth' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->frameWidth());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::frameWidth(...) ");
}

/*!
 * method midLineWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QFrame, midLineWidth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'midLineWidth' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->midLineWidth());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::midLineWidth(...) ");
}

/*!
 * method frameShape
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Shape
 * @flags	c
 */

ZEND_METHOD(QFrame, frameShape)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      php_error(E_ERROR, "unsupported return type Shape");
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::frameShape(...) ");
}

/*!
 * method setFrameRect
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRect &s0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QFrame, setFrameRect)
{
  ///const QRect &s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method 'setFrameRect' is not static");
          RETURN_NULL();
        }
        /// try const QRect &s0,
        QFrame *
          selfpointer;

        if (getThis() != NULL) {
          selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
        }
        QRect *
          cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));

        RETURN_VOID(selfpointer->setFrameRect((const QRect &)*cpp_arg_0));
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::setFrameRect(...) ");
}

/*!
 * method lineWidth
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QFrame, lineWidth)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'lineWidth' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->lineWidth());
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::lineWidth(...) ");
}

/*!
 * method frameRect
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QRect
 * @flags	c
 */

ZEND_METHOD(QFrame, frameRect)
{
  ///
#ifdef PHP_QT_QRect             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'frameRect' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QRect *
        return_object = new QRect;

      *return_object = static_cast < QRect > (selfpointer->frameRect());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QFrame::frameRect(...) ");
}

/*!
 * method paintEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QPaintEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method changeEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	QEvent *s0
 * 
 * @access	protected
 * @return	void
 * @flags	
 */

/*!
 * method setLineWidth
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int ints0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QFrame, setLineWidth)
{
  ///int ints0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setLineWidth' is not static");
        RETURN_NULL();
      }
      /// try int ints0,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setLineWidth((int)Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QFrame::setLineWidth(...) ");
}

/*!
 * method sizeHint
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QSize
 * @flags	c
 */

ZEND_METHOD(QFrame, sizeHint)
{
  ///
#ifdef PHP_QT_QSize             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'sizeHint' is not static");
        RETURN_NULL();
      }
      /// try 
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QSize *
        return_object = new QSize;

      *return_object = static_cast < QSize > (selfpointer->sizeHint());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QFrame::sizeHint(...) ");
}

/*!
 * method trUtf8
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	 const char *s0
 * @param	 const char * = 0 s1
 * 
 * @access	public
 * @return	QString
 * @flags	s
 */

ZEND_METHOD(QFrame, trUtf8)
{
  /// const char *s0, const char * = 0 s1
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      /// try  const char *s0,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QFrame::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
  if (ZEND_NUM_ARGS() == 2) {
    PHP_QT_FETCH_2_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING && Z_TYPE_P(arg_1) == IS_STRING) {
      /// try  const char *s0, const char * = 0 s1,
      QFrame *
        selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QFrame * >(PHP_QT_FETCH());
      }
      zend_class_entry *
        ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry
        le;
      QString *
        return_object = new QString;

      if (getThis() == NULL) {
        *return_object = static_cast < QString > (QFrame::trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } else {
        *return_object = static_cast < QString > (selfpointer->trUtf8((const char *)&Z_STRVAL_P(arg_0)[0], (const char *)&Z_STRVAL_P(arg_1)[0]));
      } le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QFrame::trUtf8(...) ");
}
