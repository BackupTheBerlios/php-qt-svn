/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPaintEvent.cpp - QPaintEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QPaintEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QPaintEvent_php_qt:public QPaintEvent
{

public:
  QPaintEvent_php_qt(zval * zend_ptr, const QRegion & paintRegions0);
    QPaintEvent_php_qt(zval * zend_ptr, const QRect & paintRects0);


  zval *zend_ptr;
};
QPaintEvent_php_qt::QPaintEvent_php_qt(zval * zend_ptr, const QRegion & paintRegions0):
QPaintEvent(paintRegions0)
{
  this->zend_ptr = zend_ptr;
}
QPaintEvent_php_qt::QPaintEvent_php_qt(zval * zend_ptr, const QRect & paintRects0):
QPaintEvent(paintRects0)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method region
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QRegion &
 * @flags	c
 */

ZEND_METHOD(QPaintEvent, region)
{
  ///
#ifdef PHP_QT_QRegion           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'region' is not static");
        RETURN_NULL();
      }
      /// try 
      QPaintEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPaintEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QRegion & >(selfpointer->region());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPaintEvent::region(...) ");
}

/*!
 * method QPaintEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QRegion & paintRegions0s0
 * 
 * overloaded args:
 * @param	const QRect &paintRects0
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QPaintEvent, __construct)
{
  ///const QRegion & paintRegions0s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRegion
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QRegion & paintRegions0s0,
        QRegion *cpp_arg_0 = static_cast < QRegion * >(php_qt_fetch(arg_0));
        QPaintEvent_php_qt *selfpointer = new QPaintEvent_php_qt(getThis(), (const QRegion &)*cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  ///const QRect &paintRects0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT) {
#ifdef PHP_QT_QRect
      if (inherits(Z_OBJCE_P(arg_0), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QRect &paintRects0,
        QRect *cpp_arg_0 = static_cast < QRect * >(php_qt_fetch(arg_0));
        QPaintEvent_php_qt *selfpointer = new QPaintEvent_php_qt(getThis(), (const QRect &)*cpp_arg_0);

        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

    }
  }
  php_error(E_ERROR, "could not parse argument in QPaintEvent::QPaintEvent(...) ");
}

/*!
 * method rect
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QRect &
 * @flags	c
 */

ZEND_METHOD(QPaintEvent, rect)
{
  ///
#ifdef PHP_QT_QRect             // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'rect' is not static");
        RETURN_NULL();
      }
      /// try 
      QPaintEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QPaintEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QRect & >(selfpointer->rect());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QPaintEvent::rect(...) ");
}
