/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDate.cpp - QDate PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QDate>
#include "../php_qt.h"


/*********************************
 *    class     QDate */
/*
 *    function  longDayName
 *    flags:    s
 */
ZEND_METHOD(QDate, longDayName){
		/* l public*/

		/* int weekday,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QString return_object = (QString) obj->longDayName((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  dayOfWeek
 *    flags:    c
 */
ZEND_METHOD(QDate, dayOfWeek){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->dayOfWeek());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  daysInMonth
 *    flags:    c
 */
ZEND_METHOD(QDate, daysInMonth){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->daysInMonth());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  month
 *    flags:    c
 */
ZEND_METHOD(QDate, month){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->month());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  isValid
 *    flags:    c
 */
ZEND_METHOD(QDate, isValid){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isValid());
	}
		/* lll public*/

		/* int y, int m, int d,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


			RETURN_BOOL(obj->isValid((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2)));
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  setYMD
 *    flags:    
 */
ZEND_METHOD(QDate, setYMD){
		/* lll public*/

		/* int y, int m, int d,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


			RETURN_BOOL(obj->setYMD((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2)));
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  shortMonthName
 *    flags:    s
 */
ZEND_METHOD(QDate, shortMonthName){
		/* l public*/

		/* int month,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QString return_object = (QString) obj->shortMonthName((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  toString
 *    flags:    c
 */
ZEND_METHOD(QDate, toString){
		/* l public*/

		/* int f,  */
		/* o public*/

		/* const QString& format,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QString return_object = (QString) obj->toString((Qt::DateFormat) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString return_object = (QString) obj->toString((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  isLeapYear
 *    flags:    s
 */
ZEND_METHOD(QDate, isLeapYear){
		/* l public*/

		/* int year,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


			RETURN_BOOL(obj->isLeapYear((int) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  fromJulianDay
 *    flags:    s
 */
ZEND_METHOD(QDate, fromJulianDay){
		/* l public*/

		/* int jd,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QDate return_object = (QDate) obj->fromJulianDay((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  currentDate
 *    flags:    s
 */
ZEND_METHOD(QDate, currentDate){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
				QDate return_object = (QDate) obj->currentDate();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  addDays
 *    flags:    c
 */
ZEND_METHOD(QDate, addDays){
		/* l public*/

		/* int days,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QDate return_object = (QDate) obj->addDays((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  day
 *    flags:    c
 */
ZEND_METHOD(QDate, day){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->day());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  gregorianToJulian
 *    flags:    s
 */
ZEND_METHOD(QDate, gregorianToJulian){
		/* lll public*/

		/* int y, int m, int d,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


			RETURN_LONG(obj->gregorianToJulian((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2)));
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  longMonthName
 *    flags:    s
 */
ZEND_METHOD(QDate, longMonthName){
		/* l public*/

		/* int month,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QString return_object = (QString) obj->longMonthName((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  julianToGregorian
 *    flags:    s
 */
ZEND_METHOD(QDate, julianToGregorian){
		/* llll public*/

		/* unsigned int jd, int y, int m, int d,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


			obj->julianToGregorian((uint) Z_LVAL_P(z_0) ,(int&) Z_LVAL_P(z_1) ,(int&) Z_LVAL_P(z_2) ,(int&) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  QDate
 *    flags:    
 */
ZEND_METHOD(QDate, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QDate *QDate_ptr = new QDate();
				PHP_QT_REGISTER(QDate_ptr);
				RETURN_NULL();
	}
		/* lll public*/

		/* int y, int m, int d,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){


			QDate *QDate_ptr = new QDate((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2));
				PHP_QT_REGISTER(QDate_ptr);
				RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  shortDayName
 *    flags:    s
 */
ZEND_METHOD(QDate, shortDayName){
		/* l public*/

		/* int weekday,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QString return_object = (QString) obj->shortDayName((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  fromString
 *    flags:    s
 */
ZEND_METHOD(QDate, fromString){
		/* ol public*/

		/* const QString& s, int f,  */
		/* oo public*/

		/* const QString& s, const QString& format,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QDate return_object = (QDate) obj->fromString((const QString&) obj_z_0, (Qt::DateFormat) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
					QDate return_object = (QDate) obj->fromString((const QString&) obj_z_0, (const QString&) obj_z_1);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  dayOfYear
 *    flags:    c
 */
ZEND_METHOD(QDate, dayOfYear){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->dayOfYear());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  weekNumber
 *    flags:    c
 */
ZEND_METHOD(QDate, weekNumber){
		/* l public*/

		/* int* yearNum,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


			RETURN_LONG(obj->weekNumber((int*) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  addMonths
 *    flags:    c
 */
ZEND_METHOD(QDate, addMonths){
		/* l public*/

		/* int months,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QDate return_object = (QDate) obj->addMonths((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  toJulianDay
 *    flags:    c
 */
ZEND_METHOD(QDate, toJulianDay){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->toJulianDay());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  addYears
 *    flags:    c
 */
ZEND_METHOD(QDate, addYears){
		/* l public*/

		/* int years,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDate *obj = (QDate*) PHP_QT_FETCH();


				QDate return_object = (QDate) obj->addYears((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDate_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  daysTo
 *    flags:    c
 */
ZEND_METHOD(QDate, daysTo){
		/* o public*/

		/* const QDate& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QDate") {
				RETURN_LONG(obj->daysTo((const QDate&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  isNull
 *    flags:    c
 */
ZEND_METHOD(QDate, isNull){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isNull());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  year
 *    flags:    c
 */
ZEND_METHOD(QDate, year){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->year());
	}
}

/*********************************
 *    class     QDate */
/*
 *    function  daysInYear
 *    flags:    c
 */
ZEND_METHOD(QDate, daysInYear){
	if (ZEND_NUM_ARGS() == 0){
			QDate *obj = (QDate*) PHP_QT_FETCH();
			RETURN_LONG(obj->daysInYear());
	}
}


PHP_QT_DESTRUCT(QDate);

