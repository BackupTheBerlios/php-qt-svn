/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QPainter.cpp - QPainter PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QPainter>
#include "../php_qt.h"

#include <QPainterPath>


/*		public enumRenderHint:long {
			Antialiasing = 0x01,
			TextAntialiasing = 0x02,
			SmoothPixmapTransform = 0x04,
		}
*/

/*		public enumCompositionMode:long {
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
			CompositionMode = 0,
		}
*/
/*********************************
 *    class     QPainter */
/*
 *    function  eraseRect
 *    flags:    
 */
ZEND_METHOD(QPainter, eraseRect){
		/* o public*/

		/* const QRectF& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->eraseRect((const QRectF&) obj_z_0);
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->eraseRect((const QRect&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* llll public*/

		/* int x, int y, int w, int h,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->eraseRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipPath
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipPath){
		/* ll public*/

		/* const QPainterPath& path, int op,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setClipPath((const QPainterPath&) Z_LVAL_P(z_0) ,(Qt::ClipOperation) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  matrixEnabled
 *    flags:    c
 */
ZEND_METHOD(QPainter, matrixEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->matrixEnabled());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  shear
 *    flags:    
 */
ZEND_METHOD(QPainter, shear){
		/* ll public*/

		/* double sh, double sv,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->shear((qreal) Z_LVAL_P(z_0) ,(qreal) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  save
 *    flags:    
 */
ZEND_METHOD(QPainter, save){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->save();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  resetMatrix
 *    flags:    
 */
ZEND_METHOD(QPainter, resetMatrix){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->resetMatrix();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  initFrom
 *    flags:    
 */
ZEND_METHOD(QPainter, initFrom){
		/* o public*/

		/* const QWidget* widget,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QWidget")) {
				obj->initFrom((const QWidget*) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fontInfo
 *    flags:    c
 */
ZEND_METHOD(QPainter, fontInfo){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QFontInfo return_object = (QFontInfo) obj->fontInfo();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setLayoutDirection
 *    flags:    
 */
ZEND_METHOD(QPainter, setLayoutDirection){
		/* l public*/

		/* int direction,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setLayoutDirection((Qt::LayoutDirection) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBrushOrigin
 *    flags:    
 */
ZEND_METHOD(QPainter, setBrushOrigin){
		/* l public*/

		/* const QPoint& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setBrushOrigin((const QPoint&) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
		/* ll public*/

		/* int x, int y,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setBrushOrigin((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  pen
 *    flags:    c
 */
ZEND_METHOD(QPainter, pen){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				const QPen & return_object = (const QPen &) obj->pen();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRects
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRects){
		/* ol public*/

		/* const QRectF* rects, int rectCount,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawRects((const QRectF*) obj_z_0, (int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPath
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPath){
		/* l public*/

		/* const QPainterPath& path,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPath((const QPainterPath&) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fillPath
 *    flags:    
 */
ZEND_METHOD(QPainter, fillPath){
		/* lo public*/

		/* const QPainterPath& path, const QBrush& brush,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QBrush")) {
				obj->fillPath((const QPainterPath&) Z_LVAL_P(z_0), (const QBrush&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  rotate
 *    flags:    
 */
ZEND_METHOD(QPainter, rotate){
		/* l public*/

		/* double a,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->rotate((qreal) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPie
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPie){
		/* oll public*/

		/* const QRectF& rect, int a, int alen,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawPie((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->drawPie((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
		/* llllll public*/

		/* int x, int y, int w, int h, int a, int alen,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPie((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  translate
 *    flags:    
 */
ZEND_METHOD(QPainter, translate){
		/* l public*/

		/* const QPointF& offset,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->translate((const QPointF&) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
		/* ll public*/

		/* double dx, double dy,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->translate((qreal) Z_LVAL_P(z_0) ,(qreal) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setCompositionMode
 *    flags:    
 */
ZEND_METHOD(QPainter, setCompositionMode){
		/* l public*/

		/* QPainter::CompositionMode mode,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setCompositionMode((QPainter::CompositionMode) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setWindow
 *    flags:    
 */
ZEND_METHOD(QPainter, setWindow){
		/* o public*/

		/* const QRect& window,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->setWindow((const QRect&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* llll public*/

		/* int x, int y, int w, int h,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setWindow((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fontMetrics
 *    flags:    c
 */
ZEND_METHOD(QPainter, fontMetrics){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QFontMetrics return_object = (QFontMetrics) obj->fontMetrics();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPixmap
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPixmap){
		/* oo public*/

		/* const QRect& r, const QPixmap& pm,  */
		/* lo public*/

		/* const QPointF& p, const QPixmap& pm,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QRect" && obj_z_1->inherits("QPixmap")) {
				obj->drawPixmap((const QRect&) obj_z_0, (const QPixmap&) obj_z_1);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QPixmap")) {
				obj->drawPixmap((const QPointF&) Z_LVAL_P(z_0), (const QPixmap&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
		/* loo public*/

		/* const QPointF& p, const QPixmap& pm, const QRectF& sr,  */
		/* ooo public*/

		/* const QRectF& targetRect, const QPixmap& pixmap, const QRectF& sourceRect,  */
		/* llo public*/

		/* int x, int y, const QPixmap& pm,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(obj_z_1->inherits("QPixmap") && Z_OBJCE_P(z_2)->name == "QRectF") {
				obj->drawPixmap((const QPointF&) Z_LVAL_P(z_0), (const QPixmap&) obj_z_1, (const QRectF&) obj_z_2);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QPixmap") && Z_OBJCE_P(z_2)->name == "QRectF") {
				obj->drawPixmap((const QRectF&) obj_z_0, (const QPixmap&) obj_z_1, (const QRectF&) obj_z_2);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(obj_z_2->inherits("QPixmap")) {
				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QPixmap&) obj_z_2);
			RETURN_NULL();
			}
			}
		}
	}
		/* llllo public*/

		/* int x, int y, int w, int h, const QPixmap& pm,  */

	if (ZEND_NUM_ARGS() == 5){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);


			if(obj_z_4->inherits("QPixmap")) {
				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QPixmap&) obj_z_4);
			RETURN_NULL();
			}
			}
		}
	}
		/* llollll public*/

		/* int x, int y, const QPixmap& pm, int sx, int sy, int sw, int sh,  */

	if (ZEND_NUM_ARGS() == 7){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		zval *z_6; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(obj_z_2->inherits("QPixmap")) {
				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QPixmap&) obj_z_2, (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6));
			RETURN_NULL();
			}
			}
		}
	}
		/* llllollll public*/

		/* int x, int y, int w, int h, const QPixmap& pm, int sx, int sy, int sw, int sh,  */

	if (ZEND_NUM_ARGS() == 9){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		zval *z_6; // define ZVAL
		zval *z_7; // define ZVAL
		zval *z_8; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6, &z_7, &z_8) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG && Z_TYPE_P(z_7) == IS_LONG && Z_TYPE_P(z_8) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);


			if(obj_z_4->inherits("QPixmap")) {
				obj->drawPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QPixmap&) obj_z_4, (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6), (int) Z_LVAL_P(z_7), (int) Z_LVAL_P(z_8));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPolyline
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPolyline){
		/* o public*/

		/* const QPolygonF& polyline,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
				obj->drawPolyline((const QPolygonF&) obj_z_0);
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
				obj->drawPolyline((const QPolygon&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* ll public*/

		/* const QPointF* points, int pointCount,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPolyline((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  deviceMatrix
 *    flags:    c
 */
ZEND_METHOD(QPainter, deviceMatrix){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				const QMatrix & return_object = (const QMatrix &) obj->deviceMatrix();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawLine
 *    flags:    
 */
ZEND_METHOD(QPainter, drawLine){
		/* o public*/

		/* const QLineF& line,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QLineF")) {
				obj->drawLine((const QLineF&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* ll public*/

		/* const QPoint& p1, const QPoint& p2,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawLine((const QPoint&) Z_LVAL_P(z_0) ,(const QPoint&) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
		/* llll public*/

		/* int x1, int y1, int x2, int y2,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawLine((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  fillRect
 *    flags:    
 */
ZEND_METHOD(QPainter, fillRect){
		/* oo public*/

		/* const QRectF& , const QBrush& ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QBrush")) {
				obj->fillRect((const QRectF&) obj_z_0, (const QBrush&) obj_z_1);
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect" && obj_z_1->inherits("QBrush")) {
				obj->fillRect((const QRect&) obj_z_0, (const QBrush&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
		/* llllo public*/

		/* int x, int y, int w, int h, const QBrush& ,  */

	if (ZEND_NUM_ARGS() == 5){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);


			if(obj_z_4->inherits("QBrush")) {
				obj->fillRect((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QBrush&) obj_z_4);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  boundingRect
 *    flags:    
 */
ZEND_METHOD(QPainter, boundingRect){
		/* ooo public*/

		/* const QRectF& rect, const QString& text, const QTextOption& o,  */
		/* olo public*/

		/* const QRectF& rect, int flags, const QString& text,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_1)->name == "QString" && obj_z_2->inherits("QTextOption")) {
				obj->boundingRect((const QRectF&) obj_z_0, (const QString&) obj_z_1, (const QTextOption&) obj_z_2);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_2)->name == "QString") {
/*					QRect return_object = (QRect) obj->boundingRect((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
*/				return;                                             
			}
			if(Z_OBJCE_P(z_0)->name == "QRect" && Z_OBJCE_P(z_2)->name == "QString") {
					QRect return_object = (QRect) obj->boundingRect((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
		/* lllllo public*/

		/* int x, int y, int w, int h, int flags, const QString& text,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_5 = (QObject*) php_qt_fetch(z_5);


			if(Z_OBJCE_P(z_5)->name == "QString") {
					QRect return_object = (QRect) obj->boundingRect((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (const QString&) obj_z_5);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipRect
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipRect){
		/* ol public*/

		/* const QRectF& , int op,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->setClipRect((const QRectF&) obj_z_0, (Qt::ClipOperation) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
		}
	}
		/* lllll public*/

		/* int x, int y, int w, int h, int op,  */

	if (ZEND_NUM_ARGS() == 5){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzz", &z_0, &z_1, &z_2, &z_3, &z_4) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setClipRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(Qt::ClipOperation) Z_LVAL_P(z_4));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawImage
 *    flags:    
 */
ZEND_METHOD(QPainter, drawImage){
NOT_YET_IMPLEMENTED
		/* oo public*/

		/* const QRectF& r, const QImage& image,  */
		/* lo public*/

		/* const QPointF& p, const QImage& image,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QImage")) {
				obj->drawImage((const QRectF&) obj_z_0, (const QImage&) obj_z_1);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QImage")) {
				obj->drawImage((const QPointF&) Z_LVAL_P(z_0), (const QImage&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
		/* looo public*/

		/* const QPointF& p, const QImage& image, const QRectF& sr, Qt::ImageConversionFlags flags,  */
		/* oooo public*/

		/* const QRectF& targetRect, const QImage& image, const QRectF& sourceRect, Qt::ImageConversionFlags flags,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);


			if(obj_z_1->inherits("QImage") && Z_OBJCE_P(z_2)->name == "QRectF" && obj_z_3->inherits("Qt::ImageConversionFlags")) {
//				obj->drawImage((const QPointF&) Z_LVAL_P(z_0), (const QImage&) obj_z_1, (const QRectF&) obj_z_2, (Qt::ImageConversionFlags) obj_z_3);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QImage") && Z_OBJCE_P(z_2)->name == "QRectF" && obj_z_3->inherits("Qt::ImageConversionFlags")) {
//				obj->drawImage((const QRectF&) obj_z_0, (const QImage&) obj_z_1, (const QRectF&) obj_z_2, (Qt::ImageConversionFlags) obj_z_3);
			RETURN_NULL();
			}
			}
		}
	}
		/* llollllo public*/

		/* int x, int y, const QImage& image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags,  */

	if (ZEND_NUM_ARGS() == 8){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		zval *z_6; // define ZVAL
		zval *z_7; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6, &z_7) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG && Z_TYPE_P(z_7) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
			QObject* obj_z_7 = (QObject*) php_qt_fetch(z_7);


			if(obj_z_2->inherits("QImage") && obj_z_7->inherits("Qt::ImageConversionFlags")) {
//				obj->drawImage((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QImage&) obj_z_2, (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6), (Qt::ImageConversionFlags) obj_z_7);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawTiledPixmap
 *    flags:    
 */
ZEND_METHOD(QPainter, drawTiledPixmap){
		/* ool public*/

		/* const QRectF& rect, const QPixmap& pm, const QPointF& offset,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && obj_z_1->inherits("QPixmap")) {
				obj->drawTiledPixmap((const QRectF&) obj_z_0, (const QPixmap&) obj_z_1, (const QPointF&) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect" && obj_z_1->inherits("QPixmap")) {
				obj->drawTiledPixmap((const QRect&) obj_z_0, (const QPixmap&) obj_z_1, (const QPoint&) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
		/* lllloll public*/

		/* int x, int y, int w, int h, const QPixmap& , int sx, int sy,  */

	if (ZEND_NUM_ARGS() == 7){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		zval *z_6; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_OBJECT && Z_TYPE_P(z_5) == IS_LONG && Z_TYPE_P(z_6) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_4 = (QObject*) php_qt_fetch(z_4);


			if(obj_z_4->inherits("QPixmap")) {
				obj->drawTiledPixmap((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (const QPixmap&) obj_z_4, (int) Z_LVAL_P(z_5), (int) Z_LVAL_P(z_6));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  layoutDirection
 *    flags:    c
 */
ZEND_METHOD(QPainter, layoutDirection){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_LONG(obj->layoutDirection());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  background
 *    flags:    c
 */
ZEND_METHOD(QPainter, background){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				const QBrush & return_object = (const QBrush &) obj->background();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPolygon
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPolygon){
		/* ol public*/

		/* const QPolygonF& polygon, int fillRule,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
				obj->drawPolygon((const QPolygonF&) obj_z_0, (Qt::FillRule) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
				obj->drawPolygon((const QPolygon&) obj_z_0, (Qt::FillRule) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
		}
	}
		/* lll public*/

		/* const QPointF* points, int pointCount, int fillRule,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPolygon((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(Qt::FillRule) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  device
 *    flags:    c
 */
ZEND_METHOD(QPainter, device){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QPaintDevice * return_object = (QPaintDevice *) obj->device();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipRegion
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipRegion){
		/* ol public*/

		/* const QRegion& , int op,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QRegion")) {
				obj->setClipRegion((const QRegion&) obj_z_0, (Qt::ClipOperation) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  restoreRedirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, restoreRedirected){
		/* l public*/

		/* const QPaintDevice* device,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->restoreRedirected((const QPaintDevice*) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setMatrixEnabled
 *    flags:    
 */
ZEND_METHOD(QPainter, setMatrixEnabled){
		/* l public*/

		/* int enabled,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setMatrixEnabled((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPoints
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPoints){
		/* o public*/

		/* const QPolygonF& points,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
				obj->drawPoints((const QPolygonF&) obj_z_0);
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
				obj->drawPoints((const QPolygon&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* ll public*/

		/* const QPointF* points, int pointCount,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPoints((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRoundRect
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRoundRect){
		/* oll public*/

		/* const QRectF& r, int xround, int yround,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawRoundRect((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->drawRoundRect((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
		/* llllll public*/

		/* int x, int y, int w, int h, int , int ,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawRoundRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawConvexPolygon
 *    flags:    
 */
ZEND_METHOD(QPainter, drawConvexPolygon){
		/* o public*/

		/* const QPolygonF& polygon,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QPolygonF") {
				obj->drawConvexPolygon((const QPolygonF&) obj_z_0);
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QPolygon") {
				obj->drawConvexPolygon((const QPolygon&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* ll public*/

		/* const QPointF* points, int pointCount,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawConvexPolygon((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setMatrix
 *    flags:    
 */
ZEND_METHOD(QPainter, setMatrix){
		/* ol public*/

		/* const QMatrix& matrix, int combine,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QMatrix")) {
				obj->setMatrix((const QMatrix&) obj_z_0, (bool) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPicture
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPicture){
		/* lo public*/

		/* const QPointF& p, const QPicture& picture,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QPicture")) {
				obj->drawPicture((const QPointF&) Z_LVAL_P(z_0), (const QPicture&) obj_z_1);
			RETURN_NULL();
			}
			if(obj_z_1->inherits("QPicture")) {
				obj->drawPicture((const QPoint&) Z_LVAL_P(z_0), (const QPicture&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
		/* llo public*/

		/* int x, int y, const QPicture& picture,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(obj_z_2->inherits("QPicture")) {
				obj->drawPicture((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QPicture&) obj_z_2);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  restore
 *    flags:    
 */
ZEND_METHOD(QPainter, restore){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->restore();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  font
 *    flags:    c
 */
ZEND_METHOD(QPainter, font){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				const QFont & return_object = (const QFont &) obj->font();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  matrix
 *    flags:    c
 */
ZEND_METHOD(QPainter, matrix){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				const QMatrix & return_object = (const QMatrix &) obj->matrix();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  viewport
 *    flags:    c
 */
ZEND_METHOD(QPainter, viewport){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QRect return_object = (QRect) obj->viewport();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  viewTransformEnabled
 *    flags:    c
 */
ZEND_METHOD(QPainter, viewTransformEnabled){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->viewTransformEnabled());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawText
 *    flags:    
 */
ZEND_METHOD(QPainter, drawText){
		/* lo public*/

		/* const QPointF& p, const QString& s,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_1)->name == "QString") {
				obj->drawText((const QPointF&) Z_LVAL_P(z_0), (const QString&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
		/* ooo public*/

		/* const QRectF& r, const QString& text, const QTextOption& o,  */
		/* llo public*/

		/* int x, int y, const QString& s,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_1)->name == "QString" && obj_z_2->inherits("QTextOption")) {
				obj->drawText((const QRectF&) obj_z_0, (const QString&) obj_z_1, (const QTextOption&) obj_z_2);
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(Z_OBJCE_P(z_2)->name == "QString") {
				obj->drawText((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QString&) obj_z_2);
			RETURN_NULL();
			}
			}
		}
	}
		/* oloo public*/

		/* const QRectF& r, int flags, const QString& text, QRectF* br,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT && Z_TYPE_P(z_3) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);
			QObject* obj_z_3 = (QObject*) php_qt_fetch(z_3);


			if(Z_OBJCE_P(z_0)->name == "QRectF" && Z_OBJCE_P(z_2)->name == "QString" && Z_OBJCE_P(z_3)->name == "QRectF") {
				obj->drawText((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (const QString&) obj_z_2, (QRectF*) obj_z_3);
			RETURN_NULL();
			}
			}
		}
	}
		/* llllloo public*/

		/* int x, int y, int w, int h, int flags, const QString& text, qt_QRect* br,  */

	if (ZEND_NUM_ARGS() == 7){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		zval *z_6; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5, &z_6) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_OBJECT && Z_TYPE_P(z_6) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_5 = (QObject*) php_qt_fetch(z_5);
			QObject* obj_z_6 = (QObject*) php_qt_fetch(z_6);


			if(Z_OBJCE_P(z_5)->name == "QString" && Z_OBJCE_P(z_6)->name == "QRect") {
				obj->drawText((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (int) Z_LVAL_P(z_3), (int) Z_LVAL_P(z_4), (const QString&) obj_z_5, (QRect*) obj_z_6);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawChord
 *    flags:    
 */
ZEND_METHOD(QPainter, drawChord){
		/* oll public*/

		/* const QRectF& rect, int a, int alen,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawChord((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->drawChord((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
		/* llllll public*/

		/* int x, int y, int w, int h, int a, int alen,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawChord((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  clipRegion
 *    flags:    c
 */
ZEND_METHOD(QPainter, clipRegion){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QRegion return_object = (QRegion) obj->clipRegion();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  end
 *    flags:    
 */
ZEND_METHOD(QPainter, end){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->end());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  brushOrigin
 *    flags:    c
 */
ZEND_METHOD(QPainter, brushOrigin){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QPoint return_object = (QPoint) obj->brushOrigin();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setViewTransformEnabled
 *    flags:    
 */
ZEND_METHOD(QPainter, setViewTransformEnabled){
		/* l public*/

		/* int enable,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setViewTransformEnabled((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  scale
 *    flags:    
 */
ZEND_METHOD(QPainter, scale){
		/* ll public*/

		/* double sx, double sy,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->scale((qreal) Z_LVAL_P(z_0) ,(qreal) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setPen
 *    flags:    
 */
ZEND_METHOD(QPainter, setPen){
		/* l public*/

		/* int style,  */
		/* o public*/

		/* const QColor& color,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setPen((Qt::PenStyle) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QColor")) {
				obj->setPen((const QColor&) obj_z_0);
			RETURN_NULL();
			}
			if(obj_z_0->inherits("QPen")) {
				obj->setPen((const QPen&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBackgroundMode
 *    flags:    
 */
ZEND_METHOD(QPainter, setBackgroundMode){
		/* l public*/

		/* int mode,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setBackgroundMode((Qt::BGMode) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  window
 *    flags:    c
 */
ZEND_METHOD(QPainter, window){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QRect return_object = (QRect) obj->window();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  paintEngine
 *    flags:    c
 */
ZEND_METHOD(QPainter, paintEngine){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QPaintEngine * return_object = (QPaintEngine *) obj->paintEngine();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setRenderHint
 *    flags:    
 */
ZEND_METHOD(QPainter, setRenderHint){
		/* ll public*/

		/* QPainter::RenderHint hint, int on,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setRenderHint((QPainter::RenderHint) Z_LVAL_P(z_0) ,(bool) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  brush
 *    flags:    c
 */
ZEND_METHOD(QPainter, brush){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				const QBrush & return_object = (const QBrush &) obj->brush();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  strokePath
 *    flags:    
 */
ZEND_METHOD(QPainter, strokePath){
		/* lo public*/

		/* const QPainterPath& path, const QPen& pen,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QPen")) {
				obj->strokePath((const QPainterPath&) Z_LVAL_P(z_0), (const QPen&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBrush
 *    flags:    
 */
ZEND_METHOD(QPainter, setBrush){
		/* l public*/

		/* int style,  */
		/* o public*/

		/* const QBrush& brush,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setBrush((Qt::BrushStyle) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QBrush")) {
				obj->setBrush((const QBrush&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawPoint
 *    flags:    
 */
ZEND_METHOD(QPainter, drawPoint){
		/* l public*/

		/* const QPointF& pt,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPoint((const QPointF&) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
		/* ll public*/

		/* int x, int y,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawPoint((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  QPainter
 *    flags:    
 */
ZEND_METHOD(QPainter, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *QPainter_ptr = new QPainter();
				PHP_QT_REGISTER(QPainter_ptr);
				RETURN_NULL();
	}
		/* l public*/

		/* qt_QPaintDevice* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){


			QPainter *QPainter_ptr = new QPainter((QPaintDevice*) Z_LVAL_P(z_0));
				PHP_QT_REGISTER(QPainter_ptr);
				RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setRedirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, setRedirected){
		/* lll public*/

		/* const QPaintDevice* device, qt_QPaintDevice* replacement, const QPoint& offset,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setRedirected((const QPaintDevice*) Z_LVAL_P(z_0) ,(QPaintDevice*) Z_LVAL_P(z_1) ,(const QPoint&) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  compositionMode
 *    flags:    c
 */
ZEND_METHOD(QPainter, compositionMode){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
				QPainter::CompositionMode return_object = (QPainter::CompositionMode) obj->compositionMode();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setFont
 *    flags:    
 */
ZEND_METHOD(QPainter, setFont){
		/* o public*/

		/* const QFont& f,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QFont") {
				obj->setFont((const QFont&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  begin
 *    flags:    
 */
ZEND_METHOD(QPainter, begin){
		/* l public*/

		/* qt_QPaintDevice* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			RETURN_BOOL(obj->begin((QPaintDevice*) Z_LVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setViewport
 *    flags:    
 */
ZEND_METHOD(QPainter, setViewport){
		/* o public*/

		/* const QRect& viewport,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->setViewport((const QRect&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* llll public*/

		/* int x, int y, int w, int h,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setViewport((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawEllipse
 *    flags:    
 */
ZEND_METHOD(QPainter, drawEllipse){
		/* o public*/

		/* const QRectF& r,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawEllipse((const QRectF&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* llll public*/

		/* int x, int y, int w, int h,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawEllipse((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawArc
 *    flags:    
 */
ZEND_METHOD(QPainter, drawArc){
		/* oll public*/

		/* const QRectF& rect, int a, int alen,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawArc((const QRectF&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->drawArc((const QRect&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2));
			RETURN_NULL();
			}
			}
		}
	}
		/* llllll public*/

		/* int x, int y, int w, int h, int a, int alen,  */

	if (ZEND_NUM_ARGS() == 6){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		zval *z_4; // define ZVAL
		zval *z_5; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzzzz", &z_0, &z_1, &z_2, &z_3, &z_4, &z_5) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG && Z_TYPE_P(z_4) == IS_LONG && Z_TYPE_P(z_5) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawArc((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3) ,(int) Z_LVAL_P(z_4) ,(int) Z_LVAL_P(z_5));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setBackground
 *    flags:    
 */
ZEND_METHOD(QPainter, setBackground){
		/* o public*/

		/* const QBrush& bg,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QBrush")) {
				obj->setBackground((const QBrush&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  isActive
 *    flags:    c
 */
ZEND_METHOD(QPainter, isActive){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isActive());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawRect
 *    flags:    
 */
ZEND_METHOD(QPainter, drawRect){
		/* o public*/

		/* const QRectF& rect,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QRectF") {
				obj->drawRect((const QRectF&) obj_z_0);
			RETURN_NULL();
			}
			if(Z_OBJCE_P(z_0)->name == "QRect") {
				obj->drawRect((const QRect&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
		/* llll public*/

		/* int x1, int y1, int w, int h,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawRect((int) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1) ,(int) Z_LVAL_P(z_2) ,(int) Z_LVAL_P(z_3));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawLines
 *    flags:    
 */
ZEND_METHOD(QPainter, drawLines){
		/* ol public*/

		/* const QLineF* lines, int lineCount,  */
		/* ll public*/

		/* const QPointF* pointPairs, int lineCount,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(obj_z_0->inherits("QLineF")) {
				obj->drawLines((const QLineF*) obj_z_0, (int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			if(obj_z_0->inherits("QLine")) {
				obj->drawLines((const QLine*) obj_z_0, (int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
			}
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->drawLines((const QPointF*) Z_LVAL_P(z_0) ,(int) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  renderHints
 *    flags:    c
 */
ZEND_METHOD(QPainter, renderHints){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->renderHints();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  backgroundMode
 *    flags:    c
 */
ZEND_METHOD(QPainter, backgroundMode){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_LONG(obj->backgroundMode());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  redirected
 *    flags:    s
 */
ZEND_METHOD(QPainter, redirected){
		/* ll public*/

		/* const QPaintDevice* device, qt_QPoint* offset,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


				QPaintDevice * return_object = (QPaintDevice *) obj->redirected((const QPaintDevice*) Z_LVAL_P(z_0) ,(QPoint*) Z_LVAL_P(z_1));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QPainter_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  hasClipping
 *    flags:    c
 */
ZEND_METHOD(QPainter, hasClipping){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			RETURN_BOOL(obj->hasClipping());
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  drawTextItem
 *    flags:    
 */
ZEND_METHOD(QPainter, drawTextItem){
		/* lo public*/

		/* const QPointF& p, const QTextItem& ti,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(obj_z_1->inherits("QTextItem")) {
				obj->drawTextItem((const QPointF&) Z_LVAL_P(z_0), (const QTextItem&) obj_z_1);
			RETURN_NULL();
			}
			if(obj_z_1->inherits("QTextItem")) {
				obj->drawTextItem((const QPoint&) Z_LVAL_P(z_0), (const QTextItem&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
		/* llo public*/

		/* int x, int y, const QTextItem& ti,  */

	if (ZEND_NUM_ARGS() == 3){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzz", &z_0, &z_1, &z_2) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_OBJECT){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			QObject* obj_z_2 = (QObject*) php_qt_fetch(z_2);


			if(obj_z_2->inherits("QTextItem")) {
				obj->drawTextItem((int) Z_LVAL_P(z_0), (int) Z_LVAL_P(z_1), (const QTextItem&) obj_z_2);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  setClipping
 *    flags:    
 */
ZEND_METHOD(QPainter, setClipping){
		/* l public*/

		/* int enable,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();


			obj->setClipping((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QPainter */
/*
 *    function  clipPath
 *    flags:    c
 */
ZEND_METHOD(QPainter, clipPath){
	if (ZEND_NUM_ARGS() == 0){
			QPainter *obj = (QPainter*) PHP_QT_FETCH();
			obj->clipPath();
			RETURN_NULL();
	}
}


PHP_QT_DESTRUCT(QPainter);

