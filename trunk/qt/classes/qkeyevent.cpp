/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QKeyEvent.cpp - QKeyEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QKeyEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QKeyEvent_php_qt:public QKeyEvent
{

public:
  QKeyEvent_php_qt(zval * zend_ptr, Type types0, int keys1, Qt::KeyboardModifiers modifierss2, const QString & text = QString(), bool autorep =
                   false, ushort count = 1);


  zval *zend_ptr;
};
QKeyEvent_php_qt::QKeyEvent_php_qt(zval * zend_ptr, Type types0, int keys1, Qt::KeyboardModifiers modifierss2, const QString & text, bool autorep,
                                   ushort count):
QKeyEvent(types0, keys1, modifierss2, text, autorep, count)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method key
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QKeyEvent, key)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'key' is not static");
        RETURN_NULL();
      }
      /// try 
      QKeyEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QKeyEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->key());
    }
  }
  php_error(E_ERROR, "could not parse argument in QKeyEvent::key(...) ");
}

/*!
 * method count
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	int
 * @flags	c
 */

ZEND_METHOD(QKeyEvent, count)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'count' is not static");
        RETURN_NULL();
      }
      /// try 
      QKeyEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QKeyEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->count());
    }
  }
  php_error(E_ERROR, "could not parse argument in QKeyEvent::count(...) ");
}

/*!
 * method text
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QString
 * @flags	c
 */

ZEND_METHOD(QKeyEvent, text)
{
  ///
#ifdef PHP_QT_QString           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'text' is not static");
        RETURN_NULL();
      }
      /// try 
      QKeyEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QKeyEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QString *return_object = new QString;

      *return_object = static_cast < QString > (selfpointer->text());
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QKeyEvent::text(...) ");
}

/*!
 * method QKeyEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Type types0s0
 * @param	int keys1s1
 * @param	Qt::KeyboardModifiers modifierss2s2
 * @param	 const QString & text = QString()s3
 * @param	 bool autorep = falses4
 * @param	 ushort count = 1s5
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QKeyEvent, __construct)
{
// notice: unknown argument Type types0s0, skipped
  php_error(E_ERROR, "could not parse argument in QKeyEvent::QKeyEvent(...) ");
}

/*!
 * method modifiers
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::KeyboardModifiers
 * @flags	c
 */

ZEND_METHOD(QKeyEvent, modifiers)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'modifiers' is not static");
        RETURN_NULL();
      }
      /// try 
      QKeyEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QKeyEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->modifiers());
    }
  }
  php_error(E_ERROR, "could not parse argument in QKeyEvent::modifiers(...) ");
}

/*!
 * method isAutoRepeat
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QKeyEvent, isAutoRepeat)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'isAutoRepeat' is not static");
        RETURN_NULL();
      }
      /// try 
      QKeyEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QKeyEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->isAutoRepeat());
    }
  }
  php_error(E_ERROR, "could not parse argument in QKeyEvent::isAutoRepeat(...) ");
}
