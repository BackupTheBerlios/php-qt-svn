/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QKeyEvent.cpp - QKeyEvent PHP implementation.
 * begin           : Sun Jan 15 17:39:22 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QKeyEvent>
#include "../php_qt.h"


/*********************************
 *    class     QKeyEvent */
/*
 *    function  count
 *    flags:    c
 */
ZEND_METHOD(QKeyEvent, count){
	if (ZEND_NUM_ARGS() == 0){
			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->count());
	}
}

/*********************************
 *    class     QKeyEvent */
/*
 *    function  text
 *    flags:    c
 */
ZEND_METHOD(QKeyEvent, text){
	if (ZEND_NUM_ARGS() == 0){
			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
			QString return_object = (QString) obj->text();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QKeyEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QKeyEvent */
/*
 *    function  isAutoRepeat
 *    flags:    c
 */
ZEND_METHOD(QKeyEvent, isAutoRepeat){
	if (ZEND_NUM_ARGS() == 0){
			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
			RETURN_BOOL(obj->isAutoRepeat());
	}
}

/*********************************
 *    class     QKeyEvent */
/*
 *    function  modifiers
 *    flags:    c
 */
ZEND_METHOD(QKeyEvent, modifiers){
	if (ZEND_NUM_ARGS() == 0){
			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
			Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->modifiers();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QKeyEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QKeyEvent */
/*
 *    function  key
 *    flags:    c
 */
ZEND_METHOD(QKeyEvent, key){
	if (ZEND_NUM_ARGS() == 0){
			QKeyEvent *obj = (QKeyEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->key());
	}
}


PHP_QT_DESTRUCT(QKeyEvent);

