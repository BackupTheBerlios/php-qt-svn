/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2006
 * Thomas Moenicke <tm@ippfp.org>,
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDropEvent.cpp - QDropEvent PHP implementation.
 * begin           : Tue Jun  6 22:42:56 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"


#include <QDropEvent>
/// DEBUG:destructor skipped.
#include <QMetaMethod>
class QDropEvent_php_qt:public QDropEvent
{

public:
  QDropEvent_php_qt(zval * zend_ptr, const QPoint & poss0, Qt::DropActions actionss1, const QMimeData * datas2, Qt::MouseButtons buttonss3,
                    Qt::KeyboardModifiers modifierss4, Type type = Drop);


  zval *zend_ptr;
};
QDropEvent_php_qt::QDropEvent_php_qt(zval * zend_ptr, const QPoint & poss0, Qt::DropActions actionss1, const QMimeData * datas2, Qt::MouseButtons buttonss3,
                                     Qt::KeyboardModifiers modifierss4, Type type):
QDropEvent(poss0, actionss1, datas2, buttonss3, modifierss4, type)
{
  this->zend_ptr = zend_ptr;
}

/*!
 * method dropAction
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::DropAction
 * @flags	c
 */

ZEND_METHOD(QDropEvent, dropAction)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'dropAction' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->dropAction());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::dropAction(...) ");
}

/*!
 * method acceptProposedAction
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDropEvent, acceptProposedAction)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'acceptProposedAction' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->acceptProposedAction());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::acceptProposedAction(...) ");
}

/*!
 * method mimeData
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QMimeData *
 * @flags	c
 */

ZEND_METHOD(QDropEvent, mimeData)
{
  ///
#ifdef PHP_QT_QMimeData         // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'mimeData' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = const_cast < QMimeData * >(selfpointer->mimeData());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDropEvent::mimeData(...) ");
}

/*!
 * method provides
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *s0
 * 
 * @access	public
 * @return	bool
 * @flags	c
 */

ZEND_METHOD(QDropEvent, provides)
{
  ///const char *s0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'provides' is not static");
        RETURN_NULL();
      }
      /// try const char *s0,
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_BOOL(selfpointer->provides((const char *)&Z_STRVAL_P(arg_0)[0]));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::provides(...) ");
}

/*!
 * method source
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	QWidget*
 * @flags	c
 */

ZEND_METHOD(QDropEvent, source)
{
  ///
#ifdef PHP_QT_QWidget           // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'source' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = static_cast < QWidget * >(selfpointer->source());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDropEvent::source(...) ");
}

/*!
 * method mouseButtons
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::MouseButtons
 * @flags	c
 */

ZEND_METHOD(QDropEvent, mouseButtons)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'mouseButtons' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->mouseButtons());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::mouseButtons(...) ");
}

/*!
 * method pos
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	const QPoint &
 * @flags	c
 */

ZEND_METHOD(QDropEvent, pos)
{
  ///
#ifdef PHP_QT_QPoint            // return type

  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'pos' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;

      le.ptr = &const_cast < QPoint & >(selfpointer->pos());
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDropEvent::pos(...) ");
}

/*!
 * method possibleActions
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::DropActions
 * @flags	c
 */

ZEND_METHOD(QDropEvent, possibleActions)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'possibleActions' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->possibleActions());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::possibleActions(...) ");
}

/*!
 * method proposedAction
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::DropAction
 * @flags	c
 */

ZEND_METHOD(QDropEvent, proposedAction)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'proposedAction' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->proposedAction());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::proposedAction(...) ");
}

/*!
 * method keyboardModifiers
 * 
 * @param: -
 * @param: -
 * 
 * @access	public
 * @return	Qt::KeyboardModifiers
 * @flags	c
 */

ZEND_METHOD(QDropEvent, keyboardModifiers)
{
  ///
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'keyboardModifiers' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_LONG(selfpointer->keyboardModifiers());
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::keyboardModifiers(...) ");
}

/*!
 * method setDropAction
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	Qt::DropAction actions0
 * 
 * @access	public
 * @return	void
 * @flags	
 */

ZEND_METHOD(QDropEvent, setDropAction)
{
  ///Qt::DropAction actions0
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'setDropAction' is not static");
        RETURN_NULL();
      }
      /// try Qt::DropAction actions0,
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_VOID(selfpointer->setDropAction((Qt::DropAction) Z_LVAL_P(arg_0)));
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::setDropAction(...) ");
}

/*!
 * method encodedData
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const char *s0
 * 
 * @access	public
 * @return	QByteArray
 * @flags	c
 */

ZEND_METHOD(QDropEvent, encodedData)
{
  ///const char *s0
#ifdef PHP_QT_QByteArray        // return type

  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_STRING) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'encodedData' is not static");
        RETURN_NULL();
      }
      /// try const char *s0,
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      zend_class_entry *ce;

      object_init_ex(return_value, QString_ce_ptr);
      zend_rsrc_list_entry le;
      QByteArray *return_object = new QByteArray;

      *return_object = static_cast < QByteArray > (selfpointer->encodedData((const char *)&Z_STRVAL_P(arg_0)[0]));
      le.ptr = (void *)return_object;
      php_qt_register(return_value, le);
      return;
    }
  }
#endif // return type

  php_error(E_ERROR, "could not parse argument in QDropEvent::encodedData(...) ");
}

/*!
 * method QDropEvent
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	const QPoint & poss0s0
 * @param	Qt::DropActions actionss1s1
 * @param	const QMimeData  *datas2s2
 * @param	Qt::MouseButtons buttonss3s3
 * @param	Qt::KeyboardModifiers modifierss4s4
 * @param	 Type type = Drops5
 * 
 * @access	public
 * @return	
 * @flags	
 */

ZEND_METHOD(QDropEvent, __construct)
{
  ///const QPoint & poss0s0,Qt::DropActions actionss1s1,const QMimeData  *datas2s2,Qt::MouseButtons buttonss3s3,Qt::KeyboardModifiers modifierss4s4, Type type = Drops5
  if (ZEND_NUM_ARGS() == 5) {
    PHP_QT_FETCH_5_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_OBJECT && Z_TYPE_P(arg_1) == IS_LONG && Z_TYPE_P(arg_2) == IS_OBJECT && Z_TYPE_P(arg_3) == IS_LONG &&
        Z_TYPE_P(arg_4) == IS_LONG) {
#ifdef PHP_QT_QPoint
#ifdef PHP_QT_QMimeData
      if (inherits(Z_OBJCE_P(arg_0), 0) && inherits(Z_OBJCE_P(arg_2), 0)) {
        if (getThis() == NULL) {
          php_error(E_ERROR, "method '__construct' is not static");
          RETURN_NULL();
        }
        /// try const QPoint & poss0s0,Qt::DropActions actionss1s1,const QMimeData  *datas2s2,Qt::MouseButtons buttonss3s3,Qt::KeyboardModifiers modifierss4s4,
        QPoint *cpp_arg_0 = static_cast < QPoint * >(php_qt_fetch(arg_0));
        QMimeData *cpp_arg_2 = static_cast < QMimeData * >(php_qt_fetch(arg_2));
        QDropEvent_php_qt *selfpointer =
          new QDropEvent_php_qt(getThis(), (const QPoint &)*cpp_arg_0, (Qt::DropActions) Z_LVAL_P(arg_1), (const QMimeData *)cpp_arg_2,
                                (Qt::MouseButtons) Z_LVAL_P(arg_3), (Qt::KeyboardModifiers) Z_LVAL_P(arg_4));
        PHP_QT_REGISTER(selfpointer);
        RETURN_NULL();
      }
#endif

#endif

    }
  }
// notice: unknown argument  Type type = Drops5, skipped
  php_error(E_ERROR, "could not parse argument in QDropEvent::QDropEvent(...) ");
}

/*!
 * method format
 * 
 * @param: -
 * 
 * overloaded args:
 * @param	int n = 0s0
 * 
 * @access	public
 * @return	const char*
 * @flags	c
 */

ZEND_METHOD(QDropEvent, format)
{
  ///int n = 0s0
  if (ZEND_NUM_ARGS() == 0) {
    PHP_QT_FETCH_0_ARGS();
    if (1) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'format' is not static");
        RETURN_NULL();
      }
      /// try 
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_STRING((char *)selfpointer->format(), 1);
    }
  }
  if (ZEND_NUM_ARGS() == 1) {
    PHP_QT_FETCH_1_ARGS();
    if (1 && Z_TYPE_P(arg_0) == IS_LONG) {
      if (getThis() == NULL) {
        php_error(E_ERROR, "method 'format' is not static");
        RETURN_NULL();
      }
      /// try int n = 0s0,
      QDropEvent *selfpointer;

      if (getThis() != NULL) {
        selfpointer = static_cast < QDropEvent * >(PHP_QT_FETCH());
      }
      RETURN_STRING((char *)selfpointer->format((int)Z_LVAL_P(arg_0)), 1);
    }
  }
  php_error(E_ERROR, "could not parse argument in QDropEvent::format(...) ");
}
