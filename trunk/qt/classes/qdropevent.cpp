/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QDropEvent.cpp - QDropEvent PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QDropEvent>
#include "../php_qt.h"


/*********************************
 *    class     QDropEvent */
/*
 *    function  encodedData
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, encodedData){
		/* s public*/

		/* const char* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING){
//			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();


//			RETURN_STRING((char*) obj->encodedData( (const char*) Z_STRVAL_P(z_0)), 1);
			}
		}
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  source
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, source){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
				QWidget* return_object = (QWidget*) obj->source();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  keyboardModifiers
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, keyboardModifiers){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
				Qt::KeyboardModifiers return_object = (Qt::KeyboardModifiers) obj->keyboardModifiers();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  setDropAction
 *    flags:    
 */
ZEND_METHOD(QDropEvent, setDropAction){
		/* l public*/

		/* int action,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();


			obj->setDropAction((Qt::DropAction) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  acceptProposedAction
 *    flags:    
 */
ZEND_METHOD(QDropEvent, acceptProposedAction){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
			obj->acceptProposedAction();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  dropAction
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, dropAction){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->dropAction());
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  mimeData
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, mimeData){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
				const QMimeData * return_object = (const QMimeData *) obj->mimeData();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  provides
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, provides){
		/* s public*/

		/* const char* ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_STRING){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();


			RETURN_BOOL(obj->provides( (const char*) Z_STRVAL_P(z_0)));
			}
		}
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  format
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, format){
		/* l public*/

		/* int n,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();


				const char* return_object = (const char*) obj->format((int) Z_LVAL_P(z_0));
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
		}
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  mouseButtons
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, mouseButtons){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
				Qt::MouseButtons return_object = (Qt::MouseButtons) obj->mouseButtons();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  proposedAction
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, proposedAction){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
			RETURN_LONG(obj->proposedAction());
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  pos
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, pos){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
				const QPoint & return_object = (const QPoint &) obj->pos();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QDropEvent */
/*
 *    function  possibleActions
 *    flags:    c
 */
ZEND_METHOD(QDropEvent, possibleActions){
	if (ZEND_NUM_ARGS() == 0){
			QDropEvent *obj = (QDropEvent*) PHP_QT_FETCH();
				Qt::DropActions return_object = (Qt::DropActions) obj->possibleActions();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QDropEvent_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}


PHP_QT_DESTRUCT(QDropEvent);

