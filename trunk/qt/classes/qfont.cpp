/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005
 * Thomas Moenicke <tm@ippfp.org>,
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QFont.cpp - QFont PHP implementation.
 * begin           : Sun Jan 22 19:46:39 2006
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include <QFont>
#include "../php_qt.h"

#include <QStringList>


/*		public enumStyleHint:long {
			StyleHint = 0,
			SansSerif = Helvetica,
			StyleHint = 2,
			Serif = Times,
			StyleHint = 4,
			TypeWriter = Courier,
			StyleHint = 6,
			Decorative = OldEnglish,
			StyleHint = 8,
			StyleHint = 9
		}
*/

/*		public enumStyleStrategy:long {
			PreferDefault = 0x0001,
			PreferBitmap = 0x0002,
			PreferDevice = 0x0004,
			PreferOutline = 0x0008,
			ForceOutline = 0x0010,
			PreferMatch = 0x0020,
			PreferQuality = 0x0040,
			PreferAntialias = 0x0080,
			NoAntialias = 0x0100,
			OpenGLCompatible = 0x0200
		}
*/

/*		public enumWeight:long {
			Light = 25,
			Normal = 50,
			DemiBold = 63,
			Bold = 75,
			Black = 87
		}
*/

/*		public enumStyle:long {
			Style = 0,
			Style = 1,
			Style = 2
		}
*/

/*		public enumStretch:long {
			UltraCondensed = 50,
			ExtraCondensed = 62,
			Condensed = 75,
			SemiCondensed = 87,
			Unstretched = 100,
			SemiExpanded = 112,
			Expanded = 125,
			ExtraExpanded = 150,
			UltraExpanded = 200
		}
*/
/*********************************
 *    class     QFont */
/*
 *    function  setOverline
 *    flags:    
 */
ZEND_METHOD(QFont, setOverline){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setOverline((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  insertSubstitution
 *    flags:    s
 */
ZEND_METHOD(QFont, insertSubstitution){
		/* oo public*/

		/* const QString& , const QString& ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QString") {
				obj->insertSubstitution((const QString&) obj_z_0, (const QString&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  stretch
 *    flags:    c
 */
ZEND_METHOD(QFont, stretch){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->stretch());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  styleStrategy
 *    flags:    c
 */
ZEND_METHOD(QFont, styleStrategy){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->styleStrategy());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setKerning
 *    flags:    
 */
ZEND_METHOD(QFont, setKerning){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setKerning((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  underline
 *    flags:    c
 */
ZEND_METHOD(QFont, underline){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->underline());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  removeSubstitution
 *    flags:    s
 */
ZEND_METHOD(QFont, removeSubstitution){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->removeSubstitution((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  substitute
 *    flags:    s
 */
ZEND_METHOD(QFont, substitute){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QString return_object = (QString) obj->substitute((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setBold
 *    flags:    
 */
ZEND_METHOD(QFont, setBold){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setBold((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  resolve
 *    flags:    c
 */
ZEND_METHOD(QFont, resolve){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->resolve());
	}
		/* l public*/

		/* unsigned int mask,  */
		/* o public*/

		/* const QFont& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->resolve((uint) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QFont") {
					QFont return_object = (QFont) obj->resolve((const QFont&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  fixedPitch
 *    flags:    c
 */
ZEND_METHOD(QFont, fixedPitch){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->fixedPitch());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  italic
 *    flags:    c
 */
ZEND_METHOD(QFont, italic){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->italic());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  pixelSize
 *    flags:    c
 */
ZEND_METHOD(QFont, pixelSize){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->pixelSize());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  insertSubstitutions
 *    flags:    s
 */
ZEND_METHOD(QFont, insertSubstitutions){
		/* oo public*/

		/* const QString& , const QStringList& ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);
			QObject* obj_z_1 = (QObject*) php_qt_fetch(z_1);


			if(Z_OBJCE_P(z_0)->name == "QString" && Z_OBJCE_P(z_1)->name == "QStringList") {
				obj->insertSubstitutions((const QString&) obj_z_0, (const QStringList&) obj_z_1);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  key
 *    flags:    c
 */
ZEND_METHOD(QFont, key){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->key();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setStrikeOut
 *    flags:    
 */
ZEND_METHOD(QFont, setStrikeOut){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setStrikeOut((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  weight
 *    flags:    c
 */
ZEND_METHOD(QFont, weight){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->weight());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  pointSize
 *    flags:    c
 */
ZEND_METHOD(QFont, pointSize){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->pointSize());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  cleanup
 *    flags:    s
 */
ZEND_METHOD(QFont, cleanup){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			obj->cleanup();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  fromString
 *    flags:    
 */
ZEND_METHOD(QFont, fromString){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				RETURN_BOOL(obj->fromString((const QString&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  exactMatch
 *    flags:    c
 */
ZEND_METHOD(QFont, exactMatch){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->exactMatch());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setWeight
 *    flags:    
 */
ZEND_METHOD(QFont, setWeight){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setWeight((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  styleHint
 *    flags:    c
 */
ZEND_METHOD(QFont, styleHint){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_LONG(obj->styleHint());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  handle
 *    flags:    c
 */
ZEND_METHOD(QFont, handle){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				Qt::HANDLE return_object = (Qt::HANDLE) obj->handle();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setStyle
 *    flags:    
 */
ZEND_METHOD(QFont, setStyle){
		/* o public*/

		/* QFont::Style style,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setStyle((QFont::Style) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  rawName
 *    flags:    c
 */
ZEND_METHOD(QFont, rawName){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->rawName();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setUnderline
 *    flags:    
 */
ZEND_METHOD(QFont, setUnderline){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setUnderline((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  family
 *    flags:    c
 */
ZEND_METHOD(QFont, family){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->family();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  isCopyOf
 *    flags:    c
 */
ZEND_METHOD(QFont, isCopyOf){
		/* o public*/

		/* const QFont& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QFont") {
				RETURN_BOOL(obj->isCopyOf((const QFont&) obj_z_0));
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  rawMode
 *    flags:    c
 */
ZEND_METHOD(QFont, rawMode){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->rawMode());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  substitutes
 *    flags:    s
 */
ZEND_METHOD(QFont, substitutes){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
					QStringList return_object = (QStringList) obj->substitutes((const QString&) obj_z_0);
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setStretch
 *    flags:    
 */
ZEND_METHOD(QFont, setStretch){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setStretch((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  initialize
 *    flags:    s
 */
ZEND_METHOD(QFont, initialize){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			obj->initialize();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  toString
 *    flags:    c
 */
ZEND_METHOD(QFont, toString){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->toString();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  defaultFamily
 *    flags:    c
 */
ZEND_METHOD(QFont, defaultFamily){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->defaultFamily();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setRawMode
 *    flags:    
 */
ZEND_METHOD(QFont, setRawMode){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setRawMode((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  kerning
 *    flags:    c
 */
ZEND_METHOD(QFont, kerning){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->kerning());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setStyleHint
 *    flags:    
 */
ZEND_METHOD(QFont, setStyleHint){
		/* ll public*/

		/* int , int ,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG && Z_TYPE_P(z_1) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setStyleHint((QFont::StyleHint) Z_LVAL_P(z_0) ,(QFont::StyleStrategy) Z_LVAL_P(z_1));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  substitutions
 *    flags:    s
 */
ZEND_METHOD(QFont, substitutions){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QStringList return_object = (QStringList) obj->substitutions();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setFamily
 *    flags:    
 */
ZEND_METHOD(QFont, setFamily){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->setFamily((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  QFont
 *    flags:    
 */
ZEND_METHOD(QFont, __construct){
	if (ZEND_NUM_ARGS() == 0){
			QFont *QFont_ptr = new QFont();
				PHP_QT_REGISTER(QFont_ptr);
				RETURN_NULL();
	}
		/* o public*/

		/* const QFont& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QFont") {
				QFont *QFont_ptr = new QFont((const QFont&) obj_z_0);
				PHP_QT_REGISTER(QFont_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* ol public*/

		/* const QFont& , qt_QPaintDevice* pd,  */

	if (ZEND_NUM_ARGS() == 2){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zz", &z_0, &z_1) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QFont") {
				QFont *QFont_ptr = new QFont((const QFont&) obj_z_0, (QPaintDevice*) Z_LVAL_P(z_1));
				PHP_QT_REGISTER(QFont_ptr);
				RETURN_NULL();
			}
			}
		}
	}
		/* olll public*/

		/* const QString& family, int pointSize, int weight, int italic,  */

	if (ZEND_NUM_ARGS() == 4){
		zval *z_0; // define ZVAL
		zval *z_1; // define ZVAL
		zval *z_2; // define ZVAL
		zval *z_3; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"zzzz", &z_0, &z_1, &z_2, &z_3) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT && Z_TYPE_P(z_1) == IS_LONG && Z_TYPE_P(z_2) == IS_LONG && Z_TYPE_P(z_3) == IS_LONG){
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				QFont *QFont_ptr = new QFont((const QString&) obj_z_0, (int) Z_LVAL_P(z_1), (int) Z_LVAL_P(z_2), (bool) Z_LVAL_P(z_3));
				PHP_QT_REGISTER(QFont_ptr);
				RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  bold
 *    flags:    c
 */
ZEND_METHOD(QFont, bold){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->bold());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  style
 *    flags:    c
 */
ZEND_METHOD(QFont, style){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QFont::Style return_object = (QFont::Style) obj->style();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setPointSize
 *    flags:    
 */
ZEND_METHOD(QFont, setPointSize){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setPointSize((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setRawName
 *    flags:    
 */
ZEND_METHOD(QFont, setRawName){
		/* o public*/

		/* const QString& ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_OBJECT){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			QObject* obj_z_0 = (QObject*) php_qt_fetch(z_0);


			if(Z_OBJCE_P(z_0)->name == "QString") {
				obj->setRawName((const QString&) obj_z_0);
			RETURN_NULL();
			}
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setStyleStrategy
 *    flags:    
 */
ZEND_METHOD(QFont, setStyleStrategy){
		/* l public*/

		/* int s,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setStyleStrategy((QFont::StyleStrategy) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  cacheStatistics
 *    flags:    s
 */
ZEND_METHOD(QFont, cacheStatistics){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			obj->cacheStatistics();
			RETURN_NULL();
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setPixelSize
 *    flags:    
 */
ZEND_METHOD(QFont, setPixelSize){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setPixelSize((int) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setFixedPitch
 *    flags:    
 */
ZEND_METHOD(QFont, setFixedPitch){
		/* l public*/

		/* int ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setFixedPitch((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setItalic
 *    flags:    
 */
ZEND_METHOD(QFont, setItalic){
		/* l public*/

		/* int b,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setItalic((bool) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  strikeOut
 *    flags:    c
 */
ZEND_METHOD(QFont, strikeOut){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->strikeOut());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  lastResortFont
 *    flags:    c
 */
ZEND_METHOD(QFont, lastResortFont){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->lastResortFont();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  lastResortFamily
 *    flags:    c
 */
ZEND_METHOD(QFont, lastResortFamily){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
				QString return_object = (QString) obj->lastResortFamily();
				zend_class_entry *ce;                                   
				object_init_ex(return_value, QFont_ce_ptr);     
				zend_rsrc_list_entry le;                            
				le.ptr = (void*) &return_object;                                       
				php_qt_register(return_value,le);                   
				return;                                             
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  overline
 *    flags:    c
 */
ZEND_METHOD(QFont, overline){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_BOOL(obj->overline());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  pointSizeF
 *    flags:    c
 */
ZEND_METHOD(QFont, pointSizeF){
	if (ZEND_NUM_ARGS() == 0){
			QFont *obj = (QFont*) PHP_QT_FETCH();
			RETURN_DOUBLE(obj->pointSizeF());
	}
}

/*********************************
 *    class     QFont */
/*
 *    function  setPointSizeF
 *    flags:    
 */
ZEND_METHOD(QFont, setPointSizeF){
		/* l public*/

		/* double ,  */

	if (ZEND_NUM_ARGS() == 1){
		zval *z_0; // define ZVAL
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"z", &z_0) == SUCCESS) {
			if(Z_TYPE_P(z_0) == IS_LONG){
			QFont *obj = (QFont*) PHP_QT_FETCH();


			obj->setPointSizeF((qreal) Z_LVAL_P(z_0));
			RETURN_NULL();
			}
		}
	}
}


PHP_QT_DESTRUCT(QFont);

