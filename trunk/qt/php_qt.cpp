/*
  +----------------------------------------------------------------------+
  | PHP Version 5                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) 1997-2004 The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.0 of the PHP license,       |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_0.txt.                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
  | Author:                                                              |
  +----------------------------------------------------------------------+
*/
/*
 * Copyright (C) 2005 
 * Thomas Moenicke <tm@ippfp.org>, 
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
*/
/* $Id: header,v 1.15 2004/01/08 16:46:52 sniper Exp $ */

#include "php_qt.h"
#include <QObject>
#include <QApplication>
#include <QBoxLayout>
#include <QLineEdit>
#include <QAbstractSlider>
#include <QSlider>
#include <QLCDNumber>
#include <QStringList>

//QOUT();

#include <iostream>
using namespace std;


//static int objects_handle;

/* If you declare any globals in php_php_qt.h uncomment this:
ZEND_DECLARE_MODULE_GLOBALS(php_qt)
*/

/* True global resources - no need for thread safety here */
static int le_php_qt;

int le_php_qt_hashtype;
HashTable php_qt_objptr_hash;

zend_class_entry *QWidget_ce_ptr; //Gyger Jean-Luc change to non static
zend_class_entry *QObject_ce_ptr;
zend_class_entry *QApplication_ce_ptr;
zend_class_entry *QCoreApplication_ce_ptr;
zend_class_entry *QEvent_ce_ptr;
zend_class_entry *QLayoutItem_ce_ptr;
zend_class_entry *QLayout_ce_ptr;
zend_class_entry *QBoxLayout_ce_ptr;
zend_class_entry *QVBoxLayout_ce_ptr;
zend_class_entry *QHBoxLayout_ce_ptr;
zend_class_entry *QSpacerItem_ce_ptr;
zend_class_entry *QAbstractSlider_ce_ptr;
zend_class_entry *QSlider_ce_ptr;
zend_class_entry *QLineEdit_ce_ptr;
zend_class_entry *QFrame_ce_ptr;
zend_class_entry *QMimeSource_ce_ptr;

#include "ag_zend_class_entry.inc"

/* {{{ php_qt_functions[]
 *
 * Every user visible function must have an entry in php_qt_functions[].
 */
function_entry php_qt_functions[] = {
	PHP_FE(confirm_php_qt_compiled,	NULL)		/* For testing, remove later. */
    PHP_FE(SIGNAL,	NULL)
    PHP_FE(SLOT,	NULL)	
	{NULL, NULL, NULL}	/* Must be the last line in php_qt_functions[] */
};
/* }}} */

/* {{{ php_qt_module_entry
 */
zend_module_entry php_qt_module_entry = {
#if ZEND_MODULE_API_NO >= 20010901
	STANDARD_MODULE_HEADER,
#endif
	"php_qt",
	php_qt_functions,
	PHP_MINIT(php_qt),
	PHP_MSHUTDOWN(php_qt),
	PHP_RINIT(php_qt),		/* Replace with NULL if there's nothing to do at request start */
	PHP_RSHUTDOWN(php_qt),	/* Replace with NULL if there's nothing to do at request end */
	PHP_MINFO(php_qt),
#if ZEND_MODULE_API_NO >= 20010901
	"0.1", /* Replace with version number for your extension */
#endif
	STANDARD_MODULE_PROPERTIES
};
/* }}} */

#ifdef COMPILE_DL_PHP_QT
ZEND_GET_MODULE(php_qt)
#endif

/* {{{ PHP_INI
 */
/* Remove comments and fill if you need to have entries in php.ini
PHP_INI_BEGIN()
    STD_PHP_INI_ENTRY("php_qt.global_value",      "42", PHP_INI_ALL, OnUpdateLong, global_value, zend_php_qt_globals, php_qt_globals)
    STD_PHP_INI_ENTRY("php_qt.global_string", "foobar", PHP_INI_ALL, OnUpdateString, global_string, zend_php_qt_globals, php_qt_globals)
PHP_INI_END()
*/
/* }}} */

/* {{{ php_php_qt_init_globals
 */
/* Uncomment this function if you have INI entries
static void php_php_qt_init_globals(zend_php_qt_globals *php_qt_globals)
{
	php_qt_globals->global_value = 0;
	php_qt_globals->global_string = NULL;
}
*/
/* }}} */

/* {{{ PHP_MINIT_FUNCTION
 */

PHP_MINIT_FUNCTION(php_qt)
{
	/* If you have INI entries, uncomment these lines 
	ZEND_INIT_MODULE_GLOBALS(php_qt, php_php_qt_init_globals, NULL);
	REGISTER_INI_ENTRIES();
	*/
	/*Qt constant */
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNLEFT",Qt::AlignLeft ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNRIGHT",Qt::AlignRight ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNHCENTER",Qt::AlignHCenter ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNJUSTIFY",Qt::AlignJustify ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNTOP",Qt::AlignTop ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNBOTTOM",Qt::AlignBottom ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNVCENTER",Qt::AlignVCenter ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNCENTER",Qt::AlignCenter ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNABSOLUTE",Qt::AlignAbsolute ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNLEADING",Qt::AlignLeading ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNTRAILING",Qt::AlignTrailing ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNHORIZONTAL_MASK",Qt::AlignHorizontal_Mask ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ALIGNMENT_ALIGNVERTICAL_MASK",Qt::AlignVertical_Mask ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ORIENTATIONS_VERTICAL",Qt::Vertical ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QT_ORIENTATIONS_HORIZONTAL",Qt::Horizontal ,CONST_CS | CONST_PERSISTENT);	

	_register_QCoreApplication(TSRMLS_C);
	REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_DEFAULTCODEC",QCoreApplication::DefaultCodec ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QCOREAPPLICATION_ENCODING_UNICODEUTF8",QCoreApplication::UnicodeUTF8 ,CONST_CS | CONST_PERSISTENT);	
	
    _register_QApplication(TSRMLS_C);
	//enum QApplication::ColorSpec
	REGISTER_LONG_CONSTANT("QAPPLICATION_COLORSPEC_NORMALCOLOR",QApplication::NormalColor ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QAPPLICATION_COLORSPEC_CUSTOMCOLOR",QApplication::CustomColor ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QAPPLICATION_COLORSPEC_MANYCOLOR",QApplication::ManyColor ,CONST_CS | CONST_PERSISTENT);	
	//enum QApplication::Type
	REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_TTY",QApplication::Tty ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUICLIENT",QApplication::GuiClient ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QAPPLICATION_TYPE_GUISERVER",QApplication::GuiServer ,CONST_CS | CONST_PERSISTENT);	
	
    _register_QObject(TSRMLS_C);
    _register_QWidget(TSRMLS_C);
	
	_register_QEvent(TSRMLS_C);
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_NONE", QEvent::None,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACCESSIBILITYDESCRIPTION", QEvent::AccessibilityDescription,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACCESSIBILITYHELP", QEvent::AccessibilityHelp,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACCESSIBILITYPREPARE", QEvent::AccessibilityPrepare,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACTIONADDED", QEvent::ActionAdded,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACTIONCHANGED", QEvent::ActionChanged,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACTIONREMOVED", QEvent::ActionRemoved,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ACTIVATIONCHANGED", QEvent::ActivationChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_APPLICATIONACTIVATED", QEvent::ApplicationActivated,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_APPLICATIONDEACTIVATED", QEvent::ApplicationDeactivated,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_APPLICATIONFONTCHANGE", QEvent::ApplicationFontChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_APPLICATIONLAYOUTDIRECTIONCHANGE", QEvent::ApplicationLayoutDirectionChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_APPLICATIONPALLETECHANGE", QEvent::ApplicationPaletteChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_APPLICATIONWINDOWICONCHANGE", QEvent::ApplicationWindowIconChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_CHILDADDED", QEvent::ChildAdded,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_CHILDPOLISHED", QEvent::ChildPolished,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_CHILDREMOVED", QEvent::ChildRemoved,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_CLIPBOARD", QEvent::Clipboard,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_CLOSE", QEvent::Close,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_CONTEXTMENU", QEvent::ContextMenu,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_DEFERREDDELETE", QEvent::DeferredDelete,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_DRAGENTER", QEvent::DragEnter,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_DRAGLEAVE", QEvent::DragLeave,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_DRAGMOVE", QEvent::DragMove,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_DROP", QEvent::Drop,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ENABLEDCHANGE", QEvent::EnabledChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ENTER", QEvent::Enter,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ENTERWHATSTHISMODE", QEvent::EnterWhatsThisMode,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_FILEOPEN", QEvent::FileOpen,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_FOCUSIN", QEvent::FocusIn,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_FOCUSOUT", QEvent::FocusOut,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_FONTCHANGE", QEvent::FontChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_HIDE", QEvent::Hide,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_HIDETOPARENT", QEvent::HideToParent,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_HOVERENTER", QEvent::HoverEnter,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_HOVERLEAVE", QEvent::HoverLeave,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_HOVERMOVE", QEvent::HoverMove,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ICONDRAG", QEvent::IconDrag,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ICONTEXTCHANGE", QEvent::IconTextChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_INOUTMETHOD", QEvent::InputMethod,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_KEYPRESS", QEvent::KeyPress,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_KEYRELEASE", QEvent::KeyRelease,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_LANGUAGECHANGE", QEvent::LanguageChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_LAYOUTDIRECTIONCHANGE", QEvent::LayoutDirectionChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_LAYOUTREQUEST", QEvent::LayoutRequest,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_LEAVE", QEvent::Leave,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_LEAVEWHATSTHISMODE", QEvent::LeaveWhatsThisMode,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_LOCALECHANGE", QEvent::LocaleChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_METACALL", QEvent::MetaCall,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MODIFIEDCHANGE", QEvent::ModifiedChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MOUSEBUTTONDBCLICK", QEvent::MouseButtonDblClick,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MOUSEBUTTONPRESS", QEvent::MouseButtonPress,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MOUSEBUTTONRELEASE", QEvent::MouseButtonRelease,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MOUSEMOUVE", QEvent::MouseMove,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MOUSETRACKINGCHANGE", QEvent::MouseTrackingChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MOVE", QEvent::Move,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_PAINT", QEvent::Paint,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_PALETTECHANGE", QEvent::PaletteChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_PARENTABOUTTOCHANGE", QEvent::ParentAboutToChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_PARENTCHANGE", QEvent::ParentChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_POLISH", QEvent::Polish,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_POLISHREQUEST", QEvent::PolishRequest,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_QUERYWHATSTHIS", QEvent::QueryWhatsThis,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_RESIZE", QEvent::Resize,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_SHORTCUT", QEvent::Shortcut,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_SHORTCUTOVERRIDE", QEvent::ShortcutOverride,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_SHOW", QEvent::Show,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_SHOWTOPARENT", QEvent::ShowToParent,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_SOCKACT", QEvent::SockAct,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_STATUSTIP", QEvent::StatusTip,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_STYLECHANGE", QEvent::StyleChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_TABLEMOVE", QEvent::TabletMove,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_TABLETPRESS", QEvent::TabletPress,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_TABLETRELEASE", QEvent::TabletRelease,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_TIMER", QEvent::Timer,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_TOOLBARCHANGE", QEvent::ToolBarChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_TOOLTIP", QEvent::ToolTip,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_UPDATEREQUEST", QEvent::UpdateRequest,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WHATSTHIS", QEvent::WhatsThis,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WHATSTHISCLICKED", QEvent::WhatsThisClicked,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WHEEL", QEvent::Wheel,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINEVENTACT", QEvent::WinEventAct,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWACTIVATED", QEvent::WindowActivate,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWBLOCKED", QEvent::WindowBlocked,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWDEACTIVATED", QEvent::WindowDeactivate,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWICONCHANGE", QEvent::WindowIconChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWSTATECHANGE", QEvent::WindowStateChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWTITLECHANGE", QEvent::WindowTitleChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_WINDOWUNBLOCKED", QEvent::WindowUnblocked,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_ZORDERCHANGE", QEvent::ZOrderChange,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_USER", QEvent::User,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QEVENT_TYPE_MAXUSER", QEvent::MaxUser,CONST_CS | CONST_PERSISTENT);	
	
	
	_register_QLayoutItem(TSRMLS_C);
	
	_register_QLayout(TSRMLS_C);
	REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETDEFAULTCONSTRAINT",QLayout::SetDefaultConstraint ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETFIXEDSIZE",QLayout::SetFixedSize ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETMINIMUMSIZE",QLayout::SetMinimumSize ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETMAXIMUMSIZE",QLayout::SetMaximumSize ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETMINANDMAXSIZE",QLayout::SetMinAndMaxSize ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLAYOUT_SIZECONSTRAINT_SETNOTCONSTRAINT",QLayout::SetNoConstraint ,CONST_CS | CONST_PERSISTENT);	
	
	_register_QBoxLayout(TSRMLS_C);
	REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_LEFT_TO_RIGHT",QBoxLayout::LeftToRight ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_RIGHT_TO_LEFT",QBoxLayout::RightToLeft ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_TOP_TO_BOTTOM",QBoxLayout::TopToBottom ,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QBOXLAYOUT_DIRECTION_BOTTOM_TO_TOP",QBoxLayout::BottomToTop ,CONST_CS | CONST_PERSISTENT);	

	_register_QVBoxLayout(TSRMLS_C);
	_register_QHBoxLayout(TSRMLS_C);
	
	
	_register_QLineEdit(TSRMLS_C);
	REGISTER_LONG_CONSTANT("QLINEEDIT_ECHOMODE_NORMAL", QLineEdit::Normal,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLINEEDIT_ECHOMODE_NOECHO", QLineEdit::NoEcho,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QLINEEDIT_ECHOMODE_PASSWORD", QLineEdit::Password,CONST_CS | CONST_PERSISTENT);	

    _register_QAbstractSlider(TSRMLS_C);
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERNOACTION", QAbstractSlider::SliderNoAction,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERSINGLESTEPPADD", QAbstractSlider::SliderSingleStepAdd,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERSINGLESTEPSUB", QAbstractSlider::SliderSingleStepSub,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERPAGESETADD", QAbstractSlider::SliderPageStepAdd,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERPAGESETSUB", QAbstractSlider::SliderPageStepSub,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERTOMINIMUM", QAbstractSlider::SliderToMinimum,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERTOMAXIMUM", QAbstractSlider::SliderToMaximum,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QABSTRACTSLIDER_SLIDERACTION_SLIDERMOVE", QAbstractSlider::SliderMove,CONST_CS | CONST_PERSISTENT);	

    _register_QSlider(TSRMLS_C);

	REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_NOTICKS", QSlider::NoTicks,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSBOTHSIDES", QSlider::TicksBothSides,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSABOVE", QSlider::TicksAbove,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSBELOW", QSlider::TicksBelow,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSLEFT", QSlider::TicksLeft,CONST_CS | CONST_PERSISTENT);	
	REGISTER_LONG_CONSTANT("QSLIDER_TICKPOSITION_TICKSRIGHT", QSlider::TicksRight,CONST_CS | CONST_PERSISTENT);	

    _register_QFrame(TSRMLS_C);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_NOFRAME", QFrame::NoFrame, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_BOX", QFrame::Box, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_PANEL", QFrame::Panel, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_WINPANEL", QFrame::WinPanel, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_HLINE", QFrame::HLine, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_VLINE", QFrame::VLine, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHAPE_STYLEDPANEL", QFrame::StyledPanel, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHADOW_PLAIN", QFrame::Plain, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHADOW_RAISED", QFrame::Raised, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME_SHADOW_SUNKEN", QFrame::Sunken, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME__SHADOW_MASK", QFrame::Shadow_Mask, CONST_CS | CONST_PERSISTENT);
        REGISTER_LONG_CONSTANT("QFRAME__SHAPE_MASK", QFrame::Shape_Mask, CONST_CS | CONST_PERSISTENT);

// handfixed:
	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_UNKNOWNDEVICE", QInternal::UnknownDevice, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_WIDGET", QInternal::Widget, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PIXMAP", QInternal::Pixmap, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_IMAGE", QInternal::Image, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PRINTER", QInternal::Printer, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PICTURE", QInternal::Picture, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QINTERNAL_PAINTDEVICEFLAGS_PBUFFER", QInternal::Pbuffer, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTNORMAL", QInternal::RelayoutNormal, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTDRAGGING", QInternal::RelayoutDragging, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QINTERNAL_RELAYOUTTYPE_RELAYOUTDROPPED", QInternal::RelayoutDropped, CONST_CS | CONST_PERSISTENT);

	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_COLOR0", Qt::color0, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_COLOR1", Qt::color1, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_BLACK", Qt::black, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_WHITE", Qt::white, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKGRAY", Qt::darkGray, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_GRAY", Qt::gray, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_LIGHTGRAY", Qt::lightGray, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_RED", Qt::red, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_GREEN", Qt::green, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_BLUE", Qt::blue, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_CYAN", Qt::cyan, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_MAGENTA", Qt::magenta, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_YELLOW", Qt::yellow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKRED", Qt::darkRed, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKGREEN", Qt::darkGreen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKBLUE", Qt::darkBlue, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKCYAN", Qt::darkCyan, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKMAGENTA", Qt::darkMagenta, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_DARKYELLOW", Qt::darkYellow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_GLOBALCOLOR_TRANSPARENT", Qt::transparent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_NOMODIFIER", Qt::NoModifier, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_SHIFTMODIFIER", Qt::ShiftModifier, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_CONTROLMODIFIER", Qt::ControlModifier, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_ALTMODIFIER", Qt::AltModifier, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_METAMODIFIER", Qt::MetaModifier, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_KEYPADMODIFIER", Qt::KeypadModifier, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEYBOARDMODIFIER_KEYBOARDMODIFIERMASK", Qt::KeyboardModifierMask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MODIFIER_META", Qt::META, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MODIFIER_SHIFT", Qt::SHIFT, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MODIFIER_CTRL", Qt::CTRL, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MODIFIER_ALT", Qt::ALT, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MODIFIER_MODIFIER_MASK", Qt::MODIFIER_MASK, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MODIFIER_UNICODE_ACCEL", Qt::UNICODE_ACCEL, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_NOBUTTON", Qt::NoButton, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_LEFTBUTTON", Qt::LeftButton, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_RIGHTBUTTON", Qt::RightButton, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_MIDBUTTON", Qt::MidButton, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_XBUTTON1", Qt::XButton1, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_XBUTTON2", Qt::XButton2, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MOUSEBUTTON_MOUSEBUTTONMASK", Qt::MouseButtonMask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ORIENTATION_HORIZONTAL", Qt::Horizontal, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ORIENTATION_VERTICAL", Qt::Vertical, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_NOFOCUS", Qt::NoFocus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_TABFOCUS", Qt::TabFocus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_CLICKFOCUS", Qt::ClickFocus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_STRONGFOCUS", Qt::StrongFocus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSPOLICY_WHEELFOCUS", Qt::WheelFocus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SORTORDER_ASCENDINGORDER", Qt::AscendingOrder, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SORTORDER_DESCENDINGORDER", Qt::DescendingOrder, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNLEFT", Qt::AlignLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNLEADING", Qt::AlignLeading, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNRIGHT", Qt::AlignRight, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNTRAILING", Qt::AlignTrailing, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNHCENTER", Qt::AlignHCenter, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNJUSTIFY", Qt::AlignJustify, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNABSOLUTE", Qt::AlignAbsolute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNHORIZONTAL_MASK", Qt::AlignHorizontal_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNTOP", Qt::AlignTop, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNBOTTOM", Qt::AlignBottom, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNVCENTER", Qt::AlignVCenter, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNVERTICAL_MASK", Qt::AlignVertical_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ALIGNMENTFLAG_ALIGNCENTER", Qt::AlignCenter, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTSINGLELINE", Qt::TextSingleLine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTDONTCLIP", Qt::TextDontClip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTEXPANDTABS", Qt::TextExpandTabs, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTSHOWMNEMONIC", Qt::TextShowMnemonic, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTWORDWRAP", Qt::TextWordWrap, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTWRAPANYWHERE", Qt::TextWrapAnywhere, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTDONTPRINT", Qt::TextDontPrint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTINCLUDETRAILINGSPACES", Qt::TextIncludeTrailingSpaces, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFLAG_TEXTHIDEMNEMONIC", Qt::TextHideMnemonic, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTELIDEMODE_ELIDELEFT", Qt::ElideLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTELIDEMODE_ELIDERIGHT", Qt::ElideRight, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTELIDEMODE_ELIDEMIDDLE", Qt::ElideMiddle, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WIDGET", Qt::Widget, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOW", Qt::Window, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_DIALOG", Qt::Dialog, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_SHEET", Qt::Sheet, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_DRAWER", Qt::Drawer, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_POPUP", Qt::Popup, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_TOOL", Qt::Tool, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_TOOLTIP", Qt::ToolTip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_SPLASHSCREEN", Qt::SplashScreen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_DESKTOP", Qt::Desktop, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_SUBWINDOW", Qt::SubWindow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWTYPE_MASK", Qt::WindowType_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_MSWINDOWSFIXEDSIZEDIALOGHINT", Qt::MSWindowsFixedSizeDialogHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_MSWINDOWSOWNDC", Qt::MSWindowsOwnDC, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_X11BYPASSWINDOWMANAGERHINT", Qt::X11BypassWindowManagerHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_FRAMELESSWINDOWHINT", Qt::FramelessWindowHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWTITLEHINT", Qt::WindowTitleHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWSYSTEMMENUHINT", Qt::WindowSystemMenuHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWMINIMIZEBUTTONHINT", Qt::WindowMinimizeButtonHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWMAXIMIZEBUTTONHINT", Qt::WindowMaximizeButtonHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWMINMAXBUTTONSHINT", Qt::WindowMinMaxButtonsHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWCONTEXTHELPBUTTONHINT", Qt::WindowContextHelpButtonHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWSHADEBUTTONHINT", Qt::WindowShadeButtonHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWTYPE_WINDOWSTAYSONTOPHINT", Qt::WindowStaysOnTopHint, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWNOSTATE", Qt::WindowNoState, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWMINIMIZED", Qt::WindowMinimized, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWMAXIMIZED", Qt::WindowMaximized, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWFULLSCREEN", Qt::WindowFullScreen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWSTATE_WINDOWACTIVE", Qt::WindowActive, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_DISABLED", Qt::WA_Disabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_UNDERMOUSE", Qt::WA_UnderMouse, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MOUSETRACKING", Qt::WA_MouseTracking, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_CONTENTSPROPAGATED", Qt::WA_ContentsPropagated, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_OPAQUEPAINTEVENT", Qt::WA_OpaquePaintEvent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOBACKGROUND", Qt::WA_NoBackground, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_STATICCONTENTS", Qt::WA_StaticContents, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_LAIDOUT", Qt::WA_LaidOut, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PAINTONSCREEN", Qt::WA_PaintOnScreen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOSYSTEMBACKGROUND", Qt::WA_NoSystemBackground, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_UPDATESDISABLED", Qt::WA_UpdatesDisabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MAPPED", Qt::WA_Mapped, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MACNOCLICKTHROUGH", Qt::WA_MacNoClickThrough, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PAINTOUTSIDEPAINTEVENT", Qt::WA_PaintOutsidePaintEvent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_INPUTMETHODENABLED", Qt::WA_InputMethodEnabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_VISIBLE", Qt::WA_WState_Visible, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_HIDDEN", Qt::WA_WState_Hidden, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_FORCEDISABLED", Qt::WA_ForceDisabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_KEYCOMPRESSION", Qt::WA_KeyCompression, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PENDINGMOVEEVENT", Qt::WA_PendingMoveEvent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PENDINGRESIZEEVENT", Qt::WA_PendingResizeEvent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETPALETTE", Qt::WA_SetPalette, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETFONT", Qt::WA_SetFont, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETCURSOR", Qt::WA_SetCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOCHILDEVENTSFROMCHILDREN", Qt::WA_NoChildEventsFromChildren, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WINDOWMODIFIED", Qt::WA_WindowModified, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_RESIZED", Qt::WA_Resized, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MOVED", Qt::WA_Moved, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PENDINGUPDATE", Qt::WA_PendingUpdate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_INVALIDSIZE", Qt::WA_InvalidSize, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MACMETALSTYLE", Qt::WA_MacMetalStyle, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_CUSTOMWHATSTHIS", Qt::WA_CustomWhatsThis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_LAYOUTONENTIRERECT", Qt::WA_LayoutOnEntireRect, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_OUTSIDEWSRANGE", Qt::WA_OutsideWSRange, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_GRABBEDSHORTCUT", Qt::WA_GrabbedShortcut, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_TRANSPARENTFORMOUSEEVENTS", Qt::WA_TransparentForMouseEvents, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_PAINTUNCLIPPED", Qt::WA_PaintUnclipped, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETWINDOWICON", Qt::WA_SetWindowIcon, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOMOUSEREPLAY", Qt::WA_NoMouseReplay, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_DELETEONCLOSE", Qt::WA_DeleteOnClose, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_RIGHTTOLEFT", Qt::WA_RightToLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SETLAYOUTDIRECTION", Qt::WA_SetLayoutDirection, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOCHILDEVENTSFORPARENT", Qt::WA_NoChildEventsForParent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_FORCEUPDATESDISABLED", Qt::WA_ForceUpdatesDisabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_CREATED", Qt::WA_WState_Created, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_COMPRESSKEYS", Qt::WA_WState_CompressKeys, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_INPAINTEVENT", Qt::WA_WState_InPaintEvent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_REPARENTED", Qt::WA_WState_Reparented, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_CONFIGPENDING", Qt::WA_WState_ConfigPending, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_POLISHED", Qt::WA_WState_Polished, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_DND", Qt::WA_WState_DND, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_OWNSIZEPOLICY", Qt::WA_WState_OwnSizePolicy, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WSTATE_EXPLICITSHOWHIDE", Qt::WA_WState_ExplicitShowHide, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_SHOWMODAL", Qt::WA_ShowModal, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_MOUSENOMASK", Qt::WA_MouseNoMask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_GROUPLEADER", Qt::WA_GroupLeader, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOMOUSEPROPAGATION", Qt::WA_NoMousePropagation, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_HOVER", Qt::WA_Hover, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_INPUTMETHODTRANSPARENT", Qt::WA_InputMethodTransparent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_QUITONCLOSE", Qt::WA_QuitOnClose, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_KEYBOARDFOCUSCHANGE", Qt::WA_KeyboardFocusChange, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_ACCEPTDROPS", Qt::WA_AcceptDrops, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_DROPSITEREGISTERED", Qt::WA_DropSiteRegistered, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_FORCEACCEPTDROPS", Qt::WA_ForceAcceptDrops, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_WINDOWPROPAGATION", Qt::WA_WindowPropagation, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_NOX11EVENTCOMPRESSION", Qt::WA_NoX11EventCompression, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_TINTEDBACKGROUND", Qt::WA_TintedBackground, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WIDGETATTRIBUTE_WA_ATTRIBUTECOUNT", Qt::WA_AttributeCount, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_COLORMODE_MASK", Qt::ColorMode_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_AUTOCOLOR", Qt::AutoColor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_COLORONLY", Qt::ColorOnly, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_MONOONLY", Qt::MonoOnly, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_ALPHADITHER_MASK", Qt::AlphaDither_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_THRESHOLDALPHADITHER", Qt::ThresholdAlphaDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_ORDEREDALPHADITHER", Qt::OrderedAlphaDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DIFFUSEALPHADITHER", Qt::DiffuseAlphaDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_NOALPHA", Qt::NoAlpha, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DITHER_MASK", Qt::Dither_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DIFFUSEDITHER", Qt::DiffuseDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_ORDEREDDITHER", Qt::OrderedDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_THRESHOLDDITHER", Qt::ThresholdDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_DITHERMODE_MASK", Qt::DitherMode_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_AUTODITHER", Qt::AutoDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_PREFERDITHER", Qt::PreferDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_IMAGECONVERSIONFLAG_AVOIDDITHER", Qt::AvoidDither, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BGMODE_TRANSPARENTMODE", Qt::TransparentMode, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BGMODE_OPAQUEMODE", Qt::OpaqueMode, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ESCAPE", Qt::Key_Escape, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TAB", Qt::Key_Tab, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACKTAB", Qt::Key_Backtab, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACKSPACE", Qt::Key_Backspace, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_RETURN", Qt::Key_Return, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ENTER", Qt::Key_Enter, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_INSERT", Qt::Key_Insert, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DELETE", Qt::Key_Delete, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PAUSE", Qt::Key_Pause, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PRINT", Qt::Key_Print, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SYSREQ", Qt::Key_SysReq, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CLEAR", Qt::Key_Clear, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HOME", Qt::Key_Home, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_END", Qt::Key_End, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LEFT", Qt::Key_Left, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UP", Qt::Key_Up, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_RIGHT", Qt::Key_Right, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DOWN", Qt::Key_Down, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PAGEUP", Qt::Key_PageUp, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PAGEDOWN", Qt::Key_PageDown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SHIFT", Qt::Key_Shift, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTROL", Qt::Key_Control, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_META", Qt::Key_Meta, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ALT", Qt::Key_Alt, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CAPSLOCK", Qt::Key_CapsLock, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NUMLOCK", Qt::Key_NumLock, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SCROLLLOCK", Qt::Key_ScrollLock, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F1", Qt::Key_F1, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F2", Qt::Key_F2, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F3", Qt::Key_F3, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F4", Qt::Key_F4, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F5", Qt::Key_F5, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F6", Qt::Key_F6, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F7", Qt::Key_F7, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F8", Qt::Key_F8, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F9", Qt::Key_F9, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F10", Qt::Key_F10, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F11", Qt::Key_F11, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F12", Qt::Key_F12, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F13", Qt::Key_F13, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F14", Qt::Key_F14, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F15", Qt::Key_F15, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F16", Qt::Key_F16, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F17", Qt::Key_F17, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F18", Qt::Key_F18, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F19", Qt::Key_F19, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F20", Qt::Key_F20, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F21", Qt::Key_F21, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F22", Qt::Key_F22, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F23", Qt::Key_F23, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F24", Qt::Key_F24, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F25", Qt::Key_F25, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F26", Qt::Key_F26, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F27", Qt::Key_F27, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F28", Qt::Key_F28, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F29", Qt::Key_F29, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F30", Qt::Key_F30, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F31", Qt::Key_F31, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F32", Qt::Key_F32, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F33", Qt::Key_F33, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F34", Qt::Key_F34, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F35", Qt::Key_F35, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SUPER_L", Qt::Key_Super_L, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SUPER_R", Qt::Key_Super_R, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MENU", Qt::Key_Menu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HYPER_L", Qt::Key_Hyper_L, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HYPER_R", Qt::Key_Hyper_R, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HELP", Qt::Key_Help, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIRECTION_L", Qt::Key_Direction_L, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIRECTION_R", Qt::Key_Direction_R, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SPACE", Qt::Key_Space, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ANY", Qt::Key_Any, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EXCLAM", Qt::Key_Exclam, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUOTEDBL", Qt::Key_QuoteDbl, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NUMBERSIGN", Qt::Key_NumberSign, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DOLLAR", Qt::Key_Dollar, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PERCENT", Qt::Key_Percent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AMPERSAND", Qt::Key_Ampersand, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_APOSTROPHE", Qt::Key_Apostrophe, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PARENLEFT", Qt::Key_ParenLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PARENRIGHT", Qt::Key_ParenRight, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ASTERISK", Qt::Key_Asterisk, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PLUS", Qt::Key_Plus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_COMMA", Qt::Key_Comma, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MINUS", Qt::Key_Minus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PERIOD", Qt::Key_Period, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SLASH", Qt::Key_Slash, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_0", Qt::Key_0, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_1", Qt::Key_1, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_2", Qt::Key_2, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_3", Qt::Key_3, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_4", Qt::Key_4, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_5", Qt::Key_5, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_6", Qt::Key_6, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_7", Qt::Key_7, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_8", Qt::Key_8, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_9", Qt::Key_9, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_COLON", Qt::Key_Colon, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SEMICOLON", Qt::Key_Semicolon, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LESS", Qt::Key_Less, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EQUAL", Qt::Key_Equal, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_GREATER", Qt::Key_Greater, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUESTION", Qt::Key_Question, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AT", Qt::Key_At, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_A", Qt::Key_A, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_B", Qt::Key_B, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_C", Qt::Key_C, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_D", Qt::Key_D, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_E", Qt::Key_E, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_F", Qt::Key_F, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_G", Qt::Key_G, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_H", Qt::Key_H, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_I", Qt::Key_I, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_J", Qt::Key_J, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_K", Qt::Key_K, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_L", Qt::Key_L, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_M", Qt::Key_M, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_N", Qt::Key_N, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_O", Qt::Key_O, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_P", Qt::Key_P, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_Q", Qt::Key_Q, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_R", Qt::Key_R, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_S", Qt::Key_S, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_T", Qt::Key_T, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_U", Qt::Key_U, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_V", Qt::Key_V, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_W", Qt::Key_W, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_X", Qt::Key_X, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_Y", Qt::Key_Y, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_Z", Qt::Key_Z, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACKETLEFT", Qt::Key_BracketLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACKSLASH", Qt::Key_Backslash, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACKETRIGHT", Qt::Key_BracketRight, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ASCIICIRCUM", Qt::Key_AsciiCircum, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UNDERSCORE", Qt::Key_Underscore, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUOTELEFT", Qt::Key_QuoteLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACELEFT", Qt::Key_BraceLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BAR", Qt::Key_Bar, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BRACERIGHT", Qt::Key_BraceRight, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ASCIITILDE", Qt::Key_AsciiTilde, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NOBREAKSPACE", Qt::Key_nobreakspace, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EXCLAMDOWN", Qt::Key_exclamdown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CENT", Qt::Key_cent, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_STERLING", Qt::Key_sterling, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CURRENCY", Qt::Key_currency, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YEN", Qt::Key_yen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BROKENBAR", Qt::Key_brokenbar, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SECTION", Qt::Key_section, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIAERESIS", Qt::Key_diaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_COPYRIGHT", Qt::Key_copyright, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ORDFEMININE", Qt::Key_ordfeminine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_GUILLEMOTLEFT", Qt::Key_guillemotleft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NOTSIGN", Qt::Key_notsign, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HYPHEN", Qt::Key_hyphen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_REGISTERED", Qt::Key_registered, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MACRON", Qt::Key_macron, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEGREE", Qt::Key_degree, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PLUSMINUS", Qt::Key_plusminus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TWOSUPERIOR", Qt::Key_twosuperior, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_THREESUPERIOR", Qt::Key_threesuperior, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ACUTE", Qt::Key_acute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MU", Qt::Key_mu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PARAGRAPH", Qt::Key_paragraph, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PERIODCENTERED", Qt::Key_periodcentered, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CEDILLA", Qt::Key_cedilla, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ONESUPERIOR", Qt::Key_onesuperior, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MASCULINE", Qt::Key_masculine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_GUILLEMOTRIGHT", Qt::Key_guillemotright, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ONEQUARTER", Qt::Key_onequarter, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ONEHALF", Qt::Key_onehalf, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_THREEQUARTERS", Qt::Key_threequarters, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_QUESTIONDOWN", Qt::Key_questiondown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AGRAVE", Qt::Key_Agrave, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AACUTE", Qt::Key_Aacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ACIRCUMFLEX", Qt::Key_Acircumflex, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ATILDE", Qt::Key_Atilde, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ADIAERESIS", Qt::Key_Adiaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ARING", Qt::Key_Aring, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_AE", Qt::Key_AE, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CCEDILLA", Qt::Key_Ccedilla, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EGRAVE", Qt::Key_Egrave, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EACUTE", Qt::Key_Eacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ECIRCUMFLEX", Qt::Key_Ecircumflex, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EDIAERESIS", Qt::Key_Ediaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_IGRAVE", Qt::Key_Igrave, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_IACUTE", Qt::Key_Iacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ICIRCUMFLEX", Qt::Key_Icircumflex, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_IDIAERESIS", Qt::Key_Idiaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ETH", Qt::Key_ETH, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NTILDE", Qt::Key_Ntilde, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OGRAVE", Qt::Key_Ograve, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OACUTE", Qt::Key_Oacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OCIRCUMFLEX", Qt::Key_Ocircumflex, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OTILDE", Qt::Key_Otilde, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ODIAERESIS", Qt::Key_Odiaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MULTIPLY", Qt::Key_multiply, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OOBLIQUE", Qt::Key_Ooblique, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UGRAVE", Qt::Key_Ugrave, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UACUTE", Qt::Key_Uacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UCIRCUMFLEX", Qt::Key_Ucircumflex, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UDIAERESIS", Qt::Key_Udiaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YACUTE", Qt::Key_Yacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_THORN", Qt::Key_THORN, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SSHARP", Qt::Key_ssharp, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DIVISION", Qt::Key_division, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YDIAERESIS", Qt::Key_ydiaeresis, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ALTGR", Qt::Key_AltGr, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MULTI_KEY", Qt::Key_Multi_key, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CODEINPUT", Qt::Key_Codeinput, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SINGLECANDIDATE", Qt::Key_SingleCandidate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MULTIPLECANDIDATE", Qt::Key_MultipleCandidate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_PREVIOUSCANDIDATE", Qt::Key_PreviousCandidate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MODE_SWITCH", Qt::Key_Mode_switch, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KANJI", Qt::Key_Kanji, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MUHENKAN", Qt::Key_Muhenkan, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HENKAN", Qt::Key_Henkan, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ROMAJI", Qt::Key_Romaji, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HIRAGANA", Qt::Key_Hiragana, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KATAKANA", Qt::Key_Katakana, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HIRAGANA_KATAKANA", Qt::Key_Hiragana_Katakana, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ZENKAKU", Qt::Key_Zenkaku, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANKAKU", Qt::Key_Hankaku, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_ZENKAKU_HANKAKU", Qt::Key_Zenkaku_Hankaku, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TOUROKU", Qt::Key_Touroku, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MASSYO", Qt::Key_Massyo, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KANA_LOCK", Qt::Key_Kana_Lock, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_KANA_SHIFT", Qt::Key_Kana_Shift, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EISU_SHIFT", Qt::Key_Eisu_Shift, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_EISU_TOGGLE", Qt::Key_Eisu_toggle, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL", Qt::Key_Hangul, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_START", Qt::Key_Hangul_Start, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_END", Qt::Key_Hangul_End, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_HANJA", Qt::Key_Hangul_Hanja, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_JAMO", Qt::Key_Hangul_Jamo, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_ROMAJA", Qt::Key_Hangul_Romaja, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_JEONJA", Qt::Key_Hangul_Jeonja, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_BANJA", Qt::Key_Hangul_Banja, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_PREHANJA", Qt::Key_Hangul_PreHanja, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_POSTHANJA", Qt::Key_Hangul_PostHanja, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUL_SPECIAL", Qt::Key_Hangul_Special, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_GRAVE", Qt::Key_Dead_Grave, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_ACUTE", Qt::Key_Dead_Acute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_CIRCUMFLEX", Qt::Key_Dead_Circumflex, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_TILDE", Qt::Key_Dead_Tilde, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_MACRON", Qt::Key_Dead_Macron, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_BREVE", Qt::Key_Dead_Breve, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_ABOVEDOT", Qt::Key_Dead_Abovedot, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_DIAERESIS", Qt::Key_Dead_Diaeresis, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_ABOVERING", Qt::Key_Dead_Abovering, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_DOUBLEACUTE", Qt::Key_Dead_Doubleacute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_CARON", Qt::Key_Dead_Caron, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_CEDILLA", Qt::Key_Dead_Cedilla, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_OGONEK", Qt::Key_Dead_Ogonek, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_IOTA", Qt::Key_Dead_Iota, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_VOICED_SOUND", Qt::Key_Dead_Voiced_Sound, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_SEMIVOICED_SOUND", Qt::Key_Dead_Semivoiced_Sound, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_BELOWDOT", Qt::Key_Dead_Belowdot, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_HOOK", Qt::Key_Dead_Hook, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_DEAD_HORN", Qt::Key_Dead_Horn, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BACK", Qt::Key_Back, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_FORWARD", Qt::Key_Forward, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_STOP", Qt::Key_Stop, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_REFRESH", Qt::Key_Refresh, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_VOLUMEDOWN", Qt::Key_VolumeDown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_VOLUMEMUTE", Qt::Key_VolumeMute, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_VOLUMEUP", Qt::Key_VolumeUp, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BASSBOOST", Qt::Key_BassBoost, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BASSUP", Qt::Key_BassUp, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_BASSDOWN", Qt::Key_BassDown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TREBLEUP", Qt::Key_TrebleUp, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_TREBLEDOWN", Qt::Key_TrebleDown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIAPLAY", Qt::Key_MediaPlay, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIASTOP", Qt::Key_MediaStop, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIAPREVIOUS", Qt::Key_MediaPrevious, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIANEXT", Qt::Key_MediaNext, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIARECORD", Qt::Key_MediaRecord, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HOMEPAGE", Qt::Key_HomePage, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_FAVORITES", Qt::Key_Favorites, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SEARCH", Qt::Key_Search, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_STANDBY", Qt::Key_Standby, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_OPENURL", Qt::Key_OpenUrl, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHMAIL", Qt::Key_LaunchMail, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHMEDIA", Qt::Key_LaunchMedia, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH0", Qt::Key_Launch0, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH1", Qt::Key_Launch1, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH2", Qt::Key_Launch2, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH3", Qt::Key_Launch3, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH4", Qt::Key_Launch4, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH5", Qt::Key_Launch5, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH6", Qt::Key_Launch6, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH7", Qt::Key_Launch7, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH8", Qt::Key_Launch8, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCH9", Qt::Key_Launch9, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHA", Qt::Key_LaunchA, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHB", Qt::Key_LaunchB, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHC", Qt::Key_LaunchC, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHD", Qt::Key_LaunchD, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHE", Qt::Key_LaunchE, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_LAUNCHF", Qt::Key_LaunchF, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_MEDIALAST", Qt::Key_MediaLast, CONST_CS | CONST_PERSISTENT);
/*	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_SELECT", Qt::Key_Select, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_YES", Qt::Key_Yes, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_NO", Qt::Key_No, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT1", Qt::Key_Context1, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT2", Qt::Key_Context2, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT3", Qt::Key_Context3, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CONTEXT4", Qt::Key_Context4, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_CALL", Qt::Key_Call, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_HANGUP", Qt::Key_Hangup, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_FLIP", Qt::Key_Flip, CONST_CS | CONST_PERSISTENT);
*/	  REGISTER_LONG_CONSTANT("QT_KEY_KEY_UNKNOWN", Qt::Key_unknown, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_NOARROW", Qt::NoArrow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_UPARROW", Qt::UpArrow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_DOWNARROW", Qt::DownArrow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_LEFTARROW", Qt::LeftArrow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ARROWTYPE_RIGHTARROW", Qt::RightArrow, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_NOPEN", Qt::NoPen, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_SOLIDLINE", Qt::SolidLine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DASHLINE", Qt::DashLine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DOTLINE", Qt::DotLine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DASHDOTLINE", Qt::DashDotLine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_DASHDOTDOTLINE", Qt::DashDotDotLine, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_CUSTOMDASHLINE", Qt::CustomDashLine, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENSTYLE_MPENSTYLE", Qt::MPenStyle, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_FLATCAP", Qt::FlatCap, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_SQUARECAP", Qt::SquareCap, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_ROUNDCAP", Qt::RoundCap, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENCAPSTYLE_MPENCAPSTYLE", Qt::MPenCapStyle, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_MITERJOIN", Qt::MiterJoin, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_BEVELJOIN", Qt::BevelJoin, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_ROUNDJOIN", Qt::RoundJoin, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_PENJOINSTYLE_MPENJOINSTYLE", Qt::MPenJoinStyle, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_NOBRUSH", Qt::NoBrush, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_SOLIDPATTERN", Qt::SolidPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE1PATTERN", Qt::Dense1Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE2PATTERN", Qt::Dense2Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE3PATTERN", Qt::Dense3Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE4PATTERN", Qt::Dense4Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE5PATTERN", Qt::Dense5Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE6PATTERN", Qt::Dense6Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DENSE7PATTERN", Qt::Dense7Pattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_HORPATTERN", Qt::HorPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_VERPATTERN", Qt::VerPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_CROSSPATTERN", Qt::CrossPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_BDIAGPATTERN", Qt::BDiagPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_FDIAGPATTERN", Qt::FDiagPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_DIAGCROSSPATTERN", Qt::DiagCrossPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_LINEARGRADIENTPATTERN", Qt::LinearGradientPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_RADIALGRADIENTPATTERN", Qt::RadialGradientPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_CONICALGRADIENTPATTERN", Qt::ConicalGradientPattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_BRUSHSTYLE_TEXTUREPATTERN", Qt::TexturePattern, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_GENERAL", Qt::UI_General, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATEMENU", Qt::UI_AnimateMenu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_FADEMENU", Qt::UI_FadeMenu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATECOMBO", Qt::UI_AnimateCombo, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATETOOLTIP", Qt::UI_AnimateTooltip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_FADETOOLTIP", Qt::UI_FadeTooltip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_UIEFFECT_UI_ANIMATETOOLBOX", Qt::UI_AnimateToolBox, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_ARROWCURSOR", Qt::ArrowCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_UPARROWCURSOR", Qt::UpArrowCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_CROSSCURSOR", Qt::CrossCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_WAITCURSOR", Qt::WaitCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_IBEAMCURSOR", Qt::IBeamCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEVERCURSOR", Qt::SizeVerCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEHORCURSOR", Qt::SizeHorCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEBDIAGCURSOR", Qt::SizeBDiagCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEFDIAGCURSOR", Qt::SizeFDiagCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SIZEALLCURSOR", Qt::SizeAllCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_BLANKCURSOR", Qt::BlankCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SPLITVCURSOR", Qt::SplitVCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_SPLITHCURSOR", Qt::SplitHCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_POINTINGHANDCURSOR", Qt::PointingHandCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_FORBIDDENCURSOR", Qt::ForbiddenCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_WHATSTHISCURSOR", Qt::WhatsThisCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_BUSYCURSOR", Qt::BusyCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_LASTCURSOR", Qt::LastCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CURSORSHAPE_BITMAPCURSOR", Qt::BitmapCursor, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_PLAINTEXT", Qt::PlainText, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_RICHTEXT", Qt::RichText, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_AUTOTEXT", Qt::AutoText, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TEXTFORMAT_LOGTEXT", Qt::LogText, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ASPECTRATIOMODE_IGNOREASPECTRATIO", Qt::IgnoreAspectRatio, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ASPECTRATIOMODE_KEEPASPECTRATIO", Qt::KeepAspectRatio, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ASPECTRATIOMODE_KEEPASPECTRATIOBYEXPANDING", Qt::KeepAspectRatioByExpanding, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ANCHORATTRIBUTE_ANCHORNAME", Qt::AnchorName, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ANCHORATTRIBUTE_ANCHORHREF", Qt::AnchorHref, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_LEFTDOCKWIDGETAREA", Qt::LeftDockWidgetArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_RIGHTDOCKWIDGETAREA", Qt::RightDockWidgetArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_TOPDOCKWIDGETAREA", Qt::TopDockWidgetArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_BOTTOMDOCKWIDGETAREA", Qt::BottomDockWidgetArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_DOCKWIDGETAREA_MASK", Qt::DockWidgetArea_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DOCKWIDGETAREA_ALLDOCKWIDGETAREAS", Qt::AllDockWidgetAreas, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT__NDOCKWIDGETAREAS", Qt::NDockWidgetAreas, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_LEFTTOOLBARAREA", Qt::LeftToolBarArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_RIGHTTOOLBARAREA", Qt::RightToolBarArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_TOPTOOLBARAREA", Qt::TopToolBarArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_BOTTOMTOOLBARAREA", Qt::BottomToolBarArea, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_TOOLBARAREA_MASK", Qt::ToolBarArea_Mask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBARAREA_ALLTOOLBARAREAS", Qt::AllToolBarAreas, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT__NTOOLBARAREAS", Qt::NToolBarAreas, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DATEFORMAT_TEXTDATE", Qt::TextDate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DATEFORMAT_ISODATE", Qt::ISODate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DATEFORMAT_LOCALDATE", Qt::LocalDate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TIMESPEC_LOCALTIME", Qt::LocalTime, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TIMESPEC_UTC", Qt::UTC, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_MONDAY", Qt::Monday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_TUESDAY", Qt::Tuesday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_WEDNESDAY", Qt::Wednesday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_THURSDAY", Qt::Thursday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_FRIDAY", Qt::Friday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_SATURDAY", Qt::Saturday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DAYOFWEEK_SUNDAY", Qt::Sunday, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SCROLLBARPOLICY_SCROLLBARASNEEDED", Qt::ScrollBarAsNeeded, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SCROLLBARPOLICY_SCROLLBARALWAYSOFF", Qt::ScrollBarAlwaysOff, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SCROLLBARPOLICY_SCROLLBARALWAYSON", Qt::ScrollBarAlwaysOn, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CASESENSITIVITY_CASEINSENSITIVE", Qt::CaseInsensitive, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CASESENSITIVITY_CASESENSITIVE", Qt::CaseSensitive, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CORNER_TOPLEFTCORNER", Qt::TopLeftCorner, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CORNER_TOPRIGHTCORNER", Qt::TopRightCorner, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CORNER_BOTTOMLEFTCORNER", Qt::BottomLeftCorner, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CORNER_BOTTOMRIGHTCORNER", Qt::BottomRightCorner, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_AUTOCONNECTION", Qt::AutoConnection, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_DIRECTCONNECTION", Qt::DirectConnection, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_QUEUEDCONNECTION", Qt::QueuedConnection, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONNECTIONTYPE_AUTOCOMPATCONNECTION", Qt::AutoCompatConnection, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SHORTCUTCONTEXT_WIDGETSHORTCUT", Qt::WidgetShortcut, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SHORTCUTCONTEXT_WINDOWSHORTCUT", Qt::WindowShortcut, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_SHORTCUTCONTEXT_APPLICATIONSHORTCUT", Qt::ApplicationShortcut, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FILLRULE_ODDEVENFILL", Qt::OddEvenFill, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FILLRULE_WINDINGFILL", Qt::WindingFill, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_NOCLIP", Qt::NoClip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_REPLACECLIP", Qt::ReplaceClip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_INTERSECTCLIP", Qt::IntersectClip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CLIPOPERATION_UNITECLIP", Qt::UniteClip, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TRANSFORMATIONMODE_FASTTRANSFORMATION", Qt::FastTransformation, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TRANSFORMATIONMODE_SMOOTHTRANSFORMATION", Qt::SmoothTransformation, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_MOUSEFOCUSREASON", Qt::MouseFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_TABFOCUSREASON", Qt::TabFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_BACKTABFOCUSREASON", Qt::BacktabFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_ACTIVEWINDOWFOCUSREASON", Qt::ActiveWindowFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_POPUPFOCUSREASON", Qt::PopupFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_SHORTCUTFOCUSREASON", Qt::ShortcutFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_MENUBARFOCUSREASON", Qt::MenuBarFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_OTHERFOCUSREASON", Qt::OtherFocusReason, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_FOCUSREASON_NOFOCUSREASON", Qt::NoFocusReason, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_NOCONTEXTMENU", Qt::NoContextMenu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_DEFAULTCONTEXTMENU", Qt::DefaultContextMenu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_ACTIONSCONTEXTMENU", Qt::ActionsContextMenu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CONTEXTMENUPOLICY_CUSTOMCONTEXTMENU", Qt::CustomContextMenu, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMMICROFOCUS", Qt::ImMicroFocus, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMFONT", Qt::ImFont, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMCURSORPOSITION", Qt::ImCursorPosition, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMSURROUNDINGTEXT", Qt::ImSurroundingText, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_INPUTMETHODQUERY_IMCURRENTSELECTION", Qt::ImCurrentSelection, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONICONONLY", Qt::ToolButtonIconOnly, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONTEXTONLY", Qt::ToolButtonTextOnly, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONTEXTBESIDEICON", Qt::ToolButtonTextBesideIcon, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_TOOLBUTTONSTYLE_TOOLBUTTONTEXTUNDERICON", Qt::ToolButtonTextUnderIcon, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_LAYOUTDIRECTION_LEFTTORIGHT", Qt::LeftToRight, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_LAYOUTDIRECTION_RIGHTTOLEFT", Qt::RightToLeft, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DROPACTION_COPYACTION", Qt::CopyAction, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DROPACTION_MOVEACTION", Qt::MoveAction, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DROPACTION_LINKACTION", Qt::LinkAction, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DROPACTION_ACTIONMASK", Qt::ActionMask, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DROPACTION_TARGETMOVEACTION", Qt::TargetMoveAction, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_DROPACTION_IGNOREACTION", Qt::IgnoreAction, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CHECKSTATE_UNCHECKED", Qt::Unchecked, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CHECKSTATE_PARTIALLYCHECKED", Qt::PartiallyChecked, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_CHECKSTATE_CHECKED", Qt::Checked, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_DISPLAYROLE", Qt::DisplayRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_DECORATIONROLE", Qt::DecorationRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_EDITROLE", Qt::EditRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_TOOLTIPROLE", Qt::ToolTipRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_STATUSTIPROLE", Qt::StatusTipRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_WHATSTHISROLE", Qt::WhatsThisRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_FONTROLE", Qt::FontRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_TEXTALIGNMENTROLE", Qt::TextAlignmentRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_BACKGROUNDCOLORROLE", Qt::BackgroundColorRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_TEXTCOLORROLE", Qt::TextColorRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_CHECKSTATEROLE", Qt::CheckStateRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_ACCESSIBLETEXTROLE", Qt::AccessibleTextRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_ACCESSIBLEDESCRIPTIONROLE", Qt::AccessibleDescriptionRole, CONST_CS | CONST_PERSISTENT);
//	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_SIZEHINTROLE", Qt::SizeHintRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMDATAROLE_USERROLE", Qt::UserRole, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISSELECTABLE", Qt::ItemIsSelectable, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISEDITABLE", Qt::ItemIsEditable, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISDRAGENABLED", Qt::ItemIsDragEnabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISDROPENABLED", Qt::ItemIsDropEnabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISUSERCHECKABLE", Qt::ItemIsUserCheckable, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISENABLED", Qt::ItemIsEnabled, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_ITEMFLAG_ITEMISTRISTATE", Qt::ItemIsTristate, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHEXACTLY", Qt::MatchExactly, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHCONTAINS", Qt::MatchContains, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHSTARTSWITH", Qt::MatchStartsWith, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHENDSWITH", Qt::MatchEndsWith, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHREGEXP", Qt::MatchRegExp, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHWILDCARD", Qt::MatchWildcard, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHCASESENSITIVE", Qt::MatchCaseSensitive, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHWRAP", Qt::MatchWrap, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_MATCHFLAG_MATCHRECURSIVE", Qt::MatchRecursive, CONST_CS | CONST_PERSISTENT);
/*	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_NONMODAL", Qt::NonModal, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_WINDOWMODAL", Qt::WindowModal, CONST_CS | CONST_PERSISTENT);
	  REGISTER_LONG_CONSTANT("QT_WINDOWMODALITY_APPLICATIONMODAL", Qt::ApplicationModal, CONST_CS | CONST_PERSISTENT);
*/

#include "ag_qt_minit.inc"


	le_php_qt_hashtype = zend_register_list_destructors_ex(destroy_php_qt_hashtable, NULL, "PHP-Qt object list", module_number);

	zend_hash_init_ex(&php_qt_objptr_hash, 50, NULL, NULL, 1, 0);


	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MSHUTDOWN_FUNCTION
 */
PHP_MSHUTDOWN_FUNCTION(php_qt)
{
	/* uncomment this line if you have INI entries
	UNREGISTER_INI_ENTRIES();
	*/
	return SUCCESS;
}
/* }}} */

/* Remove if there's nothing to do at request start */
/* {{{ PHP_RINIT_FUNCTION
 */
PHP_RINIT_FUNCTION(php_qt)
{


	return SUCCESS;
}
/* }}} */

/* Remove if there's nothing to do at request end */
/* {{{ PHP_RSHUTDOWN_FUNCTION
 */
PHP_RSHUTDOWN_FUNCTION(php_qt)
{
	zend_hash_destroy(&php_qt_objptr_hash);
	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MINFO_FUNCTION
 */
PHP_MINFO_FUNCTION(php_qt)
{
	php_info_print_table_start();
	php_info_print_table_header(2, "php_qt support", "enabled");
	php_info_print_table_end();

	/* Remove comments if you have entries in php.ini
	DISPLAY_INI_ENTRIES();
	*/
}
/* }}} */

/* Remove the following function when you have succesfully modified config.m4
   so that your module can be compiled into PHP, it exists only for testing
   purposes. */

/* Every user-visible function in PHP should document itself in the source */
/* {{{ proto string confirm_php_qt_compiled(string arg)
   Return a string to confirm that the module is compiled in */
PHP_FUNCTION(confirm_php_qt_compiled)
{
	char *arg = NULL;
	int arg_len, len;
	char string[256];

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &arg, &arg_len) == FAILURE) {
		return;
	}

  	len = sprintf(string, "Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.", "php_qt", arg);
	RETURN_STRINGL(string, len, 1);

}

/*
 *  emulate the SIGNAL(), SLOT() macros in Qt
 */

PHP_FUNCTION(SIGNAL)
{
    const char* string;
    int string_len;
    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
        return;
    }

    char* tmp = (char*) emalloc((int) string_len + 2);
    strcpy(tmp,"2");

    strncat(tmp, string, (int) string_len);

    ZVAL_STRING(return_value,tmp,1);

    efree(tmp);

    return;
}

PHP_FUNCTION(SLOT)
{
    const char* string;
    int string_len;
    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"s",&string,&string_len)) {
        return;
    }

    char* tmp = (char*) emalloc((int) string_len + 2);
    strcpy(tmp,"1");

    strncat(tmp, string, (int) string_len);

    ZVAL_STRING(return_value,tmp,1);

    efree(tmp);

    return;
}

/* }}} */
/* {{{ */

void php_qt_register(zval* this_ptr, zend_rsrc_list_entry le){
	php_qt_setObject(this_ptr, le.ptr);
}

void php_qt_setObject(zval* this_ptr, void* obj){

	zval *listhandle;
	MAKE_STD_ZVAL(listhandle);
	Z_TYPE_P(listhandle) = IS_LONG;
	Z_LVAL_P(listhandle) = zend_list_insert(obj, le_php_qt_hashtype);

	if(zend_hash_index_update(Z_OBJPROP_P(this_ptr), 0, &listhandle, sizeof(zval*), NULL) == FAILURE){
		php_error(E_ERROR,"could not bind resource to object.");
	}
	zval_add_ref(&this_ptr);

	if(zend_hash_index_update(&php_qt_objptr_hash, (long) obj, (void*) &this_ptr, sizeof(zval *), NULL) == FAILURE){
		php_error(E_ERROR,"could not register Qt object in resource table.");
	}

}

void* php_qt_fetch(zval* this_ptr){

	void *ptr;
	zval **listhandle;
	int type;
	TSRMLS_FETCH();

	if(zend_hash_index_find(Z_OBJPROP_P(this_ptr), 0, (void**) &listhandle) == FAILURE){
	  php_error(E_WARNING,"reference to Qt object missing.");
	}
	ptr = zend_list_find(Z_LVAL_PP(listhandle), &type);

	if(!ptr){
		php_error(E_ERROR,"reference to Qt object missing.");
	} 
	if(type != le_php_qt_hashtype){
		php_error(E_ERROR,"wrong type.");
	}

	return ptr;

}

static void destroy_php_qt_hashtable(zend_rsrc_list_entry *rsrc TSRMLS_DC)
{
#ifdef DEBUG
	php_error(E_ERROR,"Hashtable destroyed. Shutdown PHP-Qt now.");
#endif
}


///
static zend_function_entry QObject_methods[] = { 
    ZEND_ME(QObject,__construct,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,test,NULL,ZEND_ACC_PUBLIC)    
    ZEND_ME(QObject,blockSignals,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,children,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,connect,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
    ZEND_ME(QObject,disconnect,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
    ZEND_ME(QObject,dumpObjectInfo,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,dumpObjectTree,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,event,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,eventFilter,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,findChild,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,findChildren,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,inherits,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,installEventFilter,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,isWidgetType,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,killTimer,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,metaObject,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,moveToThread,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,objectName,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,parent,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,property,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,removeEventFilter,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,setObjectName,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,setParent,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,setProperty,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,signalsBlocked,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,startTimer,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QObject,thread,NULL,ZEND_ACC_PUBLIC)

    {NULL,NULL,NULL}
};

void _register_QObject(TSRMLS_D){

    zend_class_entry ce;
    TSRMLS_FETCH();

    INIT_CLASS_ENTRY(ce,"QObject",QObject_methods);
    QObject_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);

    zend_declare_property_null(QObject_ce_ptr,"parent",strlen("parent"),ZEND_ACC_PRIVATE TSRMLS_CC);
    zend_declare_property_null(QObject_ce_ptr,"objectName",strlen("objectName"),ZEND_ACC_PROTECTED TSRMLS_CC);

}

static zend_function_entry QWidget_methods[] = {
 
    ZEND_ME(QWidget,__construct,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,show,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,hide,NULL,ZEND_ACC_PUBLIC)

    ZEND_ME(QWidget,acceptDrops,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,activateWindow,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,adjustSize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,clearFocus,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,clearMask,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,grabKeyboard,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,grabMouse,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,hasFocus,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,hasMouseTracking,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,height,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isActiveWindow,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isEnabled,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isFullScreen,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isHidden,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isMaximized,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isMinimized,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isModal,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isVisible,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isWindow,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,isWindowModified,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,maximumHeight,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,maximumWidth,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,minimumHeight,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,minimumWidth,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,releaseKeyboard,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,releaseMouse,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,underMouse,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,unsetCursor,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,unsetLayoutDirection,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,updateGeometry,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,updatesEnabled,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,width,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,x,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,y,NULL,ZEND_ACC_PUBLIC)

    ZEND_ME(QWidget,accessibleDescription,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,accessibleName,NULL,ZEND_ACC_PUBLIC)
/*    ZEND_ME(QWidget,accessibleName,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,backgroundRole,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,baseSize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,childrenRecr,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,childrenRegion,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,contentsRect,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,contextMenuPolicy,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,cursor,NULL,ZEND_ACC_PUBLIC)
*/    ZEND_ME(QWidget,ensurePolished,NULL,ZEND_ACC_PUBLIC)
/*    ZEND_ME(QWidget,focusPolicy,NULL,ZEND_ACC_PUBLIC)
*/    ZEND_ME(QWidget,focusProxy,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,focusWidget,NULL,ZEND_ACC_PUBLIC)
/*    ZEND_ME(QWidget,font,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,fontInfo,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,fontMetrics,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,foregroundRole,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,frameGeometry,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,frameSize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,geometry,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,getDC,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,inputContext,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,inputMethodQuery,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,layout,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,layoutDirection,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,mask,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,maximumSize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,minimumSize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,minimumSizeHint,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,nextInFocusChain,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,normalGeometry,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,paintEngine,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,palette,NULL,ZEND_ACC_PUBLIC)
*/    ZEND_ME(QWidget,parentWidget,NULL,ZEND_ACC_PUBLIC)
/*    ZEND_ME(QWidget,pos,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,rect,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,releaseDC,NULL,ZEND_ACC_PUBLIC)
*/
    ZEND_ME(QWidget,resize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,setAccessibleDescription,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,setAccessibleName,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,setGeometry,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,setFixedSize,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,setLayout,NULL,ZEND_ACC_PUBLIC)
/*    ZEND_ME(QWidget,size,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,sizeHint,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,sizeIncrement,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,sizePolicy,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,statusTip,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,style,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,toolTip,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,visibleRegion,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,whatsThis,NULL,ZEND_ACC_PUBLIC)
*/    ZEND_ME(QWidget,window,NULL,ZEND_ACC_PUBLIC)
/*    ZEND_ME(QWidget,windowFlags,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowIcon,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowIconText,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowOpacity,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowRole,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowState,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowTitle,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,windowType,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,x11Info,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QWidget,x11PictureHandle,NULL,ZEND_ACC_PUBLIC)
*/
    {NULL,NULL,NULL}
};

void _register_QWidget(TSRMLS_D)
{
    zend_class_entry ce;
    
    INIT_CLASS_ENTRY(ce,"QWidget",QWidget_methods);
    
    QWidget_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);
    // call zend_do_inheritance directly to inherit from QPaintDevice

//    zend_declare_property_null(QObject_ce_ptr,"accessibleDescription",strlen("accessibleDescription"),ZEND_ACC_PROTECTED TSRMLS_CC);
    PHP_QT_DECLARE_PROPERTY("acceptDrops");
    PHP_QT_DECLARE_PROPERTY("accessibleDescription");
    PHP_QT_DECLARE_PROPERTY("accessibleName");
    PHP_QT_DECLARE_PROPERTY("baseSize");
    PHP_QT_DECLARE_PROPERTY("childrenRect");
    PHP_QT_DECLARE_PROPERTY("childrenRegion");
    PHP_QT_DECLARE_PROPERTY("contextMenuPolicy");
    PHP_QT_DECLARE_PROPERTY("cursor");
    PHP_QT_DECLARE_PROPERTY("enabled");
    PHP_QT_DECLARE_PROPERTY("focus");
    PHP_QT_DECLARE_PROPERTY("focusPolicy");
    PHP_QT_DECLARE_PROPERTY("font");
    PHP_QT_DECLARE_PROPERTY("frameGeometry");
    PHP_QT_DECLARE_PROPERTY("frameSize");
    PHP_QT_DECLARE_PROPERTY("fullScreen");
    PHP_QT_DECLARE_PROPERTY("geometry");
    PHP_QT_DECLARE_PROPERTY("height");
    PHP_QT_DECLARE_PROPERTY("isActiveWindow");
    PHP_QT_DECLARE_PROPERTY("layotDirection");
    PHP_QT_DECLARE_PROPERTY("maximized");
    PHP_QT_DECLARE_PROPERTY("maximumHeight");
    PHP_QT_DECLARE_PROPERTY("maximumSize");
    PHP_QT_DECLARE_PROPERTY("maximumWidth");
    PHP_QT_DECLARE_PROPERTY("minimized");
    PHP_QT_DECLARE_PROPERTY("minimumHeight");
    PHP_QT_DECLARE_PROPERTY("minimumSize");

    PHP_QT_DECLARE_PROPERTY("minimumSizeHint");
    PHP_QT_DECLARE_PROPERTY("minimumWidth");
    PHP_QT_DECLARE_PROPERTY("modal");
    PHP_QT_DECLARE_PROPERTY("mouseTracking");
    PHP_QT_DECLARE_PROPERTY("normalGeometry");
    PHP_QT_DECLARE_PROPERTY("palette");
    PHP_QT_DECLARE_PROPERTY("pos");
    PHP_QT_DECLARE_PROPERTY("rect");
    PHP_QT_DECLARE_PROPERTY("size");
    PHP_QT_DECLARE_PROPERTY("sizeHint");
    PHP_QT_DECLARE_PROPERTY("sizeIncrement");
    PHP_QT_DECLARE_PROPERTY("sizePolicy");
    PHP_QT_DECLARE_PROPERTY("statusTip");
    PHP_QT_DECLARE_PROPERTY("toolTip");
    PHP_QT_DECLARE_PROPERTY("updatesEnabled");
    PHP_QT_DECLARE_PROPERTY("visible");
    PHP_QT_DECLARE_PROPERTY("whatsThis");
    PHP_QT_DECLARE_PROPERTY("width");
    PHP_QT_DECLARE_PROPERTY("windowFlags");
    PHP_QT_DECLARE_PROPERTY("windowIcon");
    PHP_QT_DECLARE_PROPERTY("windowIconText");
    PHP_QT_DECLARE_PROPERTY("windowModified");
    PHP_QT_DECLARE_PROPERTY("windowOpacity");
    PHP_QT_DECLARE_PROPERTY("windowTitle");
    PHP_QT_DECLARE_PROPERTY("x");
    PHP_QT_DECLARE_PROPERTY("y");



/*
properties:
    acceptDrops
    accessibleDescription;
*/

}

static zend_function_entry QCoreApplication_methods[] = {
	//public members 
    ZEND_ME(QCoreApplication,__construct,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QCoreApplication,filterEvent,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QCoreApplication,notify,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QCoreApplication,setEventFilter,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QCoreApplication,winEventFilter,NULL,ZEND_ACC_PUBLIC)
	//public slot
	ZEND_ME(QCoreApplication,quit,NULL,ZEND_ACC_PUBLIC)
	//public static members
    ZEND_ME(QCoreApplication,exec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
	ZEND_ME(QCoreApplication,addLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,applicationDirPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,applicationFilePath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,applicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,argc,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,argv,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,closingDown,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,exit,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,flush,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,hasPendingEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,installTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,instance,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,libraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,organizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,organizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,postEvent,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,processEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,removeLibraryPath,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,removePostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,removeTranslator,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,sendEvent,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,sendPostedEvents,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,setApplicationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,setLibraryPaths,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,setOrganizationDomain,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,setOrganizationName,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,startingUp,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QCoreApplication,translate,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
	{NULL,NULL,NULL}
};

void _register_QCoreApplication(TSRMLS_D)
{
    zend_class_entry ce;
    
    INIT_CLASS_ENTRY(ce,"QCoreApplication",QCoreApplication_methods);
    
    QCoreApplication_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QObject_ce_ptr,NULL TSRMLS_CC);

}

static zend_function_entry QApplication_methods[] = {

	//public members 
    ZEND_ME(QApplication,__construct,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QApplication, commitData, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, inputContext, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, isSessionRestored, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, macEventFilter, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, qwsEventFilter, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, qwsSetCustomColors, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, saveState, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, sessionId, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, sessionKey, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, setInputContext, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, winFocus, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, x11EventFilter, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, x11ProcessEvent, NULL, ZEND_ACC_PUBLIC) 
	//public slots members
    ZEND_ME(QApplication, aboutQt, NULL, ZEND_ACC_PUBLIC) 
    ZEND_ME(QApplication, closeAllWindows, NULL, ZEND_ACC_PUBLIC) 
	//public static members
    //ZEND_ME(QApplication,exec,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QApplication, beep, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, colorSpec, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, cursorFlashTime, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, desktopSettingsAware, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, doubleClickInterval, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, isLeftToRight, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, isRightToLeft, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, keyboardInputInterval, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QApplication, quitOnLastWindowClosed, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QApplication, restoreOverrideCursor, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QApplication, setDesktopSettingsAware, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setColorSpec, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setCursorFlashTime, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setDoubleClickInterval, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC) 
    ZEND_ME(QApplication, setKeyboardInputInterval, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setQuitOnLastWindowClosed, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setStartDragDistance, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setStartDragTime, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setWheelScrollLines, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, startDragDistance, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, startDragTime, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, syncX, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, wheelScrollLines, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, activeModalWidget, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, activePopupWidget, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, activeWindow, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, focusWidget, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
    ZEND_ME(QApplication, setActiveWindow, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, widgetAt, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, topLevelAt, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, type, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, allWidgets, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, changeOverrideCursor, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, clipboard, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, desktop, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, fontMetrics, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, globalStrut, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, isEffectEnabled, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, keyboardModifiers, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, layoutDirection, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, mouseButton, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, overrideCursor, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, palette, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, qwsDecoration, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, qwsSetDecoration, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setEffectEnabled, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setFont, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setGlobalStrut, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setLayoutDirection, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setOverrideCursor, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setPalette, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setStyle, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, setWindowIcon, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, style, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, topLevelWidgets, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	ZEND_ME(QApplication, windowIcon, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_ALLOW_STATIC)
	{NULL,NULL,NULL}
};

void _register_QApplication(TSRMLS_D)
{
    zend_class_entry ce;
    
    INIT_CLASS_ENTRY(ce,"QApplication",QApplication_methods);
    
    QApplication_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QCoreApplication_ce_ptr,NULL TSRMLS_CC);

    // properties
    
    zend_declare_property_bool(QApplication_ce_ptr,"quitOnLastWindowClosed",strlen("quitOnLastWindowClosed"), QApplication::quitOnLastWindowClosed(),ZEND_ACC_PROTECTED TSRMLS_CC);

    zend_declare_property_long(QApplication_ce_ptr,"doubleClickInterval",strlen("doubleClickInterval"),QApplication::doubleClickInterval(),ZEND_ACC_PROTECTED TSRMLS_CC);
    zend_declare_property_long(QApplication_ce_ptr,"cursorFlashTime",strlen("cursorFlashTime"),QApplication::cursorFlashTime(),ZEND_ACC_PROTECTED TSRMLS_CC);

    zend_declare_property_long(QApplication_ce_ptr,"keyboardInputInterval",strlen("keyboardInputInterval"),QApplication::keyboardInputInterval(),ZEND_ACC_PROTECTED TSRMLS_CC);


    zend_declare_property_long(QApplication_ce_ptr,"startDragDistance",strlen("startDragDistance"),QApplication::startDragDistance(),ZEND_ACC_PROTECTED TSRMLS_CC);
    zend_declare_property_long(QApplication_ce_ptr,"startDragTime",strlen("startDragTime"),QApplication::startDragTime(),ZEND_ACC_PROTECTED TSRMLS_CC);
    zend_declare_property_long(QApplication_ce_ptr,"wheelScrollLines",strlen("wheelScrollLines"),QApplication::wheelScrollLines(),ZEND_ACC_PROTECTED TSRMLS_CC);
}

static zend_function_entry QEvent_methods[] = {
	ZEND_ME(QEvent,__construct,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QEvent,accept,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QEvent,ignore,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QEvent,isAccepted,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QEvent,setAccepted,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QEvent,spontaneous,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QEvent,type,NULL,ZEND_ACC_PUBLIC)
	{NULL,NULL,NULL}
};

void _register_QEvent(TSRMLS_D)
{
    zend_class_entry ce;
    TSRMLS_FETCH();

    INIT_CLASS_ENTRY(ce,"QEvent",QEvent_methods);
    QEvent_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);

}

static zend_function_entry QLayoutItem_methods[] = {
	ZEND_ME(QLayoutItem,__construct,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,alignment,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,hasHeightForWidth,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,heightForWidth,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,invalidate,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,layout,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,minimumHeightForWidth,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,setAlignment,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,spacerItem,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem,widget,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayoutItem, expandingDirections,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayoutItem,geometry,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayoutItem,isEmpty,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayoutItem,maximumSize,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayoutItem,minimumSize,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayoutItem,setGeometry,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayoutItem,sizeHint,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	{NULL,NULL,NULL}
};


void _register_QLayoutItem(TSRMLS_C)
{
    zend_class_entry ce;
    TSRMLS_FETCH();

    INIT_CLASS_ENTRY(ce,"QLayoutItem",QLayoutItem_methods);
    QLayoutItem_ce_ptr = zend_register_internal_class(&ce TSRMLS_CC);
}

static zend_function_entry QLayout_methods[] = {
	ZEND_ME(QLayout,__construct,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,expandingDirections,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,geometry,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,isEmpty,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,maximumSize,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,minimumSize,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,activate,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,addWidget,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,indexOf,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,isEnabled,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,margin,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,menuBar,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,parentWidget,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,removeItem,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,removeWidget,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,setAlignment,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,setEnabled,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,setMargin,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,setMenuBar,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,setSizeConstraint,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,setSpacing,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,sizeConstraint,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,spacing,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,update,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLayout,closestAcceptableSize,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
	//ZEND_ME(QLayout,addChildLayout,NULL,ZEND_ACC_PROTECTED)
	//ZEND_ME(QLayout,addChildWidget,NULL,ZEND_ACC_PROTECTED)
	//ZEND_ME(QLayout,alignmentRect,NULL,ZEND_ACC_PROTECTED)
	//abstract class
	ZEND_ME(QLayout,addItem,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayout,count,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayout,takeAt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)
	ZEND_ME(QLayout,itemAt,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_ABSTRACT)

	{NULL,NULL,NULL}
};


void _register_QLayout(TSRMLS_C)
{
   zend_class_entry ce;
   
   //QLayout inherits QLayoutItem and QObject 
   INIT_CLASS_ENTRY(ce,"QLayout",QLayout_methods);
   //Register class and inherits QLayoutItem
   QLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayoutItem_ce_ptr,NULL TSRMLS_CC);
   //Inherits QObject
   zend_do_inheritance(QLayout_ce_ptr, QObject_ce_ptr TSRMLS_CC); 
}

static zend_function_entry QBoxLayout_methods[] = {
	ZEND_ME(QBoxLayout,__construct,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QBoxLayout,sizeHint,NULL,ZEND_ACC_PUBLIC)
	//abstract class
	ZEND_ME(QBoxLayout,addItem,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QBoxLayout,count,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QBoxLayout,takeAt,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QBoxLayout,setGeometry,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,itemAt,NULL,ZEND_ACC_PUBLIC)
	
	ZEND_ME(QBoxLayout,addLayout,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,addSpacing,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,addStretch,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,addStrut,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,addWidget,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,direction,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,insertLayout,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,insertSpacing,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,insertStretch,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,insertWidget,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,invalidate,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,setDirection,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,setStretchFactor,NULL,ZEND_ACC_PUBLIC)	
	ZEND_ME(QBoxLayout,insertItem,NULL,ZEND_ACC_PROTECTED)	
		
	{NULL,NULL,NULL}
};

void _register_QBoxLayout(TSRMLS_C)
{
   zend_class_entry ce;
    
   INIT_CLASS_ENTRY(ce,"QBoxLayout",QBoxLayout_methods);
   QBoxLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QLayout_ce_ptr,NULL TSRMLS_CC);
}

static zend_function_entry QAbstractSlider_methods[] = {
    ZEND_ME(QAbstractSlider,hasTracking,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,invertedAppearance,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,invertedControls,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,isSliderDown,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,maximum,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,minimum,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,orientation,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,pageStep,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setInvertedAppearance,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setInvertedControls,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setMaximum,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setMinimum,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setPageStep,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setRange,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setSingleStep,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setSliderDown,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setSliderPosition,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setTracking,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,singleStep,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,sliderPosition,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,triggerAction,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,value,NULL,ZEND_ACC_PUBLIC)

/* Slots */
    ZEND_ME(QAbstractSlider,setOrientation,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QAbstractSlider,setValue,NULL,ZEND_ACC_PUBLIC)

};

void _register_QAbstractSlider(TSRMLS_C)
{
   zend_class_entry ce;
    
   INIT_CLASS_ENTRY(ce,"QAbstractSlider",QAbstractSlider_methods);
   QAbstractSlider_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);
//   PHP_QT_DECLARE_PROPERTY("SliderAction");
   PHP_QT_DECLARE_PROPERTY("invertedAppearance");
   PHP_QT_DECLARE_PROPERTY("invertedControls");
   PHP_QT_DECLARE_PROPERTY("maximum");
   PHP_QT_DECLARE_PROPERTY("minimum");
   PHP_QT_DECLARE_PROPERTY("orientation");
   PHP_QT_DECLARE_PROPERTY("pageStep");
   PHP_QT_DECLARE_PROPERTY("singleStep");
   PHP_QT_DECLARE_PROPERTY("sliderDown");
   PHP_QT_DECLARE_PROPERTY("tracking");
   PHP_QT_DECLARE_PROPERTY("value");
}

static zend_function_entry QSlider_methods[] = {
	ZEND_ME(QSlider,__construct,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QSlider,setTickInterval,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QSlider,setTickPosition,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QSlider,tickInterval,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QSlider,tickPosition,NULL,ZEND_ACC_PUBLIC)
	{NULL,NULL,NULL}
};


void _register_QSlider(TSRMLS_C)
{
   zend_class_entry ce;
    
   INIT_CLASS_ENTRY(ce,"QSlider",QSlider_methods);
   QSlider_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QAbstractSlider_ce_ptr,NULL TSRMLS_CC);
   PHP_QT_DECLARE_PROPERTY("TickPosition");
}

static zend_function_entry QLineEdit_methods[] = {
	ZEND_ME(QLineEdit,__construct,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,alignment,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,backspace,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,createStandardContextMenu,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,cursorBackward,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,cursorForward,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,cursorPosition,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,cursorPositionAt,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,cursorWordBackward,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,cursorWordForward,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,del,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,deselect,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,displayText,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,dragEnabled,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,echoMode,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,end,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,hasAcceptableInput,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,hasFrame,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,hasSelectedText,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,home,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,inputMask,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,insert,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,isModified,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,isReadOnly,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,isRedoAvailable,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,isUndoAvailable,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,maxLength,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,minimumSizeHint,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,selectedText,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,selectionStart,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setAlignment,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setCursorPosition,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setDragEnabled,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setEchoMode,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setFrame,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setInputMask,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setMaxLength,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setModified,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setReadOnly,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setSelection,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,setValidator,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,sizeHint,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,text,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,validator,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,clear,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,copy,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,cut,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,paste,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,redo,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,selectAll,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,setText,NULL,ZEND_ACC_PUBLIC)
	ZEND_ME(QLineEdit,undo,NULL,ZEND_ACC_PUBLIC)
	//ZEND_ME(QLineEdit,contextMenuEvent,NULL,ZEND_ACC_PROTECTED)
	//ZEND_ME(QLineEdit,keyPressEvent,NULL,ZEND_ACC_PROTECTED)
	{NULL,NULL,NULL}
};


void _register_QLineEdit(TSRMLS_C)
{
   zend_class_entry ce;
    
   INIT_CLASS_ENTRY(ce,"QLineEdit",QLineEdit_methods);
   QLineEdit_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);

   PHP_QT_DECLARE_PROPERTY("alignment");
   PHP_QT_DECLARE_PROPERTY("cursorPosition");
   PHP_QT_DECLARE_PROPERTY("dragEnabled");
   PHP_QT_DECLARE_PROPERTY("echoMode");
   PHP_QT_DECLARE_PROPERTY("frame");
   PHP_QT_DECLARE_PROPERTY("inputMask");
   PHP_QT_DECLARE_PROPERTY("maxLength");
   PHP_QT_DECLARE_PROPERTY("modified");
   PHP_QT_DECLARE_PROPERTY("readOnly");
   PHP_QT_DECLARE_PROPERTY("redoAvailable");
   PHP_QT_DECLARE_PROPERTY("text");
}

static zend_function_entry QVBoxLayout_methods[] = {
	ZEND_ME(QVBoxLayout,__construct,NULL,ZEND_ACC_PUBLIC)
	{NULL,NULL,NULL}
};


void _register_QVBoxLayout(TSRMLS_C)
{
   zend_class_entry ce;
    
   INIT_CLASS_ENTRY(ce,"QVBoxLayout",QVBoxLayout_methods);
   QVBoxLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QBoxLayout_ce_ptr,NULL TSRMLS_CC);
}


static zend_function_entry QHBoxLayout_methods[] = {
	ZEND_ME(QHBoxLayout,__construct,NULL,ZEND_ACC_PUBLIC)
	{NULL,NULL,NULL}
};

void _register_QHBoxLayout(TSRMLS_C)
{
   zend_class_entry ce;
    
   INIT_CLASS_ENTRY(ce,"QHBoxLayout",QHBoxLayout_methods);
   QHBoxLayout_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QBoxLayout_ce_ptr,NULL TSRMLS_CC);
}

static zend_function_entry QFrame_methods[] = {
    ZEND_ME(QFrame,__construct,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,metaObject,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,className,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,qt_cast,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,qt_invoke,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,qt_emit,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,qt_property,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,frameStyle,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,setFrameStyle,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,frameWidth,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,sizeHint,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,frameShape,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,frameShadow,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,lineWidth,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,midLineWidth,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,frameRect,NULL,ZEND_ACC_PUBLIC)
    ZEND_ME(QFrame,staticMetaObject,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
    ZEND_ME(QFrame,tr,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
    ZEND_ME(QFrame,trUtf8,NULL,ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
    ZEND_ME(QFrame,drawFrame,NULL,ZEND_ACC_PROTECTED)

    {NULL,NULL,NULL}
};

void _register_QFrame(TSRMLS_D)
{
    zend_class_entry ce;
    INIT_CLASS_ENTRY(ce,"QFrame",QFrame_methods);
    QFrame_ce_ptr = zend_register_internal_class_ex(&ce TSRMLS_CC, QWidget_ce_ptr,NULL TSRMLS_CC);

    PHP_QT_DECLARE_PROPERTY("frameShape");
    PHP_QT_DECLARE_PROPERTY("frameShadow");
    PHP_QT_DECLARE_PROPERTY("lineWidth");
    PHP_QT_DECLARE_PROPERTY("midLineWidth");
    PHP_QT_DECLARE_PROPERTY("frameWidth");
    PHP_QT_DECLARE_PROPERTY("frameRect");

}


#include "ag_php_qt_cpp.inc"

/* }}} */
/* The previous line is meant for vim and emacs, so it can correctly fold and 
   unfold functions in source code. See the corresponding marks just before 
   function definition, where the functions purpose is also documented. Please 
   follow this convention for the convenience of others editing your code.
*/

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim600: noet sw=4 ts=4 fdm=marker
 * vim<600: noet sw=4 ts=4
 */

