/*
 * PHP-Qt - The PHP language bindings for Qt
 *
 * Copyright (C) 2005 
 * Thomas Moenicke <tm@ippfp.org>, 
 * Jean-Luc Gyger <jean_luc.gyger@freesurf.ch>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * QLCDNumber.cpp - QLCDNumber PHP implementation.
 * begin           : Sun Dec 11 13:58:03 2005
 * generated by    : moni using kalyptus 0.9.
 */

#include <iostream>
using namespace std;

#include "../php_qt.h"

#include <QLCDNumber>



/*		public enumMode:long {
			Mode = 0,
			Mode = 1,
			Mode = 2,
			Mode = 3
		}
*/

/*		public enumSegmentStyle:long {
			SegmentStyle = 0,
			SegmentStyle = 1,
			SegmentStyle = 2
		}
*/
/*********************************
 *    class     QLCDNumber
 *    function  metaObject
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject *
*********************************/
ZEND_METHOD(QLCDNumber, metaObject){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

/*********************************
 *    class     QLCDNumber
 *    function  className
 *    flags:    cv
 *
 *    @param   -

 *    @access   public
 *    @return   const char *
*********************************/
ZEND_METHOD(QLCDNumber, className){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

/*********************************
 *    class     QLCDNumber
 *    function  qt_cast
 *    flags:    v
 *
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   void*
*********************************/
ZEND_METHOD(QLCDNumber, qt_cast){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

/*********************************
 *    class     QLCDNumber
 *    function  qt_invoke
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLCDNumber, qt_invoke){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

/*********************************
 *    class     QLCDNumber
 *    function  qt_emit
 *    flags:    v
 *
 *    @param   int
 *    @param   QUObject*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLCDNumber, qt_emit){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}

/*********************************
 *    class     QLCDNumber
 *    function  qt_property
 *    flags:    v
 *
 *    @param   int
 *    @param   int
 *    @param   QVariant*
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLCDNumber, qt_property){
// marked as virtual, skipped
	php_printf("%s(): virtual functions are not yet implemented\n",get_active_function_name(TSRMLS_C));
}
// skip qObject


ZEND_METHOD(QLCDNumber,__construct){

	QLCDNumber *QLCDNumber_ptr;

	if(ZEND_NUM_ARGS() == 1){
		/*parent.Ptr*/
		zval* var0;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var0) == FAILURE) {
			return;
		}
        QLCDNumber *tmp = (QLCDNumber*) php_qt_fetch(var0);
        QLCDNumber_ptr = new QLCDNumber(tmp);
	}
	if(ZEND_NUM_ARGS() == 2){
		/*numDigits, parent.Ptr*/
		long var0;
		zval* var1;
		if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"lo", &var0, &var1) == FAILURE) {
			return;
		}
	    QLCDNumber *tmp = (QLCDNumber*) php_qt_fetch(var1);
        QLCDNumber_ptr = new QLCDNumber(var0,tmp);
	}
	PHP_QT_REGISTER(QLCDNumber_ptr);
	RETURN_NULL();
}

PHP_QT_DESTRUCT(QLCDNumber);


/*********************************
 *    class     QLCDNumber
 *    function  smallDecimalPoint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLCDNumber, smallDecimalPoint){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_BOOL(o->smallDecimalPoint());
}

/*********************************
 *    class     QLCDNumber
 *    function  numDigits
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLCDNumber, numDigits){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_LONG(o->numDigits());
}

/*********************************
 *    class     QLCDNumber
 *    function  setNumDigits
 *    flags:    
 *
 *    @param   int
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setNumDigits){
	long var_0;
	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"l", var_0) == FAILURE) {
		RETURN_FALSE;
	}
	zend_update_property_long(Z_OBJCE_P(getThis()),getThis(),"numDigits",strlen("numDigits"),var_0 TSRMLS_CC);
}

/*********************************
 *    class     QLCDNumber
 *    function  checkOverflow
 *    flags:    c
 *
 *    @param   double
 *    @param   -

 *    @access   public
 *    @return   bool
*********************************/
ZEND_METHOD(QLCDNumber, checkOverflow){
/*	zval* var_0;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
		RETURN_FALSE;
	}
	QObject* tmp_var_0 = (QObject*) php_qt_fetch(var_0);
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_BOOL(o->checkOverflow( tmp_var_0));*/
}
// marked for overloading: checkOverflow

/*********************************
 *    class     QLCDNumber
 *    function  mode
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   Mode
*********************************/
ZEND_METHOD(QLCDNumber, mode){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_LONG(o->mode());
}

/*********************************
 *    class     QLCDNumber
 *    function  setMode
 *    flags:    
 *
 *    @param   Mode
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setMode){
	zval* var_0;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
		RETURN_FALSE;
	}
	zend_update_property(Z_OBJCE_P(getThis()),getThis(),"mode",strlen("mode"),var_0 TSRMLS_CC);
}

/*********************************
 *    class     QLCDNumber
 *    function  segmentStyle
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   SegmentStyle
*********************************/
ZEND_METHOD(QLCDNumber, segmentStyle){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_LONG(o->segmentStyle());
}

/*********************************
 *    class     QLCDNumber
 *    function  setSegmentStyle
 *    flags:    
 *
 *    @param   SegmentStyle
 *    @param   -

 *    @access   public
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setSegmentStyle){
	zval* var_0;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
		RETURN_FALSE;
	}
	zend_update_property(Z_OBJCE_P(getThis()),getThis(),"segmentStyle",strlen("segmentStyle"),var_0 TSRMLS_CC);
}

/*********************************
 *    class     QLCDNumber
 *    function  value
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   double
*********************************/
ZEND_METHOD(QLCDNumber, value){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_DOUBLE(o->value());
}

/*********************************
 *    class     QLCDNumber
 *    function  intValue
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   int
*********************************/
ZEND_METHOD(QLCDNumber, intValue){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	RETURN_LONG(o->intValue());
}

/*********************************
 *    class     QLCDNumber
 *    function  sizeHint
 *    flags:    c
 *
 *    @param   -

 *    @access   public
 *    @return   QSize
*********************************/
ZEND_METHOD(QLCDNumber, sizeHint){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	QSize obj = (QSize) o->sizeHint();
	zend_class_entry *ce;                                   
	    object_init_ex(return_value, QLCDNumber_ce_ptr);     
	    zend_rsrc_list_entry le;                            
	    le.ptr = &obj;                                       
	    php_qt_register(return_value,le);                   
	    return;                                             
}

/*********************************
 *    class     QLCDNumber
 *    function  display
 *    flags:    l
 *
 *    @param   const QString&
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, display){
	zval* var_0;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
		RETURN_FALSE;
	}
	zend_update_property(Z_OBJCE_P(getThis()),getThis(),"value",strlen("value"),var_0 TSRMLS_CC);
}
// marked for overloading: display
// marked for overloading: display

/*********************************
 *    class     QLCDNumber
 *    function  setHexMode
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setHexMode){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	o->setHexMode();
	RETURN_NULL();
}

/*********************************
 *    class     QLCDNumber
 *    function  setDecMode
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setDecMode){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	o->setDecMode();
	RETURN_NULL();
}

/*********************************
 *    class     QLCDNumber
 *    function  setOctMode
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setOctMode){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	o->setOctMode();
	RETURN_NULL();
}

/*********************************
 *    class     QLCDNumber
 *    function  setBinMode
 *    flags:    l
 *
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setBinMode){
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	o->setBinMode();
	RETURN_NULL();
}

/*********************************
 *    class     QLCDNumber
 *    function  setSmallDecimalPoint
 *    flags:    l
 *
 *    @param   bool
 *    @param   -

 *    @access   public_slots
 *    @return   void
*********************************/
ZEND_METHOD(QLCDNumber, setSmallDecimalPoint){
	zval* var_0;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"o", &var_0) == FAILURE) {
		RETURN_FALSE;
	}
	zend_update_property(Z_OBJCE_P(getThis()),getThis(),"smallDecimalPoint",strlen("smallDecimalPoint"),var_0 TSRMLS_CC);
}

/*********************************
 *    class     QLCDNumber
 *    function  staticMetaObject
 *    flags:    s
 *
 *    @param   -

 *    @access   public
 *    @return   QMetaObject*
*********************************/
ZEND_METHOD(QLCDNumber, staticMetaObject){
/*	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	QMetaObject* obj = (QMetaObject*) o->staticMetaObject();
	zend_class_entry *ce;                                   
	    object_init_ex(return_value, QLCDNumber_ce_ptr);     
	    zend_rsrc_list_entry le;                            
	    le.ptr = obj;                                       
	    php_qt_register(return_value,le);                   */
	    return;                                             
}

/*********************************
 *    class     QLCDNumber
 *    function  tr
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLCDNumber, tr){
	char* var_0;
	int* len_0;

	char* var_1;
	int* len_1;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
		RETURN_FALSE;
	}
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	QString obj = (QString) o->tr( var_0,  var_1);
	zend_class_entry *ce;                                   
	    object_init_ex(return_value, QLCDNumber_ce_ptr);     
	    zend_rsrc_list_entry le;                            
	    le.ptr = &obj;                                       
	    php_qt_register(return_value,le);                   
	    return;                                             
}

/*********************************
 *    class     QLCDNumber
 *    function  trUtf8
 *    flags:    s
 *
 *    @param   const char*
 *    @param   const char*
 *    @param   -

 *    @access   public
 *    @return   QString
*********************************/
ZEND_METHOD(QLCDNumber, trUtf8){
	char* var_0;
	int* len_0;

	char* var_1;
	int* len_1;

	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"ss", &var_0, &len_0, &var_1, &len_1) == FAILURE) {
		RETURN_FALSE;
	}
	QLCDNumber *o = (QLCDNumber*) PHP_QT_FETCH();
	QString obj = (QString) o->trUtf8( var_0,  var_1);
	zend_class_entry *ce;                                   
	    object_init_ex(return_value, QLCDNumber_ce_ptr);     
	    zend_rsrc_list_entry le;                            
	    le.ptr = &obj;                                       
	    php_qt_register(return_value,le);                   
	    return;                                             
}

